<apex:page standardController="Gift_Batch__c" extensions="BatchProcessingController" sidebar="false">
        <apex:includeScript value="{!$Resource.jQuery}"/>
        <apex:includeScript value="{!URLFOR($Resource.ExtJS, 'ExtJS/ext-all-debug.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.ExtJS, 'ExtJS/Underscore_1.6.0.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.ExtJS, 'ExtJS/BatchProcessingInterfaceUtil.js')}"/>
    
        <apex:stylesheet value="{!URLFOR($Resource.ExtJS, 'ExtJS/resources/ext-theme-neptune/ext-theme-neptune-all.css')}"/>        
        <apex:includeScript value="{!URLFOR($Resource.XLSXSupport , 'js-xlsx-master/shim.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.XLSXSupport , 'js-xlsx-master/jszip.js')}" />
        <apex:includeScript value="{!URLFOR($Resource.XLSXSupport , 'js-xlsx-master/xlsx.js')}" />
    <!-- 
        <link rel="stylesheet" type="text/css" href="https://cdn.sencha.com/ext/gpl/4.2.1/resources/css/ext-all-neptune.css" />
       
        <apex:includeScript value="{!URLFOR($Resource.Sencha, 'ext-all-debug.js')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.Sencha, 'ext-theme-neptune-all.css')}"/>
        <script type="text/javascript" charset="utf-8" src="https://cdn.sencha.com/ext/gpl/4.2.1/ext-all-debug1.js"></script>
        <link rel="stylesheet" type="text/css" href="https://cdn.sencha.com/ext/gpl/4.2.1/resources/css/ext-all-neptune.css" />
    -->
    
    
    
        <apex:messages />
        <apex:form rendered="{!presetTemplate != null}">
            <script src="../../soap/ajax/31.0/connection.js" type="text/javascript"></script>
            <script src="../../soap/ajax/31.0/apex.js" type="text/javascript"></script>
    
            <apex:actionFunction name="postSave" action="{!postSave}"/>
            <apex:actionFunction name="enableSubmit"/>
    
            <apex:pageBlock title="{!$ObjectType.Gift_Batch__c.Label} Detail">
             <apex:pageMessage severity="info" strength="3" summary="Gift Batch is Commited." rendered="{!checkBatchStatus}"/>
             <apex:pageBlockButtons location="top">
                <apex:outputPanel layout="none" rendered="{!NOT(checkBatchStatus)}">
                  <input type="button" class="btn" value="Commit Batch" onclick="if (window.confirm('Are you sure, after closing you no longer will be able to modify the batch items.')) commitBatch(); else return false;"/>
                </apex:outputPanel>
                <apex:commandButton value="Report" onclick="window.open('/{!JSENCODE(BatchSettings.BatchReportId__c)}?pv0={!JSENCODE(selectedBatchId)}','_blank');" reRender="MainForm"/>
                <input type="file" id="fileInput" onchange="readFileContentsIntoString()" />
                <input type="button" id="uploadFile" onclick="DisplayRecordsFromFile()"  value="Upload File"/>                
                <div id="fileSpace"></div>
             </apex:pageBlockButtons> 
    
    
    <!--             <apex:actionPoller enabled="{!isSubmitEnabled}" interval="5" action="{!enableSubmit}"></apex:actionPoller>    -->
    
                <div id="summarySpace" style="margin-bottom: 10px;"></div>
                <div id="reconSpace" style="margin-bottom: 10px;"></div>
        
                <div style='opacity:0;height:0;overflow:hidden;' class="userFieldId">
                    <apex:inputField id="userFieldId" value="{!giftBatch.Template_Name__c}"/>
                </div>
                <div id="gridSpace"></div>
            </apex:pageBlock>
    
        </apex:form>
    
        <style>
            .custPopupPledge {
                background-color: white;
                border-width: 1px;
                border-style: solid;
                left: 15%;
                top: 50%;
                width: 70%;
                padding-bottom: 1px;
                padding-top: 1px;
                position: relative;
                z-index: 999;
                padding: 10px 10px 10px 10px;
                minHeight: 500px,
            }
            
            .custPopup {
                background-color: white;
                border-width: 0px;
                border-style: solid;
                left: 30%;
                top: 30%;
                width: 40%;
                padding-bottom: 1px;
                padding-top: 1px;
                position: relative;
                z-index: 999;
            }
            
            .popupBackground {
                background-color: rgba(0,0,0,0.5);    //black;
                position: absolute;
                width: 100%;
                height: 100%;
                top: 0;
                left: 0;
                z-index: 998;
            }
            
            .grid-td-boolean .x-grid-cell-inner {
                text-transform: capitalize;
            }
            
            .custPopup center {
                margin-top: 5%;
                margin-bottom: 5%;
            }
            .custPopup table {
                width: 70%;
                margin-top: 5%;
                margin-left: auto;
                margin-right: auto;
            }
            .custPopup table b {
                padding-left: 2%;
                padding-right: 2%;
            }
            .x-column-header-inner .x-column-header-text{
                white-space: normal;
            }
            
            .x-column-header-inner span {
                line-height: normal;
                padding-top: 3px !important;
                padding-bottom: 3px !important;
                text-align: center;
                top: 20%;
            }
    
            table.non-summary-fields {
                height: 3% !important;
                width: 10% !important;
                float: left !important;
                margin: 0 2% 1% 0 !important;
            }
    
            .x-form-checkbox {
               
            }
    
            .x-field-label-cell {
                vertical-align: middle;
            }
    
            .x-fieldset-header {
    
            }
    
            .lookup-icon-class {
                background-image: url('{!URLFOR($Resource.Icons, 'search-trigger.png')}');
            }
    
            //Picklist dropdown width
            .x-boundlist {
                min-width: 200px !important;
            }
    
            .x-grid-rowbody {
                padding-left: 0px !important;
            }
    
            #summarySpace>div, #gridSpace>div {
    
            }
    
            //Border Color
            div.x-panel div.x-panel-body {
                border-bottom-color: #157fcc;
                border-right-color: #157fcc;
                border-left-color: #157fcc;
            }
    
            .x-mask, .x-mask.x-mask-gray{    
                background-color: grey !important;
                height: 300% !important;
            }
    
             .x-grid-cell-inner-action-col {
                padding: 0px !important;
             }
             
             
            .saved-icon {
                cursor: default;
            }
            .Payment-Gateway {
                cursor:default;
            }
            .delete-batch-item-icon, .delete-alloc-item-icon, .delete-soft-credit-icon{ 
                cursor: hand;
            }
            .Separator{
                width: 2px;
                height: 17px;
                margin-left: 3px;
                margin-right: 3px;
                cursor: default;
            }
            
            .x-btn-default-small, .x-btn-inner {            
                color: black !important;
            }
    
            .required-field {
                background-color: rgb(255, 230, 230) !important;
            }
            
            .unsaved-recon-fields {
                font-style: italic;
                color: #40FF00;
            }
        </style>
     
        <script type="text/javascript" >
            var j$ = jQuery.noConflict();
    
            var lookupPrefix = '';
            var isConstOrgIdField = false;
            var isPledgeLookup = false;
    
            //Delete records if user wants to navigate away.
            var deleteAllIds = [];
            var deleteSoftCredits = [];
            var isLoadingEdit = false;
    
            var giftDetail_appealId;    //user story : Event Level look-up doesn't return results
    
    
            //User Timezone
           var userTimezone = "{!userTimezone}";
    
    
            sforce.connection.sessionId = "{!$Api.Session_ID}";
            sforce.connection.allOrNone = true;
    
    
    //------------------------------    Override Open Lookup.    ---------------------------------------------------------------------------
    
              var lookupId = j$("input[name$='userFieldId']")[0].id;
    
              function openLookup(baseURL, width, modified, searchParam) {
                    var modifiedBaseURL = baseURL.substr(0, baseURL.length-3);
        
                    baseURL = modifiedBaseURL + lookupPrefix;
        
                    if (modified == '1') baseURL = baseURL + searchParam;
        
                    var originalbaseURL = baseURL;
                    var originalwidth = width;
                    var originalmodified = modified;
                    var originalsearchParam = searchParam;
                 
                 
                    var isCustomLookup = false;
        
                    // Following "001" is the lookup type for Account object so change this as per your standard or custom object
                    if( lookupPrefix == "{!keyPrefixMap['Letter']}" || isConstOrgIdField){  //lookupPrefix == "{!keyPrefixMap['Fund']}" ||
                      var urlArr = baseURL.split("&");
                      var txtId = '';
                      if(urlArr.length > 2) {
                        urlArr = urlArr[1].split('=');
                        txtId = urlArr[1];
                      }
                 
                      // Following is the url of Custom Lookup page. You need to change that accordingly
                      baseURL = "/apex/causeview__CustomFundLookup?txt=" + txtId;
    
                      if(lookupPrefix == "{!keyPrefixMap['Letter']}") {
                        baseURL = baseURL + "&objName=" + 'Letter';
                      }
                      if(lookupPrefix == "{!keyPrefixMap['Account']}") {
                        baseURL = baseURL + "&objName=" + 'Account';
                      }
                      if(lookupPrefix == "{!keyPrefixMap['Contact']}") {
                        baseURL = baseURL + "&objName=" + 'Contact';
                      }
                      
                      // Following is the id of apex:form control "myForm". You need to change that accordingly
                      baseURL = baseURL + "&frm=" + escapeUTF("{!$Component.myForm}");
                      if (modified == '1') {
                        baseURL = baseURL + "&lksearch=" + searchParam;
                        isCustomLookup = true;
                      }
                 
    
                    }
             
             
                    if(isPledgeLookup) {
                          var urlArr = baseURL.split("&");
                          var txtId = '';
                          if(urlArr.length > 2) {
                            urlArr = urlArr[1].split('=');
                            txtId = urlArr[1];
                          }
                          baseURL = "/apex/causeview__CustomAccountContactLookup?namefield=" + lookupId + "&idfield=" + lookupId + "_lkid&txt=" + txtId;
    
                          baseURL = baseURL + "&frm=" + escapeUTF("{!$Component.myForm}");
                          if (modified == '1') {
                            baseURL = baseURL + "&lksearch=" + searchParam;
                            isCustomLookup = true;
                          }
                    }
                    
                    if(lookupPrefix == "{!keyPrefixMap['Event Level']}") {    //user story : Event Level look-up doesn't return results
                        var Lookup_Id = "{!JSENCODE(eventLevelLookupId)}";
                        var event_Level_LookupId = Lookup_Id.slice(2);
                        var stIdx = baseURL.indexOf('&lkfield=');
                        if(stIdx != -1) {
                            var toRep = baseURL.substring(stIdx, originalbaseURL.indexOf('&lktp', stIdx + 1));
                            baseURL = baseURL.replace(toRep, '');
                        }
                        baseURL = baseURL + "&lkfield=" + event_Level_LookupId + "&lkent=" + "{!keyPrefixMap['Allocation']}";   
                        
                        var dplpToEncode = "[null,\"";
                        if(giftDetail_appealId != undefined){
                            dplpToEncode = dplpToEncode + giftDetail_appealId;
                        }
                        dplpToEncode = dplpToEncode + "\"]";
                        var dplp_Id = encodeURIComponent(dplpToEncode);
                        baseURL = baseURL + "&dplp=" + dplp_Id;
                        isCustomLookup = true;
                      }
    
                 
                    if(isCustomLookup == true){    
                      openPopup(baseURL, "lookup", 350, 480, "width="+width+",height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
                    }
                    else {    //00NA000000AMCcc&lkent=a09
                        if (modified == '1') originalbaseURL = originalbaseURL + originalsearchParam;
                        var stIdx = originalbaseURL.indexOf('&lkfield=');
                        if(stIdx != -1) {
                            var toRep = originalbaseURL.substring(stIdx, originalbaseURL.indexOf('&lktp', stIdx + 1));
                            originalbaseURL = originalbaseURL.replace(toRep, '');
                        }
                        openPopup(originalbaseURL, "lookup", 350, 480, "width="+originalwidth+",height=480,toolbar=no,status=no,directories=no,menubar=no,resizable=yes,scrollable=no", true);
                    }
    
              }
    
    
            var width = j$('.bPageHeader').width()-60;
            var height = j$('.outerNoSidebar').height();
    
    
                //Populate List of field name and type to display in header.
            var contactFields = {!ContactFieldArray};
            var accountFields = {!AccountFieldArray};
            var RecGiftOrgContactFields = [];
            var RecurringGiftFields = {!RecurringGiftFieldArray};
            var TransactionFields = {!TransactionFieldArray};
            var PaymentFields = {!PaymentFieldArray};
            var ReceiptFields = {!ReceiptFieldArray};
            var GiftDetailFields = {!GiftDetailFieldArray};
            var SoftCreditFields = {!SoftCreditFieldArray};
    
            var paymentTypesSelected = '{!paymentTypesSelected}';
    
            var totalGifts = {!giftBatch.Total_Gift__c};
            var giftBatchId = '{!giftBatch.Id}';
            var giftBatchStatus = '{!giftBatch.Batch_Status__c}';
            //var userlocale ={!userlocale};
                      
    
            var emptyAllBatchItemRecord;
            var AllBatchItems = {!AllBatchItems};
            AllBatchItems.Records = [{}];
    
            var getRenderer = function(fieldType) {
                if(fieldType == 'DATE') {
                    return ''; //{xtype: 'datecolumn'}  Ext.util.Format.dateRenderer('M d, Y');
                  
                } else if(fieldType == 'CURRENCY') {
                    //return new Ext.util.Format.numberRenderer('0.00'); //currency('0', '$', '0.00', true);  //numberRenderer('0.00');
                    return '';
                } else {
                    return function(value, metaData, record, row, col, store, gridView) {
                            //metaData.tdAttr = 'data-qtip="'+record.get('price')+' is the price of '+value+'"';
                            var t = this;
                            metaData.tdAttr = 'data-qtip = ""';
                            return value;
                        };
    
                }
            }
    
            var getXType = function(fieldType) {
                if(fieldType == 'DATE') {
                    return 'datecolumn'; //{xtype: 'datecolumn'}  Ext.util.Format.dateRenderer('M d, Y');
                } else {
                    return '';
                }
            }
    
    //------------------------------    Grid Cell Lookup Implementation.    ---------------------------------------------------------------------------
            var lookupId;
            var lookupThis;
            var lookupField;
            var lookupBatchItemRow;
            var lookupObjPrefix;
            var lookupRow;
            
            var isGridLookup = false;
    
            var uField = Ext.get(Ext.DomQuery.selectNode("input[id$=:userFieldId]"));
           
            
            uField.on('change', function() {
                // There is some delay required to let script set values to fields.
                Ext.Function.defer(function(){
                    var nId = Ext.get(lookupId+"_lkid").getValue();
                    var e = Ext.get(lookupThis.id).up('.x-panel').down('td.x-grid-cell-selected');
    
                    var nValue = Ext.get(lookupId+"_lkold").getValue();
                    
                    if (nId != '000000000000000')
                    {
                        if(isPledgeLookup) {
                            //--------------------    Pledge Account/Contact Lookup Implementation    --------------------
                            var pledgeDonorLookup = Ext.get(j$('[name="pledge_donor_lookup"]')[0].id);
                            pledgeDonorLookup.dom.value = nValue;
                            pledgeDonorLookup.focus();
                            
                            //var rec = new PledgeInstFieldsModel(getNewAllBatchItem(emptyAllBatchItemRecord));
    
                            var donorExist = false;
                            var indexToRemove = [];
                            _.each(pledgeInstStore.data.items, function(each, i, list) {
                                if(each.data.causeview__Account_Contact__c_Id == nId)
                                {
                                    donorExist = true;
                                }
                                if(isEmptyOrNullOrUndefined(each.data.fulfillment_Amount)) {
                                    indexToRemove.push(i);
                                }
                            });
                            if(!donorExist) {
                                for(var i=indexToRemove.length-1; i>=0 ; i--) {
                                        pledgeInstStore.removeAt(indexToRemove[i]);
                                }
                            }
                            if(!donorExist) {
                                pledgeInstStore.add(generateInstallmentData(getOpenInstallments(nId), nId.indexOf('001') != -1));
                            }
                        } else {
                            if(isGridLookup == true) {
                                if(lookupField.fieldName == 'ConstOrgId') {
                                    //lookupThis.store.loadData([[nId, nId]]);
                                    //lookupThis.select([nId]);
                                    lookupThis.setValue(nId);
                                    BatchItemPanel.editingPlugin.startEdit(lookupRow.rowIndex, e.dom.cellIndex);
                                } else {
                                    //[value, display]
                                    //lookupThis.store.loadData([[nValue, nValue]]);
                                    lookupThis.setValue(nValue);
                                    //lookupThis.select([nValue]);
            
                                    //Store Id in fieldName_Id for persistance.
                                    if(lookupBatchItemRow) {
                                        if(lookupObjPrefix == 'GiftDetail_') {
                                            try {
                                                var AllocationGrid = Ext.getCmp(Ext.get(lookupThis.id).up('.x-panel').id);
                                                var selectionModel = AllocationGrid.getSelectionModel();
                                                store.getAt(lookupBatchItemRow.rowIndex).data.GiftDetails[selectionModel.selection.row][lookupObjPrefix + lookupField.fieldName + '_Id'] = nId;
                                                 //giftDetail_appealId = store.getAt(lookupBatchItemRow.rowIndex).data.GiftDetails[selectionModel.selection.row]['GiftDetail_causeview__New_Campaign__c_Id'];
                                                AllocationGrid.editingPlugin.startEdit(selectionModel.selection.row, e.dom.cellIndex);
                                            } catch(err) { /*do nothing*/ }
                                        }
                                        if(lookupObjPrefix == 'SoftCred_') {
                                            try {
                                                var SoftCreditGrid = Ext.getCmp(Ext.get(lookupThis.id).up('.x-panel').id);
                                                var selectionModel = SoftCreditGrid.getSelectionModel();
                                                store.getAt(lookupBatchItemRow.rowIndex).data.SoftCredits[selectionModel.selection.row][lookupObjPrefix + lookupField.fieldName + '_Id'] = nId;
                                                SoftCreditGrid.editingPlugin.startEdit(selectionModel.selection.row, e.dom.cellIndex);
                                            } catch(err) { /*do nothing*/ }
                                        }
                                    } else {
                                        store.getAt(lookupRow.rowIndex).data[lookupObjPrefix + lookupField.fieldName + '_Id'] = nId;
                                        BatchItemPanel.editingPlugin.startEdit(lookupRow.rowIndex, e.dom.cellIndex);
                                        //Event Level lookup issues ---for summary fields
                                        if(lookupObjPrefix == 'GiftDetail_' || giftDetail_appealId != nId) { 
                                           if(isEmptyOrNullOrUndefined(giftDetail_appealId)){
                                           giftDetail_appealId = nId;
                                           } 
                                          else{giftDetail_appealId = nId;}
                                           
                                        }
                                       
                                    }
                                    
                                }
    
                                if(!lookupBatchItemRow) {
                                    displayNonSummaryFields(Ext.get(lookupRow));
                                }
                            } else {
                                lookupThis.setValue(nValue);
                                //lookupThis.selectText();
                                lookupThis.focus(false, 200);
                                var e1 = Ext.get(lookupThis.id);
                                var row = e1.findParent('tr.x-grid-row', 50, false);
                                store.getAt(row.rowIndex).data[lookupObjPrefix ? lookupObjPrefix + lookupField.fieldName : lookupField.fieldName] = nValue;
                                store.getAt(row.rowIndex).data[(lookupObjPrefix ? lookupObjPrefix + lookupField.fieldName : lookupField.fieldName) + '_Id'] = nId;
        
                                if(lookupField.fieldName == 'causeview__Letter__c' || lookupField.fieldName == 'causeview__Constituent__c') {
                                    var queryFields = '';
                                    var objPrefix = '';
                                    var objName = '';
                                    var fieldName = '';
                                    var value = '';
        
                                    if(lookupField.fieldName == 'causeview__Letter__c') {
                                        queryFields += ', causeview__Name__c';
                                        objPrefix = 'Gift_';
                                        objName = 'causeview__Letter__c';
                                        fieldName = 'Id';
                                        value = store.getAt(row.rowIndex).data[objPrefix + lookupField.fieldName + '_Id'];
                                    }                
                                    if(lookupField.fieldName == 'causeview__Constituent__c') {
                                        queryFields += ', causeview__Constituent_ID__c, FirstName, LastName';
                                        objPrefix = 'RecGiftOrgContact_';
                                        objName = 'Contact';
                                        fieldName = 'Id';
                                        value = store.getAt(row.rowIndex).data[objPrefix + lookupField.fieldName + '_Id'];
                                     
                                    }                
        
                                    Visualforce.remoting.Manager.invokeAction(
                                        '{!$RemoteAction.BatchProcessingController.getData}',
                                        value, queryFields, objName, fieldName,
                                        function(result, event) {
                                            var fields = queryFields.split(',');
                                            for(var i=0; i<fields.length; i++) {
                                                if(fields[i].trim() == 'causeview__Name__c') {
                                                    store.getAt(row.rowIndex).data[objPrefix + 'causeview__Letter__c_Name'] = result['causeview__Name__c'];
                                                    Ext.fly(e1.down('input')).set({ 'data-qtip': result['causeview__Name__c'] });
                                                }
                                                if(fields[i].trim() == 'causeview__Constituent_ID__c') {
                                                    store.getAt(row.rowIndex).data[objPrefix + 'id'] = result['Id'];
                                                    store.getAt(row.rowIndex).data[objPrefix + 'causeview__Constituent__c'] = result['causeview__Constituent_ID__c'];
                                                    store.getAt(row.rowIndex).data[objPrefix + 'firstName'] = result['FirstName'];
                                                    store.getAt(row.rowIndex).data[objPrefix + 'lastName'] = result['LastName'];
        
                                                    displayNonSummaryFields(Ext.get(row));
                                                    var x = j$(row).find('input[name="RecGiftOrgContact_causeview__Constituent__c"]');
                                                    try {
                                                        Ext.getCmp(Ext.get(j$(row).find('input[name="RecGiftOrgContact_causeview__Constituent__c"]')[0].id).up('table.x-field').id).focus(false, 200);
                                                    } catch(err) {    /*Do nothing*/    }
                                                }
                                            }
                                        }
                                    );
                                }
        
                            }
                        }
                        uField.un('change');
                    }
                }, 30, this);
                
            }, this);
    
    
    //------------------------------    Grid Cell Editor Configurations.    ---------------------------------------------------------------------------
    
            //Payment Type Picklist Values for Open Pledge UI.
            var paymentTypePicklistValues = [];
    
            var getEditor = function(field, isNonSummary, prefix) {
                if(field.fieldType == 'DATE') {
                    return {
                        xtype: 'datefield', //format: 'm/d/y',
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        readOnly : (field.isReadOnly == true) ? true : false,
                        //allowBlank : (field.isRequired == true) ? false : true,
                        };
                } else if(field.fieldType == 'PICKLIST' || field.fieldType == 'MULTIPICKLIST') {
                    var picklistEntries = [];
                    if(field.fieldName.trim() == 'causeview__Payment_Type__c' && paymentTypesSelected !== undefined && paymentTypesSelected != null) {
                        var types = paymentTypesSelected.split(',');
                        for(var i=0; i<types.length; i++) {
                            picklistEntries.push([types[i], types[i]]);
                        }
                        if(field.picklistValues != 'Undefined' || field.picklistValues != 'null') {
                            for(var i=0; i<field.picklistValues.length; i++) {
                                paymentTypePicklistValues.push([field.picklistValues[i], field.picklistValues[i]]);
                            }
                        }
                    } else if(field.picklistValues != 'Undefined' || field.picklistValues != 'null') {
                        for(var i=0; i<field.picklistValues.length; i++) {
                            picklistEntries.push([field.picklistValues[i], field.picklistValues[i]]);
                        }
                    }
                    return new Ext.form.field.ComboBox({
                                name: isNonSummary ? prefix + field.fieldName : '',
                                fieldLabel: isNonSummary ? field.fieldLable : '',
                                typeAhead: true,
                                multiSelect: field.fieldType == 'MULTIPICKLIST' ? true : false,
                                triggerAction: 'all',
                                forceSelection: true,
                                queryMode: 'local',
                                store: picklistEntries,
                                //allowBlank : (field.isRequired == true) ? false : true,
                                readOnly : (field.isReadOnly == true) ? true : false
                            });
                } else if(field.fieldType == 'INTEGER' || field.fieldType == 'DOUBLE') {
                    return {xtype: 'numberfield',
                            repeatTriggerClick : false,
                    //allowBlank : (field.isRequired == true) ? false : true,
                    readOnly : (field.isReadOnly == true) ? true : false};
                } else if(field.fieldType == 'CURRENCY') {
                    return {xtype: 'customnumberfield',
                            repeatTriggerClick : false,vtype: 'Currency',
                    //allowBlank : (field.isRequired == true) ? false : true,
                    readOnly : (field.isReadOnly == true) ? true : false}; //customnumberfield
                } else if(field.fieldType == 'BOOLEAN') {
                    return {xtype: 'checkbox',
                    //allowBlank : (field.isRequired == true) ? false : true,
                    readOnly : (field.isReadOnly == true) ? true : false}; //{xtype: 'checkcolumn', stopSelection: false}
                } else if(field.fieldType == 'EMAIL') {
                    return {xtype: 'textfield',
                    //allowBlank : (field.isRequired == true) ? false : true,
                    readOnly : (field.isReadOnly == true) ? true : false}; //, vtype: 'email'
                } else if(field.fieldType == 'REFERENCE') {    //trigger
                    return {
                                xtype: 'customtrigger',
                                name: isNonSummary ? prefix + field.fieldName : '',
                                triggerCls: 'lookup-icon-class',
                                triggerAction: 'all',
                                //emptyText: 'click the trigger',
                                enableKeyEvents : true,
                                onTriggerClick: function() {
                                            lookupThis = this;
                                            isPledgeLookup = field.fieldName == 'pledge_donor_lookup' ? true : false;
                                            var objType = '';
    //                                        var e = Ext.get(Ext.select('td.x-grid-cell-selected').elements[0].id);
                                            var e = Ext.get(lookupThis.id).up('.x-panel').down('td.x-grid-cell-selected');
                                            lookupRow = e.findParent('tr.x-grid-row', 50, false);
                                            var e1 = Ext.get(lookupRow.id).findParent('table', 50, false);
                                            lookupBatchItemRow = Ext.get(e1.id).findParent('tr.x-grid-row', 200, false);
                                            if(field.fieldName == 'ConstOrgId') {
                                                isConstOrgIdField = true;
                                                if(store.getAt(lookupRow.rowIndex).data['IsOrgRelated'] == 'O') { // store.getAt(lookupRow.rowIndex).data['IsOrgRelated'] == 'O'
                                                    objType = 'Account';
                                                } else {
                                                    objType = 'Contact';
                                                }
                                            } else {
                                                isConstOrgIdField = false;
                                                objType = field.sObjectType.attributes.type;
                                            }
                                            try {    ////user story : Event Level look-up doesn't return results
                                                var AllocationGrid = Ext.getCmp(Ext.get(lookupThis.id).up('.x-panel').id);
                                                var selectionModel = AllocationGrid.getSelectionModel();
                                                giftDetail_appealId = store.getAt(lookupBatchItemRow.rowIndex).data.GiftDetails[selectionModel.selection.row]['GiftDetail_causeview__New_Campaign__c_Id'];
                                               
                                            }
                                            
                                            catch(err){
                                                //do nothing
                                            }
                                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BatchProcessingController.getLookupPrefix}',
                                                objType, field.fieldName, function(result, event) {
                                                    lookupPrefix = result;
                                                    
                                                    lookupId = uField.getAttribute("id");
                                                    Ext.get(lookupId).dom.value = lookupThis.getValue() || '';
                                                    
                                                    var uA = Ext.get(lookupId+'_lkwgt');
                                                    
                                                    lookupField = field;
                                                    lookupObjPrefix = prefix;
                                                    isGridLookup = true;
                                                    
                                                    window.location = Ext.get(uA).getAttribute("href");
                                            
                                            });
    
    
                                },
                                listeners: {
                                    specialkey: function(field, e) {
                                        if (e.getKey() == e.DOWN) {
                                            this.onTriggerClick();
                                        }
                                    }
                                }
                    };
                } else if(field.fieldType == 'REFERENCE') {
                    return new Ext.form.field.ComboBox({
                                name: isNonSummary ? prefix + field.fieldName : '',
                                fieldLabel: isNonSummary ? field.fieldLable : '',
                                triggerCls: 'lookup-icon-class',
                                typeAhead: true,
                                triggerAction: 'all',
                                store: [['', '']],
                                itemId: 'pash',
                                cls: 'fund-class', //field.fieldName == 'causeview__Fund__c' ? 'fund-class' : '',
                                readOnly : (field.isReadOnly == true) ? true : false,
                                //allowBlank : (field.isRequired == true) ? false : true,
                                listeners: {
                                'expand': function(record, x) {
                                            lookupThis = this;
                                            var objType = '';
    //                                        var e = Ext.get(Ext.select('td.x-grid-cell-selected').elements[0].id);
                                            var e = Ext.get(lookupThis.id).up('.x-panel').down('td.x-grid-cell-selected');
                                            lookupRow = e.findParent('tr.x-grid-row', 50, false);
                                            var e1 = Ext.get(lookupRow.id).findParent('table', 50, false);
                                            lookupBatchItemRow = Ext.get(e1.id).findParent('tr.x-grid-row', 200, false);
                                            if(field.fieldName == 'ConstOrgId') {
                                                isConstOrgIdField = true;
                                                if(store.getAt(lookupRow.rowIndex).data['IsOrgRelated'] == 'O') { // store.getAt(lookupRow.rowIndex).data['IsOrgRelated'] == 'O'
                                                    objType = 'Account';
                                                } else {
                                                    objType = 'Contact';
                                                }
                                            } else {
                                                isConstOrgIdField = false;
                                                objType = field.sObjectType.attributes.type;
                                            }
                                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BatchProcessingController.getLookupPrefix}',
                                                objType, field.fieldName, function(result, event) {
                                                    lookupPrefix = result;
    
                                                    
                                                    lookupId = uField.getAttribute("id");
                                                    Ext.get(lookupId).dom.value = lookupThis.getValue() || '';
                                                    
                                                    var uA = Ext.get(lookupId+'_lkwgt');
                                                    
                                                    lookupField = field;
                                                    lookupObjPrefix = prefix;
                                                    isGridLookup = true;
                                                    
                                                    window.location = Ext.get(uA).getAttribute("href");
                                            
                                            });
    
    
                                    }
                                }
                            });
                } else if(field.fieldType == 'TEXTAREA') {
                    return {
                        xtype: 'textarea',
                        rows: 1,
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
                    };
                } else {
                    return {xtype: 'textfield',
                    //allowBlank : (field.isRequired == true) ? false : true,
                    readOnly : (field.isReadOnly == true) ? true : false};
                }
            }
    
            var getEditor1 = function(field, isNonSummary, prefix) {
                if(field.fieldType == 'DATE') {
                    return {
                        xtype: 'datefield', //format: 'm/d/y',
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false,
                        //format: 'm d Y',
                        //altFormats: 'm,d,Y|m-d-Y'
    
                        };
                } else if(field.fieldType == 'PICKLIST' || field.fieldType == 'MULTIPICKLIST') {
                    var picklistEntries = [];
                    if(field.picklistValues != 'Undefined' || field.picklistValues != 'null') {
                        for(var i=0; i<field.picklistValues.length; i++) {
                            picklistEntries.push([field.picklistValues[i], field.picklistValues[i]]);
                        }
                    }
                    return {
                                xtype: 'combobox',
                                name: isNonSummary ? prefix + field.fieldName : '',
                                fieldLabel: isNonSummary ? field.fieldLable : '',
                                typeAhead: true,
                                multiSelect: field.fieldType == 'MULTIPICKLIST' ? true : false,
                                triggerAction: 'all',
                                forceSelection: true,
                                queryMode: 'local',
                                store: picklistEntries,
                                //allowBlank : (field.isRequired == true) ? false : true,
                                readOnly : (field.isReadOnly == true) ? true : false
                            };
                } else if(field.fieldType == 'INTEGER' || field.fieldType == 'DOUBLE') {
                    return {
                        xtype: 'numberfield',
                        repeatTriggerClick : false,
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
                        };
                } else if(field.fieldType == 'CURRENCY') {
                    return {
                        xtype: 'customnumberfield', vtype: 'Currency',
                        repeatTriggerClick : false,
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
                        };
                } else if(field.fieldType == 'BOOLEAN') {
                    return {
                        xtype: 'checkbox',
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
                        };
                } else if(field.fieldType == 'REFERENCE') {
                    return {
                                name: isNonSummary ? prefix + field.fieldName : '',
                                fieldLabel: isNonSummary ? field.fieldLable : '',
                                xtype: 'trigger',
                                triggerCls: 'lookup-icon-class',
                                triggerAction: 'all',
                                inputAttrTpl: ' data-qtip="" ',
                                readOnly : (field.isReadOnly == true) ? true : false,
                                //emptyText: 'click the trigger',
                                onTriggerClick: function(el, eOpts) {
                                        lookupThis = this;
                                        /*if(isEmptyOrNullOrUndefined(elem.getValue())) {
                                            // If field value is Null, make the Lookup Id field as Null.
                                            if(storeData.data.hasOwnProperty(e.field + '_Id')) {
                                                storeData.data[e.field + '_Id'] = null;
                                            }
                                            // If field value is Null, make the Lookup Name field as Null.
                                            if(storeData.data.hasOwnProperty(e.field + '_Name')) {
                                                storeData.data[e.field + '_Name'] = null;
                                            }
                                        }*/
                                        isPledgeLookup = field.fieldName == 'pledge_donor_lookup' ? true : false;
                                        if(isPledgeLookup) {
                                            isConstOrgIdField = false;
                                            var uField = Ext.get(Ext.DomQuery.selectNode("input[id$=:userFieldId]"));
                                            
                                            lookupId = uField.getAttribute("id");
                                            Ext.get(lookupId).dom.value = lookupThis.getValue() || '';
                                            
                                            var uA = Ext.get(lookupId+'_lkwgt');
                                            
                                            isGridLookup = false;
                                            lookupObjPrefix = prefix;
                                            lookupField = field;
                                            window.location = Ext.get(uA).getAttribute("href");
                                        } else {
                                            Visualforce.remoting.Manager.invokeAction('{!$RemoteAction.BatchProcessingController.getLookupPrefix}',
                                                field.sObjectType.attributes.type, field.fieldName, function(result, event) {
                                                    lookupPrefix = result;
                                                    isConstOrgIdField = false;
                                                    var uField = Ext.get(Ext.DomQuery.selectNode("input[id$=:userFieldId]"));
                                                    
                                                    lookupId = uField.getAttribute("id");
                                                    Ext.get(lookupId).dom.value = lookupThis.getValue() || '';
                                                    
                                                    var uA = Ext.get(lookupId+'_lkwgt');
                                                    
                                                    isGridLookup = false;
                                                    lookupObjPrefix = prefix;
                                                    lookupField = field;
                                                    window.location = Ext.get(uA).getAttribute("href");
                                            
                                            });
                                        }
    
                                },
                                listeners: {
                                    specialkey: function(field, e) {
                                        if (e.getKey() == e.DOWN) {
                                            this.onTriggerClick();
                                        }
                                    },
                                    afterrender: function(elem, events) {
                                        try {
                                            var row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                                            if(store.getAt(row.rowIndex).data['approved'] == true) {
                                                this.getEl().dom.setAttribute('readOnly', true);
                                                elem.inputEl.dom.readOnly = true;
                                                elem.readOnly = true;
                                                elem.el.dom.readOnly = true;
                                            }
                                        } catch(err) {
                                            //Do nothing.
                                        }
                                    },
                                    blur: function(field, newVal, oldVal) 
                                    { 
                                       try{
                                            var row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                                           var storeData = store.getAt(row.rowIndex);
                                             
                                             if(!(isEmptyOrNullOrUndefined(field.lastValue)) && field.id.indexOf('triggerfield') != -1) 
                                               {
                                                 if(isEmptyOrNullOrUndefined(storeData.data[field.name+ '_Id']))
                                                 {
                                                 //j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given ' + field.value +  ' : ' +'Please select the value from look up Icon ' +'</b></div>');
                                                 j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given "'+ field.fieldLabel + '". Please select the value from look up Icon :' + field.value +'</b></div>'); 
                                                 }                 
                                                 return; 
                                           }
                                       } catch(err)  
                                       { 
                                        //do nothing.
                                       }
                                     },
                                    change: function(field, newVal, oldVal) {
                                    j$(".error-msg").has("b:contains('No Record found for the given \""+ field.fieldLabel + "\"')").remove();
                                        try {
                                            var row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                                            var storeData = store.getAt(row.rowIndex);
                                            if(isEmptyOrNullOrUndefined(newVal)) {
                                                storeData.data[field.name] = newVal;
                                                // If field is a Lookup and value is Null, make the Lookup Id field as Null.
                                                if(storeData.data.hasOwnProperty(field.name + '_Id')) {
                                                    storeData.data[field.name + '_Id'] = null;
                                                }
                                                // If field is a Lookup and value is Null, make the Lookup Name field as Null.
                                                if(storeData.data.hasOwnProperty(field.name + '_Name')) {
                                                    storeData.data[field.name + '_Name'] = null;
                                                }
                                            }
                                        } catch(err) {
                                            //Do nothing.
                                        }
                                    }
    
                                }
                            };
                } else if(field.fieldType == 'TEXTAREA') {
                    return {
                        xtype: 'textarea',
                        vtype: field.fieldType == 'EMAIL' ? '' : '', //email
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        rows: 1,
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
    
                        };
                } else {
                    return {
                        xtype: 'textfield',
                        vtype: field.fieldType == 'EMAIL' ? '' : '', //email
                        name: isNonSummary ? prefix + field.fieldName : '',
                        fieldLabel: isNonSummary ? field.fieldLable : '',
                        //allowBlank : (field.isRequired == true) ? false : true,
                        readOnly : (field.isReadOnly == true) ? true : false
    
                        };
                }
            }
    
    
            var getFieldType = function(fieldType) {
                if(fieldType == 'INTEGER') {
                    return 'INT';
                } else if(fieldType == 'DOUBLE') {
                    return 'FLOAT';
                } else if(fieldType == 'DATE') {
                    return 'DATE';
                } else if(fieldType == 'CURRENCY') {
                    return 'STRING';
                } else if(fieldType == 'BOOLEAN') {
                    return 'BOOLEAN';
                } else if(fieldType == 'EMAIL') {
                    return 'AUTO';
                } else {
                    return 'AUTO';
                }
            }
    
    
            var requiredFields = [];
    
            var columns = [];
            var fields = [];
            var allocationFields = [];
            var softCreditFields = [];
    
            var accountFormFields = [];
            var contactFormFields = [];
            var RecGiftOrgContactFormFields = [];
            var RecurringGiftFormFields = [];
            var TransactionFormFields = [];
            var PaymentFormFields = [];
            var ReceiptFormFields = [];
            var GiftDetailFormFields = [];
            var SoftCreditFormFields = [];
    
            var PaymentFormAllFields = [];
    
            var contactQueryFields = '';
            var accountQueryFields = '';
            var transnQueryFields = '';
            var paymentQueryFields = '';
            var receiptQueryFields = '';
            var allocQueryFields = '';
            var recGiftAllocQueryFields = '';
    
            var softCredQueryFields = '';
            var currencyfieldlist = '';
    
            //Row Numberer.
            columns.push({
                    xtype: 'rownumberer',
                    width: 30,
                    sortable: false,
                    menuDisabled: true,
                    });
    
            columns.push({
                    xtype: 'actioncolumn',
                    width: 90,  //Make icons bigger
                    minWidth: 90,
                    sortable: false,
                    menuDisabled: true,
                    items: [{
                        icon: '{!URLFOR($Resource.Icons, 'DeleteEnabled.png')}',
                        tooltip: 'Delete Batch Item',
                        iconCls: 'delete-batch-item-icon',
                        handler: function(grid, rowIndex) {
                                    if((store.getAt(rowIndex).data['approved'] == true && 'Credit Card,ACH/PAD'.indexOf(store.getAt(rowIndex).data['Pay_causeview__Payment_Type__c']) != -1) || giftBatchStatus == 'Closed') {
                                        return;
                                    }
                                    if (confirm("Are you sure you want to Delete this record?") == true) {    //changed by nitin
                                        if(store.data.items[rowIndex].data['id'] != '' && store.data.items[rowIndex].data['id'] != null && store.data.items[rowIndex].data['id'] !== undefined) {
                                            var tranResult = sforce.connection.query('Select id, ( SELECT Id FROM causeview__Soft_Credits__r), (Select Id From causeview__Gift_Allocations__r) From causeview__Gift__c Where Id = \'' + store.data.items[rowIndex].data['id'] + '\'');
                                            var Ids = [store.data.items[rowIndex].data['id']];
                                            var softCreditIds = [];
                                            if(tranResult.done == 'true' && tranResult.records !== undefined && tranResult.records.causeview__Soft_Credits__r != null && tranResult.records.causeview__Soft_Credits__r.done == 'true' && tranResult.records.causeview__Soft_Credits__r.records !== undefined) {
                                                if(parseInt(tranResult.records.causeview__Soft_Credits__r.size) == 1) {
                                                    softCreditIds.push(tranResult.records.causeview__Soft_Credits__r.records.Id);
                                                } else if(parseInt(tranResult.records.causeview__Soft_Credits__r.size) > 1) {
                                                    for(var i=0; i<parseInt(tranResult.records.causeview__Soft_Credits__r.size); i++) {
                                                        softCreditIds.push(tranResult.records.causeview__Soft_Credits__r.records[i].Id);
                                                    }
                                                }
                                            }
                                            var SoftCredDeleteResult = sforce.connection.deleteIds(softCreditIds);
                                            for(var i=0; i<SoftCredDeleteResult.length; i++) {
                                                if(SoftCredDeleteResult[i].success != 'true' && SoftCredDeleteResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                                    j$("#gridSpace").prepend('<div class="batch-item-delete-error-msg error-msg" style="color: red;"><b> Error in Deleting Existing Batch Item Records at row no. ' + (rowIndex+1) + '. </b></div>');
                                                    return;
                                                }
                                            }
                                            if(tranResult.done == 'true' && tranResult.records !== undefined && tranResult.records.causeview__Gift_Allocations__r != null && tranResult.records.causeview__Gift_Allocations__r.done == 'true' && tranResult.records.causeview__Gift_Allocations__r.records !== undefined) {
                                                if(parseInt(tranResult.records.causeview__Gift_Allocations__r.size) == 1) {
                                                    Ids.push(tranResult.records.causeview__Gift_Allocations__r.records.Id);
                                                } else if(parseInt(tranResult.records.causeview__Gift_Allocations__r.size) > 1) {
                                                    for(var i=0; i<parseInt(tranResult.records.causeview__Gift_Allocations__r.size); i++) {
                                                        Ids.push(tranResult.records.causeview__Gift_Allocations__r.records[i].Id);
                                                    }
                                                }
                                            }
                                            var deleteResult = sforce.connection.deleteIds(Ids);
                                            for(var i=0; i<deleteResult.length; i++) {
                                                if(deleteResult[i].success != 'true' && deleteResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                                    j$("#gridSpace").prepend('<div class="batch-item-delete-error-msg error-msg" style="color: red;"><b> Error in Deleting Existing Batch Item Records at row no. ' + (rowIndex+1) + '. </b></div>');
                                                    return;
                                                }
                                            }
                                        }
                                    } else {
                                        return;
                                    }
                                    store.removeAt(rowIndex);
                                    Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
                                    populateReconFields();
                                    if(store.getCount() <= totalGifts) {
                                        j$("#gridSpace").find('.gift-limit-error-msg').remove();
                                        j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                                    }
                                }
                    }, {
                        icon: '{!URLFOR($Resource.Icons, 'ClosedPledge.png')}',    //new icons added madhu
                        tooltip: 'Pledge',
                        iconCls: 'Close-Pledge',
                        handler: function(grid, rowIndex) {
                            var storeData = store.getAt(rowIndex).data;
                            if(storeData['approved'] != true && storeData['Inst_' + 'causeview__Installment_Balance__c'] > 0 && storeData['Gift_causeview__Gift_Type__c'] != 'Recurring') {
                                j$(".outerNoSidebar").parent("div").prepend('<div class="pledge-popup" >' +    //outerNoSidebar    .parent("div")
                                                                                '<div class="cust-Popup" >' +
                                                                                    '<div id="pledgeContainer"></div>' +
                                                                                '</div>' +
                                                                            '</div>');
                                var PledgeConatiner = new Ext.create('Ext.cv.GiftBatch.PledgeContainer', {
                                        renderTo: pledgeContainer,
                                        title : 'Payment',
                                    });
        
                                j$(".pledge-popup").addClass('popupBackground');
                                j$(".pledge-popup").find('.cust-Popup').addClass('custPopupPledge');
        
                                pledgePaymentStore.loadData([
                                                        {causeview__Donation__c: storeData['Gift_Name'],
                                                        causeview__Date__c: storeData['Pay_causeview__Date__c'],
                                                        causeview__Amount__c: storeData['Pay_causeview__Amount__c'],
                                                        causeview__Payment_Type__c: storeData['Pay_causeview__Payment_Type__c'],
                                                        causeview__Credit_Card_Number__c: storeData['Pay_causeview__Credit_Card_Number__c'],
                                                        causeview__Credit_Card_Type__c: storeData['Pay_causeview__Credit_Card_Type__c'],
                                                        Expiry_Date__x: storeData['Pay_Expiry_Date__x'],
                                                        Security_Code__x: storeData['Pay_Security_Code__x'],
                                                        causeview__Description__c: storeData['Pay_causeview__Description__c'],
                                                        causeview__Date_Deposited__c: storeData['Pay_causeview__Date_Deposited__c'],
                                                        causeview__Status__c: storeData['Pay_causeview__Status__c'],
                                                        causeview__Cheque_Num__c: storeData['Pay_causeview__Cheque_Num__c'],
                                                        causeview__Cheque_Date__c: storeData['Pay_causeview__Cheque_Date__c'],
                                                        causeview__Account_Number__c: storeData['Pay_causeview__Account_Number__c'],
                                                        causeview__Account_Type__c: storeData['Pay_causeview__Account_Type__c'],
                                                        causeview__Routing_Branch_Number__c: storeData['Pay_causeview__Routing_Branch_Number__c'],
                                                        causeview__Payment__c_Id: storeData['Pay_id'],
                                                        gridStoreIndex: rowIndex}
                                                    ]);
                                PledgeConatiner.items.items[0].form.loadRecord(pledgePaymentStore.getAt(0));
                                
                                try {
                                    var pledgeDonorLookup = Ext.get(j$('[name="pledge_donor_lookup"]')[0].id);
            
                                    var IsConRelated = storeData['IsOrgRelated'] == 'I';
            
                                    pledgeDonorLookup.dom.value = IsConRelated ? storeData['Contact_FirstName']+' '+storeData['Contact_LastName'] : storeData['Account_Name'];
                                    pledgeInstStore.loadData(generateInstallmentData(getOpenInstallments(IsConRelated ? storeData['Contact_id'] : storeData['Account_id']), IsConRelated));
                                } catch(err) {
                                    j$("#gridSpace").prepend('<div class="pledge-ui-load-data-msg error-msg" style="color: red;"><b> Unexpected Error While Populating Pledge Installment records. </b></div>');
                                }
                            }
                        }
                    }, {
                        icon: '{!URLFOR($Resource.Icons, 'separtor.png')}',
                        iconCls: 'Separator'
                    }, {
                        icon: '{!URLFOR($Resource.Icons, 'PaymentGateway.png')}',
                        tooltip: 'Payment Gateway',
                        iconCls: 'Payment-Gateway'
                    }, {
                        icon: '{!URLFOR($Resource.Icons, 'Saved.png')}',
                        tooltip: 'Saved',
                        iconCls: 'saved-icon'
                    }]
                });
    
            columns.push({
    
                    text: 'Type',
                    dataIndex: 'IsOrgRelated',
                    width: 60,
    
                    editor: {
                                xtype: 'combobox',
                                typeAhead: true,
                                triggerAction: 'all',
                                forceSelection: true,
                                queryMode: 'local',
                                store: [['I', 'I'], ['O', 'O']]
                            },
                    listeners: {
                        'checkchange': function(thisElem, rowIndex, checked, eOpts) {
                            //alert('ch');
                        }
                    },
                });        
    
            columns.push({
                    text: 'Constituent / Organization Id',
                    dataIndex: 'ConstOrgId',
                    width: 150,
    
                    editor: getEditor({fieldType: 'REFERENCE', fieldName: 'ConstOrgId', fieldLable: 'Constituent / Organization Id'}),
                });
    
            fields.push({name: 'id'});
            fields.push({name: 'saved'});
            fields.push({name: 'approved'});
    
            fields.push({name: 'IsOrgRelated'});
            fields.push({name: 'ConstOrgId'});
    
            AllBatchItems.Records[0]['IsOrgRelated'] = '{!JSENCODE(presetTemplate.Transaction_Type__c)}';
            AllBatchItems.Records[0]['IsOrgRelated'] = AllBatchItems.Records[0]['IsOrgRelated'] == 'Organisation' ? 'O' : 'I';
            AllBatchItems.Records[0]['ConstOrgId'] = '';
    
    
            AllBatchItems.Records[0]['id'] = '';
            AllBatchItems.Records[0]['saved'] = false;
            AllBatchItems.Records[0]['approved'] = false;
    
    
            transnQueryFields += ',causeview__Batch_Status__c , causeview__Constituent__r.Id, causeview__Organization__r.Id, causeview__Constituent__r.causeview__Constituent_ID__c, causeview__Organization__r.causeview__Organization_ID__c';
    
           
           
           
           
            fields.push({name: 'Contact_id'});
            AllBatchItems.Records[0]['Contact_id'] = '';
            var DescribeContactResult = sforce.connection.describeSObjects(['Contact']);
            for(var i=0; i<contactFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(contactFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(contactFields[i].fieldValue) && contactFields[i].fieldValue.length > 9) 
                {
                    contactFields[i].fieldValue = contactFields[i].fieldValue.trim().substring(0, 10);
                }
                if(contactFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(contactFields[i].fieldValue)){  
                    contactFields[i].fieldValue = contactFields[i].fieldValue.split(';');
                }
               if(contactFields[i].fieldType == 'CURRENCY') {
                    currencyfieldlist += 'Contact_'+ contactFields[i].fieldName + ',' ;
                } 
                if(contactFields[i].isHidden == false && contactFields[i].fieldName != 'causeview__Constituent_ID__c') {
                    contactQueryFields += ', ' + contactFields[i].fieldName;
                    transnQueryFields += ', causeview__Constituent__r.' + contactFields[i].fieldName;
                    if(contactFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        contactQueryFields += ', ' + contactFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        transnQueryFields += ', causeview__Constituent__r.' + contactFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        transnQueryFields += ', causeview__Constituent__r.' + contactFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        fields.push({name: 'Contact_' + contactFields[i].fieldName + '_Id', type: contactFields[i].fieldType});
    
                        //Populate Lookup values.
                        try {
                            if(DescribeContactResult != null && DescribeContactResult.length > 0 && DescribeContactResult[0] != null && DescribeContactResult[0].fields != null) {
                                for(var k=0; k<DescribeContactResult[0].fields.length; k++) {
                                    if(DescribeContactResult[0].fields[k].name == contactFields[i].fieldName) {
                                        var lookupResult = sforce.connection.query('Select id, Name From ' + DescribeContactResult[0].fields[k].referenceTo + ' Where id = \'' + contactFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['Contact_' + contactFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['Contact_' + contactFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                        }
                                    }
                                }
                            }
    //                    var lookupResult = sforce.connection.query('Select id, ' + contactFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id, ' + contactFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name From Contact Where ' + contactFields[i].fieldName + ' = \'' + contactFields[i].fieldValue + '\' LIMIT 1');
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['Contact_' + contactFields[i].fieldName] = contactFields[i].fieldValue;
                    }
                    if(contactFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(contactFields[i].fieldType), id: 'Contact-' + contactFields[i].fieldName, text: contactFields[i].fieldLable, tdCls: contactFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' ,
                            dataIndex: 'Contact_' + contactFields[i].fieldName, minWidth: 150, renderer: getRenderer(contactFields[i].fieldType),
                            editor: getEditor(contactFields[i], false, 'Contact_') }); //, autoScroll: true, tdCls: contactFields[i].isReadOnly == true ? (contactFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean read_only ' : 'read_only') : (contactFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean ' : '' ), 
                    } else {
                        contactFormFields.push(getEditor1(contactFields[i], true, 'Contact_'));
                    }
                    fields.push({name: 'Contact_' + contactFields[i].fieldName, type: contactFields[i].fieldType});
                }
                else if (contactFields[i].isHidden == true){                          //madhu hidden
                    AllBatchItems.Records[0]['Contact_' + contactFields[i].fieldName] = contactFields[i].fieldValue; 
                    fields.push({name: 'Contact_' + contactFields[i].fieldName, type: contactFields[i].fieldType}); 
                }
            }
    
    
            fields.push({name: 'Account_id'});
            AllBatchItems.Records[0]['Account_id'] = '';
            var DescribeAccountResult = sforce.connection.describeSObjects(['Account']);
            for(var i=0; i<accountFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(accountFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(accountFields[i].fieldValue) && accountFields[i].fieldValue.length > 9) {
                    accountFields[i].fieldValue = accountFields[i].fieldValue.trim().substring(0, 10);
                }
                if(accountFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(accountFields[i].fieldValue)){  
                    accountFields[i].fieldValue = accountFields[i].fieldValue.split(';');
                }
                if(accountFields[i].fieldType == 'CURRENCY' ){ 
                          currencyfieldlist += 'Account_'+accountFields[i].fieldName + ',';
                }
                if(accountFields[i].isHidden == false && accountFields[i].fieldName != 'causeview__Organization_ID__c') {
                    accountQueryFields += ', ' + accountFields[i].fieldName;
                    transnQueryFields += ', causeview__Organization__r.' + accountFields[i].fieldName;
                    if(accountFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        accountQueryFields += ', ' + accountFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        transnQueryFields += ', causeview__Organization__r.' + accountFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        transnQueryFields += ', causeview__Organization__r.' + accountFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        fields.push({name: 'Account_' + accountFields[i].fieldName + '_Id', type: accountFields[i].fieldType});
    
                        //Populate Lookup values.
                        try {
                            if(DescribeAccountResult != null && DescribeAccountResult.length > 0 && DescribeAccountResult[0] != null && DescribeAccountResult[0].fields != null) {
                                for(var k=0; k<DescribeAccountResult[0].fields.length; k++) {
                                    if(DescribeAccountResult[0].fields[k].name == accountFields[i].fieldName) {
                                        var lookupResult = sforce.connection.query('Select id, Name From ' + DescribeAccountResult[0].fields[k].referenceTo + ' Where id = \'' + accountFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['Account_' + accountFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['Account_' + accountFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['Account_' + accountFields[i].fieldName] = accountFields[i].fieldValue;
                    }
                    if(accountFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(accountFields[i].fieldType), id: 'Account-' + accountFields[i].fieldName, text: accountFields[i].fieldLable,
                            dataIndex: 'Account_' + accountFields[i].fieldName, width: 150, renderer: getRenderer(accountFields[i].fieldType),
                            editor: getEditor(accountFields[i], false, 'Account_') , tdCls: accountFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' });
                    } else {
                        accountFormFields.push(getEditor1(accountFields[i], true, 'Account_'));
                    }
                    fields.push({name: 'Account_' + accountFields[i].fieldName, type: accountFields[i].fieldType});
                }
                else if(accountFields[i].isHidden == true) {    //madhu hidden
                    AllBatchItems.Records[0]['Account_' + accountFields[i].fieldName] = accountFields[i].fieldValue;
                    fields.push({name: 'Account_' + accountFields[i].fieldName, type: accountFields[i].fieldType});
    
                }
            }
    
    //------------------------------------    RecGiftOrgContactFields    ------------------------------------------------------------------------------------------------------------
    
            transnQueryFields += ', causeview__Recurring_Donation__r.causeview__Constituent__c, causeview__Recurring_Donation__r.causeview__Constituent__r.causeview__Constituent_ID__c, causeview__Recurring_Donation__r.causeview__Constituent__r.FirstName, causeview__Recurring_Donation__r.causeview__Constituent__r.LastName';
            
            RecGiftOrgContactFields.push({fieldName: 'causeview__Constituent__c', fieldLable: 'Constituent ID', fieldType: 'REFERENCE', fieldValue: '', sObjectType: {attributes: {type: 'causeview__Recurring_Donation__c'}}});
            RecGiftOrgContactFields.push({fieldName: 'firstName', fieldLable: 'First Name', fieldType: '', fieldValue: ''});
            RecGiftOrgContactFields.push({fieldName: 'lastName', fieldLable: 'Last Name', fieldType: '', fieldValue: ''});
    
            fields.push({name: 'RecGiftOrgContact_id'});
            AllBatchItems.Records[0]['RecGiftOrgContact_id'] = '';
    
            for(var i=0; i<RecGiftOrgContactFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(RecGiftOrgContactFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(RecGiftOrgContactFields[i].fieldValue) && RecGiftOrgContactFields[i].fieldValue.length > 9) {
                    RecGiftOrgContactFields[i].fieldValue = RecGiftOrgContactFields[i].fieldValue.trim().substring(0, 10);
                }
                if(RecGiftOrgContactFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(RecGiftOrgContactFields[i].fieldValue)){  
                    RecGiftOrgContactFields[i].fieldValue = RecGiftOrgContactFields[i].fieldValue.split(';');
                }
                if(RecGiftOrgContactFields[i].fieldType == 'CURRENCY'){
                      currencyfieldlist += 'RecGiftOrgContact_'+RecGiftOrgContactFields[i].fieldName + ',';
                }
                if(RecGiftOrgContactFields[i].fieldType == 'REFERENCE') {
                    fields.push({name: 'RecGiftOrgContact_' + RecGiftOrgContactFields[i].fieldName + '_Id', type: RecGiftOrgContactFields[i].fieldType});
                }
                RecGiftOrgContactFormFields.push(getEditor1(RecGiftOrgContactFields[i], true, 'RecGiftOrgContact_'));
                fields.push({name: 'RecGiftOrgContact_' + RecGiftOrgContactFields[i].fieldName, type: RecGiftOrgContactFields[i].fieldType});
                AllBatchItems.Records[0]['RecGiftOrgContact_' + RecGiftOrgContactFields[i].fieldName] = RecGiftOrgContactFields[i].fieldValue;
            }
    
    
            fields.push({name: 'RecGift_id'});
            AllBatchItems.Records[0]['RecGift_id'] = '';
            transnQueryFields += ', causeview__Recurring_Donation__c';
            var DescribeRecGiftResult = sforce.connection.describeSObjects(['causeview__Recurring_Donation__c']);
            for(var i=0; i<RecurringGiftFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(RecurringGiftFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(RecurringGiftFields[i].fieldValue) && RecurringGiftFields[i].fieldValue.length > 9) {
                    RecurringGiftFields[i].fieldValue = RecurringGiftFields[i].fieldValue.trim().substring(0, 10);
                }
                if(RecurringGiftFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(RecurringGiftFields[i].fieldValue)){  
                    RecurringGiftFields[i].fieldValue = RecurringGiftFields[i].fieldValue.split(';');
                }
                if(RecurringGiftFields[i].fieldType == 'CURRENCY'){  
                  currencyfieldlist += 'RecGift_'+RecurringGiftFields[i].fieldName + ',';
                }
                
                if(RecurringGiftFields[i].isHidden == false) {
                    transnQueryFields += ', causeview__Recurring_Donation__r.' + RecurringGiftFields[i].fieldName;
                    if(RecurringGiftFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        transnQueryFields += ', causeview__Recurring_Donation__r.' + RecurringGiftFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        transnQueryFields += ', causeview__Recurring_Donation__r.' + RecurringGiftFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        fields.push({name: 'RecGift_' + RecurringGiftFields[i].fieldName + '_Id', type: RecurringGiftFields[i].fieldType});
    
                        //Populate Lookup values.
                        try {
                            if(DescribeRecGiftResult != null && DescribeRecGiftResult.length > 0 && DescribeRecGiftResult[0] != null && DescribeRecGiftResult[0].fields != null) {
                                for(var k=0; k<DescribeRecGiftResult[0].fields.length; k++) {
                                    if(DescribeRecGiftResult[0].fields[k].name == RecurringGiftFields[i].fieldName) {
                                        var lookupResult = sforce.connection.query('Select id, Name From ' + DescribeRecGiftResult[0].fields[k].referenceTo + ' Where id = \'' + RecurringGiftFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['RecGift_' + RecurringGiftFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['RecGift_' + RecurringGiftFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['RecGift_' + RecurringGiftFields[i].fieldName] = RecurringGiftFields[i].fieldValue;
                    }
                    if(RecurringGiftFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(RecurringGiftFields[i].fieldType), id: 'causeview__Recurring_Donation__c-' + RecurringGiftFields[i].fieldName, text: RecurringGiftFields[i].fieldLable, dataIndex: 'RecGift_' + RecurringGiftFields[i].fieldName, width: 150, renderer: getRenderer(RecurringGiftFields[i].fieldType), editor: getEditor(RecurringGiftFields[i], false, 'RecGift_') ,tdCls: RecurringGiftFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' });
                    } else {
                        RecurringGiftFormFields.push(getEditor1(RecurringGiftFields[i], true, 'RecGift_'));
                    }
                    fields.push({name: 'RecGift_' + RecurringGiftFields[i].fieldName, type: RecurringGiftFields[i].fieldType});
                }
                else if(RecurringGiftFields[i].isHidden == true) {
                    AllBatchItems.Records[0]['RecGift_' + RecurringGiftFields[i].fieldName] = RecurringGiftFields[i].fieldValue;
                    fields.push({name: 'RecGift_' + RecurringGiftFields[i].fieldName, type: RecurringGiftFields[i].fieldType});
                }
            }
    
            fields.push({name: 'Gift_causeview__Expected_Amount__c'});
            AllBatchItems.Records[0]['Gift_causeview__Expected_Amount__c'] = 0;
            fields.push({name: 'Gift_causeview__Batch_Status__c'});
            AllBatchItems.Records[0]['Gift_causeview__Batch_Status__c'] = 'Pending';
            fields.push({name: 'Gift_id'});
            fields.push({name: 'Gift_Name'});
            AllBatchItems.Records[0]['Gift_id'] = '';
            AllBatchItems.Records[0]['Gift_Name'] = '';
            transnQueryFields += ', Name, causeview__Expected_Amount__c';
            var DescribeTranResult = sforce.connection.describeSObjects(['causeview__Gift__c']);
            for(var i=0; i<TransactionFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(TransactionFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(TransactionFields[i].fieldValue) && TransactionFields[i].fieldValue.length > 9) {
                    TransactionFields[i].fieldValue = TransactionFields[i].fieldValue.trim().substring(0, 10);
                }
                if(TransactionFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(TransactionFields[i].fieldValue)){  
                    TransactionFields[i].fieldValue = TransactionFields[i].fieldValue.split(';');
                }
                if(TransactionFields[i].fieldType == 'CURRENCY' ){ 
                  currencyfieldlist += 'Gift_'+TransactionFields[i].fieldName+ ',';
                }
                
                if(TransactionFields[i].isHidden == false) {
                    transnQueryFields += ', ' + TransactionFields[i].fieldName;
                    if(TransactionFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        transnQueryFields += ', ' + TransactionFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        transnQueryFields += ', ' + TransactionFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        fields.push({name: 'Gift_' + TransactionFields[i].fieldName + '_Id', type: TransactionFields[i].fieldType});
                        if(TransactionFields[i].fieldName.trim() == 'causeview__Letter__c') {
                            transnQueryFields += ', causeview__Letter__r.causeview__Name__c';
                        }
    
                        //Populate Lookup values.
                        try {
                            if(DescribeTranResult != null && DescribeTranResult.length > 0 && DescribeTranResult[0] != null && DescribeTranResult[0].fields != null) {
                                for(var k=0; k<DescribeTranResult[0].fields.length; k++) {
                                    if(DescribeTranResult[0].fields[k].name == TransactionFields[i].fieldName) {
                                        var fld = TransactionFields[i].fieldName.trim() == 'causeview__Letter__c' ? ',causeview__Name__c' : '';
                                        var lookupResult = sforce.connection.query('Select id, Name ' + fld + ' From ' + DescribeTranResult[0].fields[k].referenceTo + ' Where id = \'' + TransactionFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['Gift_' + TransactionFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['Gift_' + TransactionFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                            if(TransactionFields[i].fieldName == 'causeview__Letter__c') {
                                                AllBatchItems.Records[0]['Gift_' + TransactionFields[i].fieldName + '_Name'] = lookupResult.records.causeview__Name__c;
                                            }
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['Gift_' + TransactionFields[i].fieldName] = TransactionFields[i].fieldValue;
                    }
                    if(TransactionFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(TransactionFields[i].fieldType), id: 'causeview__Gift__c-' + TransactionFields[i].fieldName, tdCls: TransactionFields[i].fieldName == 'causeview__Letter__c' ? (TransactionFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean letter-tdcls' : 'letter-tdcls') : ( TransactionFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean ' : ''), text: TransactionFields[i].fieldLable, dataIndex: 'Gift_' + TransactionFields[i].fieldName, width: 150, renderer: getRenderer(TransactionFields[i].fieldType), editor: getEditor(TransactionFields[i], false, 'Gift_')});
                    } else {
                        TransactionFormFields.push(getEditor1(TransactionFields[i], true, 'Gift_'));
                    }
                    fields.push({name: 'Gift_' + TransactionFields[i].fieldName, type: TransactionFields[i].fieldType});
                    if(TransactionFields[i].fieldName == 'causeview__Letter__c') {
                        fields.push({name: 'Gift_' + TransactionFields[i].fieldName + '_Name', type: TransactionFields[i].fieldType});
                    }
                }
                else if(TransactionFields[i].isHidden == true) { //madhu hidden
                    AllBatchItems.Records[0]['Gift_' + TransactionFields[i].fieldName] = TransactionFields[i].fieldValue;
                    fields.push({name: 'Gift_' + TransactionFields[i].fieldName , type: TransactionFields[i].fieldType});
                }
            }
    
            var isPaymentStatusPresent = false;
            var isAccNumberInSummary = false;
            var isCreditCardNumInSummary = false;
            fields.push({name: 'Pay_id'});
            AllBatchItems.Records[0]['Pay_id'] = '';
            var DescribePayResult = sforce.connection.describeSObjects(['causeview__Payment__c']);
            for(var i=0; i<PaymentFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(PaymentFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(PaymentFields[i].fieldValue) && PaymentFields[i].fieldValue.length > 9) {
                    PaymentFields[i].fieldValue = PaymentFields[i].fieldValue.trim().substring(0, 10);
                }
                if(PaymentFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(PaymentFields[i].fieldValue)){  
                    PaymentFields[i].fieldValue = PaymentFields[i].fieldValue.split(';');
                }
                if(PaymentFields[i].fieldType == 'CURRENCY'){ 
                   currencyfieldlist += 'Pay_'+PaymentFields[i].fieldName + ',';
                }
                
                // Change field label "Amount" to "Payment Amount" if field is "causeview__Amount__c".
                if(PaymentFields[i].fieldName == 'causeview__Amount__c') {
                    PaymentFields[i].fieldLable = 'Payment Amount';
                }
                if(PaymentFields[i].isHidden == false) {
                    //Add 'causeview__Status__c' field to store if not present.
                    if(PaymentFields[i].fieldName == 'causeview__Status__c') {
                        isPaymentStatusPresent = true;
                    }
                    paymentQueryFields += ', ' + PaymentFields[i].fieldName;
                    if(PaymentFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        paymentQueryFields += ', ' + PaymentFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        paymentQueryFields += ', ' + PaymentFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        fields.push({name: 'Pay_' + PaymentFields[i].fieldName + '_Id', type: PaymentFields[i].fieldType});
                        //Populate Lookup values.
                        try {
                            if(DescribePayResult != null && DescribePayResult.length > 0 && DescribePayResult[0] != null && DescribePayResult[0].fields != null) {
                                for(var k=0; k<DescribePayResult[0].fields.length; k++) {
                                    if(DescribePayResult[0].fields[k].name == contactFields[i].fieldName) {
                                        var lookupResult = sforce.connection.query('Select id, Name From ' + DescribePayResult[0].fields[k].referenceTo + ' Where id = \'' + PaymentFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['Pay_' + PaymentFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['Pay_' + PaymentFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['Pay_' + PaymentFields[i].fieldName] = PaymentFields[i].fieldValue;
                    }
                    if(PaymentFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(PaymentFields[i].fieldType), id: 'causeview__Payment__c-' + PaymentFields[i].fieldName, text: PaymentFields[i].fieldLable, dataIndex: 'Pay_' + PaymentFields[i].fieldName, width: 150, renderer: getRenderer(PaymentFields[i].fieldType), editor: getEditor(PaymentFields[i], false, 'Pay_') , tdCls: PaymentFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' });
    
                        if (PaymentFields[i].fieldName == 'causeview__Account_Number__c'){
                            isAccNumberInSummary = true;
    
                        }
                        if (PaymentFields[i].fieldName == 'causeview__Credit_Card_Number__c'){
                            isCreditCardNumInSummary = true;
    
                            var obj = {};
                            obj.fieldName = 'Expiry_Date__x';
                            obj.fieldLable = 'Expiry Date (mmyy)';
                            obj.fieldType = '';
                    
                            columns.push({
                                    xtype: getXType(obj.fieldType), 
                                    id: 'causeview__Payment__c-' + obj.fieldName, 
                                    text: obj.fieldLable,
                                    width: 150, 
                                    dataIndex: 'Pay_' + obj.fieldName, 
                                    renderer: getRenderer(obj.fieldType), 
                                    editor: getEditor(obj, false, 'Pay_')
                                    });
                
                            obj.fieldName = 'Security_Code__x';
                            obj.fieldLable = 'Security Code';
                            columns.push({
                                    xtype: getXType(obj.fieldType), 
                                    id: 'causeview__Payment__c-' + obj.fieldName, 
                                    text: obj.fieldLable, 
                                    width: 150, 
                                    dataIndex: 'Pay_' + obj.fieldName, 
                                    renderer:getRenderer(obj.fieldType), 
                                    editor: getEditor(obj, false, 'Pay_')
                                    });
                        }
                        if(isAccNumberInSummary || isCreditCardNumInSummary) {
                            var obj = {};
                            obj.fieldName = 'Submit_to_Gateway__x';
                            obj.fieldLable = 'Submit to Gateway';
                            obj.fieldType = 'BOOLEAN';
                            columns.splice(2, 0, {
                                    xtype: getXType(obj.fieldType), 
                                    id: 'causeview__Payment__c-' + obj.fieldName, 
                                    text: obj.fieldLable, 
                                    width: 150, 
                                    dataIndex: 'Pay_' + obj.fieldName, 
                                    renderer:getRenderer(obj.fieldType), 
                                    editor: getEditor(obj, false, 'Pay_'),
                                    tdCls: 'grid-td-boolean'
                                    });
                        }
                    } else {
                        PaymentFormFields.push(getEditor1(PaymentFields[i], true, 'Pay_'));
                    }
                    fields.push({name: 'Pay_' + PaymentFields[i].fieldName, type: PaymentFields[i].fieldType});
                }
                else if (PaymentFields[i].isHidden == true ){   //madhu hidden
                     AllBatchItems.Records[0]['Pay_' + PaymentFields[i].fieldName] = PaymentFields[i].fieldValue;
                     fields.push({name: 'Pay_' + PaymentFields[i].fieldName, type: PaymentFields[i].fieldType});
                }
            }
    
            if(!isCreditCardNumInSummary) {
                 PaymentFormFields.push({
                            xtype: 'textfield',
                            vtype: '', //email
                            name: 'Pay_Expiry_Date__x',
                            fieldLabel: 'Expiry Date (mmyy)'
                        });
    
                PaymentFormFields.push({
                            xtype: 'textfield',
                            vtype: '', //email
                            name: 'Pay_Security_Code__x',
                            fieldLabel: 'Security Code'
                        });
            }
    
            fields.push({name: 'Pay_Expiry_Date__x', type: 'text'});
            AllBatchItems.Records[0]['Pay_Expiry_Date__x'] = '';
            
            fields.push({name: 'Pay_Security_Code__x', type: 'text'});
            AllBatchItems.Records[0]['Pay_Security_Code__x'] = '';
    
            if(!isAccNumberInSummary && !isCreditCardNumInSummary) {
                PaymentFormFields.splice(0, 0, {
                            xtype: 'checkbox',
                            name: 'Pay_Submit_to_Gateway__x',
                            fieldLabel: 'Submit to gateway',
                         });
            }
            fields.push({name: 'Pay_Submit_to_Gateway__x', type: 'text'});
            AllBatchItems.Records[0]['Pay_Submit_to_Gateway__x'] = true;
    
    
            if(!isPaymentStatusPresent) {
                fields.push({name: 'Pay_causeview__Status__c'});
                AllBatchItems.Records[0]['Pay_causeview__Status__c'] = 'Pending';
            }
    
            PaymentFormAllFields = PaymentFormFields;
    
            var paymentTypeFieldMap = {};
    
            paymentTypeFieldMap['Credit Card'] = 'Pay_causeview__Credit_Card_Number__c, Pay_causeview__Credit_Card_Type__c, Pay_Expiry_Date__x, Pay_Security_Code__x, Pay_Submit_to_Gateway__x';
            paymentTypeFieldMap['Credit Card - Offline'] = 'Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['Cheque'] = 'Pay_causeview__Cheque_Num__c, Pay_causeview__Cheque_Date__c, Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['Check'] = 'Pay_causeview__Cheque_Num__c, Pay_causeview__Cheque_Date__c, Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['Cash'] = 'Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['ACH/PAD'] = 'Pay_causeview__Account_Number__c, Pay_causeview__Account_Type__c, Pay_causeview__Routing_Branch_Number__c, Pay_Submit_to_Gateway__x';
            paymentTypeFieldMap['Stock'] = 'Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['In Kind'] = 'Pay_causeview__Date_Deposited__c';
            paymentTypeFieldMap['Other'] = 'Pay_causeview__Date_Deposited__c';
    
            var paymentTypeFieldMapFields = '';
            for(each in paymentTypeFieldMap) {
                paymentTypeFieldMapFields += paymentTypeFieldMap[each];
            }
      
      
            var PaymentTypeList = Object.keys(paymentTypeFieldMap);
      
            var dispPaymentFieldsOnType = function(type) { 
                PaymentFormFields = [];
                if(PaymentTypeList.indexOf(type) == -1 ) {type='Other';}
                for(var i=0; i<PaymentFormAllFields.length; i++) {
                    if(paymentTypeFieldMap[type] && paymentTypeFieldMap[type].indexOf(PaymentFormAllFields[i].name) != -1 || paymentTypeFieldMapFields.indexOf(PaymentFormAllFields[i].name) == -1) {
                        PaymentFormFields.push(PaymentFormAllFields[i]);
                    }
                }
            }
    
            fields.push({name: 'Receipt_id'});
            AllBatchItems.Records[0]['Receipt_id'] = '';
            var DescribeReceiptResult = sforce.connection.describeSObjects(['causeview__Receipt__c']);
            for(var i=0; i<ReceiptFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(ReceiptFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(ReceiptFields[i].fieldValue) && ReceiptFields[i].fieldValue.length > 9) {
                    ReceiptFields[i].fieldValue = ReceiptFields[i].fieldValue.trim().substring(0, 10);
                }
                if(ReceiptFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(ReceiptFields[i].fieldValue)){  
                    ReceiptFields[i].fieldValue = ReceiptFields[i].fieldValue.split(';');
                }
                
                 if(ReceiptFields[i].fieldType == 'CURRENCY' ){  
                 currencyfieldlist += 'Receipt_'+ReceiptFields[i].fieldName + ',';
                 }
                if(ReceiptFields[i].isHidden == false) {
                    receiptQueryFields += ', ' + ReceiptFields[i].fieldName;
                    if(ReceiptFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldNameId.
                        receiptQueryFields += ', ' + ReceiptFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        receiptQueryFields += ', ' + ReceiptFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        fields.push({name: 'Receipt_' + ReceiptFields[i].fieldName + '_Id', type: ReceiptFields[i].fieldType});
                        //Populate Lookup values.
                        try {
                            if(DescribeReceiptResult != null && DescribeReceiptResult.length > 0 && DescribeReceiptResult[0] != null && DescribeReceiptResult[0].fields != null) {
                                for(var k=0; k<DescribeReceiptResult[0].fields.length; k++) {
                                    if(DescribeReceiptResult[0].fields[k].name == ReceiptFields[i].fieldName) {
                                        var lookupResult = sforce.connection.query('Select id, Name From ' + DescribeReceiptResult[0].fields[k].referenceTo + ' Where id = \'' + ReceiptFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0]['Receipt_' + ReceiptFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0]['Receipt_' + ReceiptFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0]['Receipt_' + ReceiptFields[i].fieldName] = ReceiptFields[i].fieldValue;
                    }
                    if(ReceiptFields[i].isForSummary == true) {
                        columns.push({xtype: getXType(ReceiptFields[i].fieldType), id: 'causeview__Receipt__c-' + ReceiptFields[i].fieldName, text: ReceiptFields[i].fieldLable, dataIndex: 'Receipt_' + ReceiptFields[i].fieldName, width: 150, renderer: getRenderer(ReceiptFields[i].fieldType), editor: getEditor(ReceiptFields[i], false, 'Receipt_') , tdCls: ReceiptFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' });
                    } else {
                        ReceiptFormFields.push(getEditor1(ReceiptFields[i], true, 'Receipt_'));
                    }
                    fields.push({name: 'Receipt_' + ReceiptFields[i].fieldName, type: ReceiptFields[i].fieldType});
                }
                else if(ReceiptFields[i].isHidden == true){
                    AllBatchItems.Records[0]['Receipt_' + ReceiptFields[i].fieldName] = ReceiptFields[i].fieldValue;
                    fields.push({name: 'Receipt_' + ReceiptFields[i].fieldName, type: ReceiptFields[i].fieldType});
                }
            }
    
            AllBatchItems.Records[0]['GiftDetails'] = [{}];
    
            fields.push('GiftDetails');
    
    
            GiftDetailFormFields.push({
                xtype: 'actioncolumn',
                width: 25,  //Make icons bigger
                sortable: false,
                menuDisabled: true,
                items: [{
                    icon: '{!URLFOR($Resource.Icons, 'DeleteEnabled.png')}',
                    tooltip: 'Delete Allocation',
                    iconCls: 'delete-alloc-item-icon', 
                    handler: function(grid, rowIndex){
                        var row = Ext.get(grid.id).findParent('tr.x-grid-row', 50, false);
                        var storeData = store.getAt(row.rowIndex);
                        if(storeData.data['approved'] == true || giftBatchStatus == 'Closed') {
                            return;
                        }
                        if(rowIndex != 0) {
                            storeData.data.GiftDetails.splice(rowIndex, 1);
                        
                            Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
                        }
                    }
                }]
            });
                
                //user story : Fields in Allocation section shifts to the right as more allocations are added per item
                var giftDetailFieldsToDisplayLength = _.reduce(GiftDetailFields, function(length, each) {
                                                        if(each.isHidden == false) {
                                                            length++;
                                                        }
                                                        return length;
                                                    }, 0);
    
    
            allocationFields.push({name: 'GiftDetail_id'});
            AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_id'] = '';
            var DescribeGiftDetailResult = sforce.connection.describeSObjects(['causeview__Gift_Detail__c']);
            for(var i=0; i<GiftDetailFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(GiftDetailFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(GiftDetailFields[i].fieldValue) && GiftDetailFields[i].fieldValue.length > 9) {
                    GiftDetailFields[i].fieldValue = GiftDetailFields[i].fieldValue.trim().substring(0, 10);
                }
                if(GiftDetailFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(GiftDetailFields[i].fieldValue)){  
                    GiftDetailFields[i].fieldValue = GiftDetailFields[i].fieldValue.split(';');
                }
                if(GiftDetailFields[i].fieldType == 'CURRENCY' ){ 
                     currencyfieldlist += 'GiftDetail_'+GiftDetailFields[i].fieldName + ',';
                }
                if(GiftDetailFields[i].isHidden == false) {
                    allocQueryFields += ', ' + GiftDetailFields[i].fieldName;
                    if(GiftDetailFields[i].fieldType == 'REFERENCE') {
                          // Add fieldName__r.Name if field name is fieldName__c, fieldName.Name if field name is fieldName.
                        allocQueryFields += ', ' + GiftDetailFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Name';
                        allocQueryFields += ', ' + GiftDetailFields[i].fieldName.replace(/__c$/,"__r").replace(/Id$/,"") + '.Id';
                        if(GiftDetailFields[i].fieldName.trim() == 'causeview__Fund__c') {
                            allocQueryFields += ', causeview__Fund__r.causeview__Fund_Name__c';
                        }
                        //allocationFields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName + '_Id', type: GiftDetailFields[i].fieldType});
                        if(GiftDetailFields[i].isForSummary == true) {
                            fields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName + '_Id', type: getFieldType(GiftDetailFields[i].fieldType)});
                        }
    
                        //Populate Lookup values.
                        try {
                            if(DescribeGiftDetailResult != null && DescribeGiftDetailResult.length > 0 && DescribeGiftDetailResult[0] != null && DescribeGiftDetailResult[0].fields != null) {
                                for(var k=0; k<DescribeGiftDetailResult[0].fields.length; k++) {
                                    if(DescribeGiftDetailResult[0].fields[k].name == GiftDetailFields[i].fieldName) {
                                        var fld = GiftDetailFields[i].fieldName.trim() == 'causeview__Fund__c' ? ',causeview__Fund_Name__c' : '';
                                        var lookupResult = sforce.connection.query('Select id, Name ' + fld + ' From ' + DescribeGiftDetailResult[0].fields[k].referenceTo + ' Where id = \'' + GiftDetailFields[i].fieldValue + '\' LIMIT 1');
                                        if(lookupResult != null && lookupResult.records != null) {
                                            AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_' + GiftDetailFields[i].fieldName] = lookupResult.records.Name;
                                            AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_' + GiftDetailFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                            if(GiftDetailFields[i].fieldName == 'causeview__Fund__c') {
                                                AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_' + GiftDetailFields[i].fieldName + '_Name'] = lookupResult.records.causeview__Fund_Name__c;
                                            }
                                            if(GiftDetailFields[i].isForSummary == true) {
                                                AllBatchItems.Records[0]['GiftDetail_' + GiftDetailFields[i].fieldName] = lookupResult.records.Name;
                                                AllBatchItems.Records[0]['GiftDetail_' + GiftDetailFields[i].fieldName + '_Id'] = lookupResult.records.Id;
                                                if(GiftDetailFields[i].fieldName == 'causeview__Fund__c') {
                                                    AllBatchItems.Records[0]['GiftDetail_' + GiftDetailFields[i].fieldName + '_Name'] = lookupResult.records.causeview__Fund_Name__c;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        } catch(err) {
                            //do nothing.
                        }
                    } else {
                        AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_' + GiftDetailFields[i].fieldName] = GiftDetailFields[i].fieldValue;
                        if(GiftDetailFields[i].isForSummary == true) {
                            AllBatchItems.Records[0]['GiftDetail_' + GiftDetailFields[i].fieldName] = GiftDetailFields[i].fieldValue;
                        }
                    }
                    if(GiftDetailFields[i].isForSummary == true) {
                    
                        columns.push({xtype: getXType(GiftDetailFields[i].fieldType), id: 'causeview__Gift_Detail__c-' + GiftDetailFields[i].fieldName, tdCls: GiftDetailFields[i].fieldName == 'causeview__Fund__c' ? ( GiftDetailFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean fund-tdcls' : 'fund-tdcls' ) : (GiftDetailFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean ' : '') , text: GiftDetailFields[i].fieldLable, dataIndex: 'GiftDetail_' + GiftDetailFields[i].fieldName, width: 150, renderer: getRenderer(GiftDetailFields[i].fieldType), editor: getEditor(GiftDetailFields[i], false, 'GiftDetail_')});
                        fields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName, type: getFieldType(GiftDetailFields[i].fieldType)});
                        if(GiftDetailFields[i].fieldName == 'causeview__Fund__c') {
                            fields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName + '_Name', type: getFieldType(GiftDetailFields[i].fieldType)});
                        }
                    }
    
                    //columns   //user story : Fields in Allocation section shifts to the right as more allocations are added per item
                    GiftDetailFormFields.push({tdCls: GiftDetailFields[i].fieldName == 'causeview__Fund__c' ?  (GiftDetailFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean fund-tdcls' : 'fund-tdcls') : (GiftDetailFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '' ),
                        id: 'NonSum-causeview__Gift_Detail__c-' + GiftDetailFields[i].fieldName, text: GiftDetailFields[i].fieldLable,
                        dataIndex: 'GiftDetail_' + GiftDetailFields[i].fieldName, renderer: getRenderer(GiftDetailFields[i].fieldType),
                        width : (width-150)/giftDetailFieldsToDisplayLength, editor: getEditor(GiftDetailFields[i], false, 'GiftDetail_')});
    
    
                    //fields
                    allocationFields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName, type: getFieldType(GiftDetailFields[i].fieldType)});
    
    
                    if(GiftDetailFields[i].fieldName == 'causeview__Fund__c') {
                        allocationFields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName + '_Name', type: getFieldType(GiftDetailFields[i].fieldType)});
                    }
                }
                else if(GiftDetailFields[i].isHidden == true) {
                    AllBatchItems.Records[0].GiftDetails[0]['GiftDetail_' + GiftDetailFields[i].fieldName] = GiftDetailFields[i].fieldValue;
                    fields.push({name: 'GiftDetail_' + GiftDetailFields[i].fieldName, type: getFieldType(GiftDetailFields[i].fieldType)});
    
                }
            }
    
            AllBatchItems.Records[0]['SoftCredits'] = [{}];
    
            fields.push('SoftCredits');
    
            SoftCreditFormFields.push({
                xtype: 'actioncolumn',
                width: 25,  //Make icons bigger
                sortable: false,
                menuDisabled: true,
                
                items: [{
                    icon: '{!URLFOR($Resource.Icons, 'DeleteEnabled.png')}',
                    tooltip: 'Delete Soft Credit',
                    iconCls: 'delete-soft-credit-icon',
                    handler: function(grid, rowIndex){
                        var row = Ext.get(grid.id).findParent('tr.x-grid-row', 50, false);
                        var storeData = store.getAt(row.rowIndex);
                        if(storeData.data['approved'] == true || giftBatchStatus == 'Closed') {
                            return;
                        }
                        storeData.data.SoftCredits.splice(rowIndex, 1);
                        
                        Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
    
                    }
                }]
            });
    
            softCreditFields.push({name: 'SoftCred_id'});
            AllBatchItems.Records[0].SoftCredits[0]['SoftCred_id'] = '';
            //Rearrange Soft Credit Fields.
            if(SoftCreditFields.length >= 4) {
                for(var i=0; i<SoftCreditFields.length; i++) {
                    if(SoftCreditFields[i].fieldName == 'causeview__Solicitor__c') {
                        var temp = SoftCreditFields[0];
                        SoftCreditFields[0] = SoftCreditFields[i];
                        SoftCreditFields[i] = temp;
                    }
                    if(SoftCreditFields[i].fieldName == 'causeview__Organization_Solicitor__c') {
                        var temp = SoftCreditFields[1];
                        SoftCreditFields[1] = SoftCreditFields[i];
                        SoftCreditFields[i] = temp;
                    }
                    if(SoftCreditFields[i].fieldName == 'causeview__Role__c') {
                        var temp = SoftCreditFields[2];
                        SoftCreditFields[2] = SoftCreditFields[i];
                        SoftCreditFields[i] = temp;
                    }
    
                }
            }
                    //user story : Fields in Allocation section shifts to the right as more allocations are added per item
                    var softCreditFieldsToDisplayLength = _.reduce(SoftCreditFields, function(length, each) {
                                                        if(each.isHidden == false) {
                                                            length++;
                                                        }
                                                        return length;
                                                    }, 0);
    
    
            for(var i=0; i<SoftCreditFields.length; i++) {
                // If Field Type is Date and Date is preset in the Batch Template, Remove time component.
                // Firefox Date Issue (Preset).
                if(SoftCreditFields[i].fieldType == 'DATE' && !isEmptyOrNullOrUndefined(SoftCreditFields[i].fieldValue) && SoftCreditFields[i].fieldValue.length > 9) {
                    SoftCreditFields[i].fieldValue = SoftCreditFields[i].fieldValue.trim().substring(0, 10);
                }
                if(SoftCreditFields[i].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(SoftCreditFields[i].fieldValue)){  
                    SoftCreditFields[i].fieldValue = SoftCreditFields[i].fieldValue.split(';');
                }
                if(SoftCreditFields[i].fieldType == 'CURRENCY'){ 
                 currencyfieldlist += 'SoftCred_'+SoftCreditFields[i].fieldName + ',';
                }
                
                
                if(SoftCreditFields[i].isHidden == false) {
    
                    //columns   //user story : Fields in Allocation section shifts to the right as more allocations are added per item
                    SoftCreditFormFields.push({xtype: getXType(SoftCreditFields[i].fieldType), id: 'causeview__Solicitor__c-' + SoftCreditFields[i].fieldName, text: SoftCreditFields[i].fieldLable,tdCls: SoftCreditFields[i].fieldType == 'BOOLEAN' ? 'grid-td-boolean' : '', dataIndex: 'SoftCred_' + SoftCreditFields[i].fieldName, width: (width-150)/softCreditFieldsToDisplayLength, renderer: getRenderer(SoftCreditFields[i].fieldType), editor: getEditor(SoftCreditFields[i], false, 'SoftCred_')});
                    //SoftCreditFields[i].fieldName == 'causeview__Custom_Amount__c' ? 'Amount' : 0.00 ;
                   
                   
                    //fields
                    softCreditFields.push({name: 'SoftCred_' + SoftCreditFields[i].fieldName, type: SoftCreditFields[i].fieldType});
    
                    AllBatchItems.Records[0].SoftCredits[0]['SoftCred_' + SoftCreditFields[i].fieldName] = SoftCreditFields[i].fieldValue;
                }
                else if(SoftCreditFields[i].isHidden == true){    //madh hidden
                    AllBatchItems.Records[0].SoftCredits[0]['SoftCred_' + SoftCreditFields[i].fieldName] = SoftCreditFields[i].fieldValue;
                    softCreditFields.push({name: 'SoftCred_' + SoftCreditFields[i].fieldName, type: SoftCreditFields[i].fieldType});
                }
            }
    
    // Add row on Tab
    
            columns.push({
                    xtype: 'gridcolumn',
                    width: 0,
                    sortable: false,
                    menuDisabled: true,
                    editor: {xtype: 'textfield'},
                });
    
            GiftDetailFormFields.push({
                    xtype: 'actioncolumn',
                    width: 2,
                    sortable: false,
                    menuDisabled: true,
                });
    
            SoftCreditFormFields.push({
                    xtype: 'actioncolumn',
                    width: 2,
                    sortable: false,
                    menuDisabled: true,
                });
    
    
            //------------ Installment ----------------
            fields.push({name: 'Inst_' + 'causeview__Installment_Balance__c', type: 'NUMBER'});
    
    
    /* ************************************************************************    Fetch Gift Batch Fields    ************************************************************************ */
    
            var GiftBatchFieldLabelMap = {};
    
            var GiftBatchSummaryFields = [];
            var numberXtype = '';
            var textXtype = '';
    
            var GBFields = sforce.connection.describeSObject("causeview__Gift_Batch__c").fields;    //.getFields();
            for(var i = 0; i < GBFields.length; i++) {
                GiftBatchFieldLabelMap[GBFields[i].name] = GBFields[i].label;
            }
            if(giftBatchStatus == 'Closed'){                                        // madhu commit
                numberXtype = 'displayfield';
                textXtype = 'displayfield';
            }
            else{
                numberXtype = 'customnumberfield';
                textXtype = 'textfield';
            }
            //user story : Edit and Cancel feature for Gift Batch Summary Section
            GiftBatchSummaryFields.push({ xtype: 'displayfield', fieldLabel: GiftBatchFieldLabelMap.Name , name: 'Name', inputAttrTpl: ' data-qtip="Read Only" ', id: 'Name'});    //, emptyText: 'user id', readOnly: true
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowBlank:false, fieldLabel: GiftBatchFieldLabelMap.causeview__Open_Date__c , name: 'causeview__Open_Date__c', id: 'causeview__Open_Date__c' });
            GiftBatchSummaryFields.push({ xtype:  textXtype, hidden: true, allowBlank:false, fieldLabel: GiftBatchFieldLabelMap.causeview__Name__c , name: 'causeview__Name__c', id: 'causeview__Name__c'});
            GiftBatchSummaryFields.push({ xtype: 'displayfield', fieldLabel: GiftBatchFieldLabelMap.causeview__Close_Date__c , name: 'causeview__Close_Date__c', id: 'causeview__Close_Date__c' });
            GiftBatchSummaryFields.push({ xtype:  'displayfield', fieldLabel: GiftBatchFieldLabelMap.causeview__Name__c , name: 'causeview__Name__c_dField', id: 'causeview__Name__c_dField'});
            GiftBatchSummaryFields.push({ xtype: 'displayfield', fieldLabel: GiftBatchFieldLabelMap.causeview__Template_Name__c , name: 'causeview__Template_Name__c', inputAttrTpl: ' data-qtip="Read Only" ', id: 'causeview__Template_Name__c' });
            GiftBatchSummaryFields.push({ xtype:  textXtype, hidden: true, fieldLabel: GiftBatchFieldLabelMap.causeview__Description__c , name: 'causeview__Description__c', id: 'causeview__Description__c'});
            GiftBatchSummaryFields.push({ xtype:  'displayfield' , fieldLabel: GiftBatchFieldLabelMap.causeview__Description__c , name: 'causeview__Description__c_dField', id: 'causeview__Description__c_dField'});        
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: '# of Cash Payments', name: 'causeview__Cash_Gifts__c', id: 'causeview__Cash_Gifts__c'});    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cash_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency' ,hidden: true, allowDecimals: true, decimalPrecision: 2,minValue: 0.00, fieldLabel: 'Total Cash $' ,name: 'causeview__Cash__c', id: 'causeview__Cash__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cash__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: '# of Cash Payments', name: 'causeview__Cash_Gifts__c_dField', allowDecimals: false, id: 'causeview__Cash_Gifts__c_dField'});    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cash_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: 'Total Cash $ ', name: 'causeview__Cash__c_dField', id: 'causeview__Cash__c_dField'});    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cash__c
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: '# of Check Payments', name: 'causeview__Cheque_Gifts__c', id: 'causeview__Cheque_Gifts__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency' ,hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00 ,fieldLabel: 'Total Check ', name: 'causeview__Cheque__c', id: 'causeview__Cheque__c' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: '# of Check Payments', name: 'causeview__Cheque_Gifts__c_dField', id: 'causeview__Cheque_Gifts__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00,fieldLabel: 'Total Check $ ', name: 'causeview__Cheque__c_dField', id: 'causeview__Cheque__c_dField' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: '# of Credit Card Payments' , name: 'causeview__Credit_Card_Gifts__c', id: 'causeview__Credit_Card_Gifts__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Credit_Card_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency',hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: 'Total Credit Card ' , name: 'causeview__Credit_Card__c', id: 'causeview__Credit_Card__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Credit_Card__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: '# of Credit Card Payments' , name: 'causeview__Credit_Card_Gifts__c_dField', id: 'causeview__Credit_Card_Gifts__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Credit_Card_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: 'Total Credit Card $' , name: 'causeview__Credit_Card__c_dField', id: 'causeview__Credit_Card__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Credit_Card__c
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_In_Kind_Payments__c, name: 'causeview__of_In_Kind_Payments__c', id: 'causeview__of_In_Kind_Payments__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency',hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_In_Kind__c, name: 'causeview__Total_In_Kind__c', id: 'causeview__Total_In_Kind__c' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_In_Kind_Payments__c, name: 'causeview__of_In_Kind_Payments__c_dField', id: 'causeview__of_In_Kind_Payments__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_In_Kind__c, name: 'causeview__Total_In_Kind__c_dField', id: 'causeview__Total_In_Kind__c_dField' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_Stock_Payments__c, name: 'causeview__of_Stock_Payments__c', id: 'causeview__of_Stock_Payments__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency', hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_Stock__c, name: 'causeview__Total_Stock__c', id: 'causeview__Total_Stock__c' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_Stock_Payments__c, name: 'causeview__of_Stock_Payments__c_dField', id: 'causeview__of_Stock_Payments__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_Stock__c, name: 'causeview__Total_Stock__c_dField', id: 'causeview__Total_Stock__c_dField' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_ACH_PAD_payments__c, name: 'causeview__of_ACH_PAD_payments__c', id: 'causeview__of_ACH_PAD_payments__c' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: numberXtype , vtype: 'Currency' ,hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_ACH_PAD__c, name: 'causeview__Total_ACH_PAD__c', id: 'causeview__Total_ACH_PAD__c' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__of_ACH_PAD_payments__c, name: 'causeview__of_ACH_PAD_payments__c_dField', id: 'causeview__of_ACH_PAD_payments__c_dField' });    //fieldLabel: GiftBatchFieldLabelMap.causeview__Cheque_Gifts__c
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_ACH_PAD__c, name: 'causeview__Total_ACH_PAD__c_dField', id: 'causeview__Total_ACH_PAD__c_dField' });    //GiftBatchFieldLabelMap.causeview__Cheque__c
    
            //GiftBatchSummaryFields.push({ xtype: dummyXtype, minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__Direct_Deposit_Gifts__c , name: 'causeview__Direct_Deposit_Gifts__c' });
            //GiftBatchSummaryFields.push({ xtype: 'numberfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Direct_Deposit__c , name: 'causeview__Direct_Deposit__c' });
    
            GiftBatchSummaryFields.push({ xtype: numberXtype, hidden: true, minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__Other_Gifts__c , name: 'causeview__Other_Gifts__c', id: 'causeview__Other_Gifts__c' });
            GiftBatchSummaryFields.push({ xtype: numberXtype, vtype: 'Currency', hidden: true, allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Other__c , name: 'causeview__Other__c', id: 'causeview__Other__c' });
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__Other_Gifts__c , name: 'causeview__Other_Gifts__c_dField', id: 'causeview__Other_Gifts__c_dField' });
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Other__c , name: 'causeview__Other__c_dField', id: 'causeview__Other__c_dField' });
    
            GiftBatchSummaryFields.push({ xtype: 'displayfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_Gift__c , name: 'causeview__Total_Gift__c', inputAttrTpl: ' data-qtip="Read Only" ',  id: 'causeview__Total_Gift__c'});
            GiftBatchSummaryFields.push({ xtype: 'displayfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Total_Gift_Amount__c , name: 'causeview__Total_Gift_Amount__c', inputAttrTpl: ' data-qtip="Read Only" ', id: 'causeview__Total_Gift_Amount__c' });
    
            //GiftBatchSummaryFields.push({ xtype: 'numberfield', minValue: 0, fieldLabel: GiftBatchFieldLabelMap.causeview__Shareplan_Gifts__c , name: 'causeview__Shareplan_Gifts__c' });
            //GiftBatchSummaryFields.push({ xtype: 'numberfield', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, fieldLabel: GiftBatchFieldLabelMap.causeview__Shareplan__c , name: 'causeview__Shareplan__c' });
    
            var GBFieldsToQuery = 'Name,causeview__Template_Name__c,causeview__Template_Name__r.Name,causeview__Batch_Status__c,causeview__Cash_Gifts__c,causeview__Cash__c,causeview__Cheque_Gifts__c,causeview__Cheque__c,causeview__Close_Date__c,causeview__Credit_Card_Gifts__c,causeview__Credit_Card__c,causeview__Description__c,causeview__Direct_Deposit_Gifts__c,causeview__Direct_Deposit__c,causeview__Name__c,causeview__Open_Date__c,causeview__Other_Gifts__c,causeview__Other__c,causeview__Shareplan_Gifts__c,causeview__Shareplan__c,causeview__Total_Gift_Amount__c,causeview__Total_Gift__c,causeview__of_ACH_PAD_payments__c,causeview__of_In_Kind_Payments__c,causeview__of_Stock_Payments__c,causeview__Total_ACH_PAD__c,causeview__Total_In_Kind__c,causeview__Total_Stock__c';
            var giftBatchFields = [];
            var GBFieldsList = GBFieldsToQuery.split(',');
            //user story : Edit and Cancel feature for Gift Batch Summary Section
            var GBFieldsList_dField = ['causeview__Name__c_dField', 'causeview__Description__c_dField', 'causeview__Cash_Gifts__c_dField', 'causeview__Cash__c_dField', 'causeview__Cheque_Gifts__c_dField', 'causeview__Cheque__c_dField',
                                        'causeview__Credit_Card_Gifts__c_dField', 'causeview__Credit_Card__c_dField', 'causeview__of_In_Kind_Payments__c_dField', 'causeview__Total_In_Kind__c_dField', 'causeview__of_Stock_Payments__c_dField',
                                        'causeview__Total_Stock__c_dField', 'causeview__of_ACH_PAD_payments__c_dField', 'causeview__Total_ACH_PAD__c_dField', 'causeview__Other_Gifts__c_dField', 'causeview__Other__c_dField'];
            for(var i=0; i<GBFieldsList.length; i++) {
                giftBatchFields.push({name: GBFieldsList[i]});
            }
            //user story : Edit and Cancel feature for Gift Batch Summary Section
            for(i=0; i < GBFieldsList_dField.length; i++){
                giftBatchFields.push({name: GBFieldsList_dField[i]});
            }
    
            var giftBatchResult;
            var queryGB = function() {
                giftBatchResult = sforce.connection.query('Select id,' + GBFieldsToQuery + ' From causeview__Gift_Batch__c Where Id = \'' + giftBatchId + '\'');
                
                //user story : Edit and Cancel feature for Gift Batch Summary Section
                giftBatchResult.records.causeview__Cash_Gifts__c = parseInt(giftBatchResult.records.causeview__Cash_Gifts__c);
                giftBatchResult.records.causeview__Cheque_Gifts__c = parseInt(giftBatchResult.records.causeview__Cheque_Gifts__c);
                giftBatchResult.records.causeview__Credit_Card_Gifts__c = parseInt(giftBatchResult.records.causeview__Credit_Card_Gifts__c);
                giftBatchResult.records.causeview__of_In_Kind_Payments__c = parseInt(giftBatchResult.records.causeview__of_In_Kind_Payments__c);
                giftBatchResult.records.causeview__of_Stock_Payments__c = parseInt(giftBatchResult.records.causeview__of_Stock_Payments__c);
                giftBatchResult.records.causeview__of_ACH_PAD_payments__c = parseInt(giftBatchResult.records.causeview__of_ACH_PAD_payments__c);
                giftBatchResult.records.causeview__Other_Gifts__c = parseInt(giftBatchResult.records.causeview__Other_Gifts__c);
                
                giftBatchResult.records.causeview__Total_Gift__c = parseFloat(giftBatchResult.records.causeview__Total_Gift__c);
                giftBatchResult.records.causeview__Cash__c = parseFloat(giftBatchResult.records.causeview__Cash__c);     
                giftBatchResult.records.causeview__Cheque__c = parseFloat(giftBatchResult.records.causeview__Cheque__c); 
                giftBatchResult.records.causeview__Credit_Card__c = parseFloat(giftBatchResult.records.causeview__Credit_Card__c); 
                giftBatchResult.records.causeview__Total_In_Kind__c = parseFloat(giftBatchResult.records.causeview__Total_In_Kind__c); 
                giftBatchResult.records.causeview__Total_Stock__c = parseFloat(giftBatchResult.records.causeview__Total_Stock__c); 
                giftBatchResult.records.causeview__Total_ACH_PAD__c = parseFloat(giftBatchResult.records.causeview__Total_ACH_PAD__c); 
                giftBatchResult.records.causeview__Other__c = parseFloat(giftBatchResult.records.causeview__Other__c);  
                 
                giftBatchResult.records.causeview__Total_Gift_Amount__c = Ext.util.Format.number(giftBatchResult.records.causeview__Total_Gift_Amount__c, '0,000.00/i');
    
            };
            queryGB();
            
            if(giftBatchResult.done != 'true' || giftBatchResult.records === undefined) {
                j$("#summarySpace").prepend('<div class="gift-batch-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Gift Batch Record. </b></div>');
            } else {
                giftBatchResult.records.causeview__Template_Name__c = giftBatchResult.records.causeview__Template_Name__r.Name;
            }
    
    
    /* ************************************************************************    Fetch Existing Batch Items    ************************************************************************ */
    
            var reconRecord = {};
            reconRecord.totalCount = 0;
            reconRecord.sharePlanCount = 0;
            reconRecord.ShareplanTotal = 0;
            reconRecord.cashTotal = 0;
            reconRecord.creditCardTotal = 0;
            reconRecord.ccApprovedCount = 0;
            reconRecord.ccDeclinedCount = 0;
            
            reconRecord.OnlinePaymentCount = 0;
            reconRecord.OfflinePaymentCount = 0;
            
            reconRecord.chequeTotal = 0;
            reconRecord.OtherTotal = 0;
            reconRecord.grandTotal = 0;
            reconRecord.ccPendingCount = 0;
            reconRecord.creditCardTotalPending = 0;
            reconRecord.cashCount = 0;
            reconRecord.checkCount = 0;
            reconRecord.ccCount = 0;
            reconRecord.otherCount = 0;
            reconRecord.inKindCount = 0;
            reconRecord.inKindTotal = 0;
            reconRecord.ACHPADCount = 0;
            reconRecord.stockCount = 0;
            reconRecord.stockTotal = 0;
            reconRecord.ACHPADTotal = 0;
    
            var tranResult;
            var recGiftResult;
    
            var giftRecGiftMap = {};
            
            var donorInstBalMap = {};
    
            var getTranResult = function() {        
                var allContacts = [];
                var allAccounts = [];
                try {
                    if(paymentQueryFields.indexOf('causeview__Status__c') == -1) {
                        paymentQueryFields += ', causeview__Status__c';
                    }
                    tranResult = sforce.connection.query('Select id ' + transnQueryFields +
                                                                ', (Select Id ' + paymentQueryFields + ' From causeview__Recurring_Payments__r  )' +
                                                                ', (Select Id ' + allocQueryFields + ' From causeview__Gift_Allocations__r)' +
                                                                ', (Select Id ' + receiptQueryFields + ' From causeview__Receipts__r)' +
                                                                ', (Select Id, causeview__Custom_Amount__c, causeview__Solicitor__c, causeview__Solicitor__r.Id, causeview__Solicitor__r.Name, ' +
                                                                'causeview__Organization_Solicitor__c, causeview__Organization_Solicitor__r.Id, causeview__Organization_Solicitor__r.Name, ' +
                                                                'causeview__Role__c From causeview__Soft_Credits__r)' +
                                                                ' From causeview__Gift__c Where causeview__GiftBatch__c = \'' + giftBatchId + '\'');
                } catch(err) {
                    j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.faultstring +' </b></div>');
                }
    
                if(tranResult.done == 'true' && tranResult.records !== undefined) {
                    var res = [];
                    if(parseInt(tranResult.size) == 1) {
                        res.push(tranResult.records);
                    } else if(parseInt(tranResult.size) > 1) {
                        res = tranResult.records;
                    }
                    for(var i=0; i<res.length; i++) {
                        if(!isEmptyOrNullOrUndefined(res[i]['causeview__Recurring_Donation__c'])) {
                            giftRecGiftMap[res[i]['causeview__Recurring_Donation__c']] = '';
                        }
                        if(!isEmptyOrNullOrUndefined(res[i]['causeview__Constituent__r']) && !isEmptyOrNullOrUndefined(res[i].causeview__Constituent__r.Id) && allContacts.indexOf(res[i].causeview__Constituent__r.Id) == -1) {
                            allContacts.push(res[i].causeview__Constituent__r.Id);
                        }
                        if(!isEmptyOrNullOrUndefined(res[i]['causeview__Organization__r']) && !isEmptyOrNullOrUndefined(res[i].causeview__Organization__r.Id) && allAccounts.indexOf(res[i].causeview__Organization__r.Id) == -1) {
                            allAccounts.push(res[i].causeview__Organization__r.Id);
                        }
                    }
                }
        
                if(Object.keys(giftRecGiftMap).length > 0) {
                    var x = Object.keys(giftRecGiftMap).join('\',\'');
                    recGiftResult = sforce.connection.query('Select id, ' +
                                                                '(Select Id,Name, causeview__Amount__c, causeview__New_Campaign__c,causeview__New_Campaign__r.Name,' +
                                                                    'causeview__New_Campaign__r.Id, causeview__Campaign__c,causeview__Campaign__r.Name,causeview__Campaign__r.Id, ' +
                                                                    'causeview__Custom_Allocation_Text__c, causeview__Fund__c,causeview__Fund__r.Name,causeview__Fund__r.Id, ' +
                                                                    'causeview__Package__c,causeview__Package__r.Name,causeview__Package__r.Id, causeview__Parent_Appeal__c,' +
                                                                    'causeview__Parent_Appeal__r.Name,causeview__Parent_Appeal__r.Id ' +
                                                                    'From causeview__Recurring_Gift_Allocations__r)' +
                                                                ' From causeview__Recurring_Donation__c Where id IN (\'' + Object.keys(giftRecGiftMap).join('\',\'') + '\')');
    
    
                    if(recGiftResult !== undefined && recGiftResult.done == 'true' && recGiftResult.records !== undefined) {
                        var res = [];
                        if(parseInt(recGiftResult.size) == 1) {
                            res.push(recGiftResult.records);
                        } else if(parseInt(recGiftResult.size) > 1) {
                            res = recGiftResult.records;
                        }
                        for(var i=0; i<res.length; i++) {
                            if(!isEmptyOrNullOrUndefined(res[i]['Id'] && res[i].causeview__Recurring_Gift_Allocations__r != null && res[i].causeview__Recurring_Gift_Allocations__r !== undefined)) {
                                giftRecGiftMap[res[i]['Id']] = res[i].causeview__Recurring_Gift_Allocations__r;
                            }
                        }
                    }
                }
    
                //--------------    Fetch all Installments belonging to the donor records Group By donor with Max Installment Balance --------------------.
                var instResultI;
                var instResultO;
                try {
                    instResultI = sforce.connection.query('SELECT  causeview__Pledge__r.causeview__Constituent__c, ' +
                                                            'Max(causeview__Installment_Balance__c) InstBal FROM causeview__Installment__c WHERE ' +
                                                            'causeview__Pledge__r.causeview__Constituent__c IN (\'' + allContacts.join('\',\'') + '\') Group By ' +
                                                            'causeview__Pledge__r.causeview__Constituent__c');
                    instResultO = sforce.connection.query('SELECT  causeview__Pledge__r.causeview__Organization__c, ' +
                                                            'Max(causeview__Installment_Balance__c) InstBal FROM causeview__Installment__c WHERE ' +
                                                            'causeview__Pledge__r.causeview__Organization__c IN (\'' + allAccounts.join('\',\'') + '\') Group By ' +
                                                            'causeview__Pledge__r.causeview__Organization__c');
                } catch(err) {
                    j$("#gridSpace").prepend('<div class="inst-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.faultstring +' </b></div>');
                }
                if(!isEmptyOrNullOrUndefined(instResultI) && instResultI.done == 'true' && instResultI.records !== undefined) {
                    var iRes = [];
                    if(parseInt(instResultI.size) == 1) {
                        iRes.push(instResultI.records);
                    } else if(parseInt(instResultI.size) > 1) {
                        iRes = instResultI.records;
                    }
                    if(!isEmptyOrNullOrUndefined(instResultO) && instResultO.done == 'true' && instResultO.records !== undefined) {
                        if(parseInt(instResultO.size) == 1) {
                            iRes.push(instResultO.records);
                        } else if(parseInt(instResultO.size) > 1) {
                            iRes = iRes.concat(instResultO.records);
                        }
                    }
                    for(var i=0; i<iRes.length; i++) {
                        if(!isEmptyOrNullOrUndefined(iRes[i].causeview__Constituent__c)) {    // && parseFloat(donorInstBalMap[iRes[i].causeview__Constituent__c]) < parseFloat(iRes[i].InstBal)
                            donorInstBalMap[iRes[i].causeview__Constituent__c] = parseFloat(iRes[i].InstBal);
                        }
                        if(!isEmptyOrNullOrUndefined(iRes[i].causeview__Organization__c)) {    // && parseFloat(donorInstBalMap[iRes[i].causeview__Organization__c]) < parseFloat(iRes[i].InstBal)
                            donorInstBalMap[iRes[i].causeview__Organization__c] = parseFloat(iRes[i].InstBal);
                        }
                    }
                }
            }
            //***********************************Start CSV**********************************************************************
            //Following code is to support for record upload through csv file. 
            //File is read as string and prepared maps of objects and its fields names.
            //Using these maps one gift record data is prepared for one row from file.
            //syncha panel is created for each gift record and it contains one gift record in its store.
            //populateReconFields() is called, which will populate all the fields.
            //Date field format in file should be mm/dd/yyyy.
            var fileContent;            
            var rejectedRecordString = '' ;
            var rejectedRecordStringLenght = 0 ;
            var rejectedFileRowsNo = [];
            var fieldNameErrorString = '';

            //for csv file
            function readFileContentsIntoString(){
                var fileInput = document.getElementById('fileInput');
                var fileDisplayArea = document.getElementById('fileDisplayArea');              
                var file = fileInput.files[0];                
                var FileExtension = file.name.split('.')[file.name.split('.').length - 1].toLowerCase();                
                var reader = new FileReader();
                fileContent = 'FNS';
                if (file.type =='text/csv' || FileExtension == 'csv') {
                    j$("#fileSpace").find('.gift-limit-error-msg1').remove();                                     
                    reader.onload = function(e) {                   
                       fileContent= reader.result;                                     
                 }                               
                 reader.readAsText(file);
                }else if(file.type == "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" || file.type == "application/vnd.ms-excel"){ 
                        j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                        reader.onload = function(e) {
                            var data = e.target.result;                            
                            var workbook = XLSX.read(data, {type: 'binary'});        

                            workbook.SheetNames.forEach(function(sheetName){
                                // Here is your object            
                                var sCSV = XLSX.utils.make_csv(workbook.Sheets[sheetName]);
                                j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                                fileContent = sCSV;
                            });                             
                        };    
                        reader.readAsBinaryString(file); 
                    } else {
                        j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                        j$("#fileSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>File not supported.....! Only CSV, XLS and XLSX file formats are allowed...!</b></div>');                                                                       
                    }                    
            }

            function lookUpObjectName(obj, fieldName){
                var DescribeResult = sforce.connection.describeSObjects([obj]);
                var allFields = DescribeResult[0].getArray("fields");
                for(m=0;m<allFields.length;m++){
                    if(allFields[m].name == fieldName){
                        return allFields[m].referenceTo;
                    }
                }
                return null;
            }
            
            function fieldExistInTemplte(templateFields, fieldLable, fieldName, objName){
                for(t=0; t<templateFields.length;t++){
                    if(fieldName.trim() == templateFields[t].fieldName){
                        return;
                    }
                }
                fieldNameErrorString+=fieldName+' of '+objName+'<br />';                
                return;
            }

            var csvMask = new Ext.LoadMask(Ext.getBody(), {msg:"Preparing Data...",
                                    onBeforeLoad: function(){
                                        if (!this.disabled) {
                                            this.el.mask(Ext.LoadingSpinner + '<div class="x-loading-msg">' + this.msg + '</div>', this.msgCls, false);
                                            this.fireEvent('show', this, this.el, this.store);
                                        }
                                }});

            function parsingData(){
                var headerMap = [];
                var contact = [];       
                var Account = [];
                var RGift = [];
                var Transaction = [];
                var Payment = [];
                var receipt = [];
                var Allocation = [];                                  
                var conFieldTypeMap = {};
                var accFieldTypeMap = {};                
                var RecGiftFieldTypeMap = {};
                var TransFieldTypeMap = {};
                var PayFieldTypeMap = {};
                var ReceiptFieldTypeMap = {};
                var GiftDetailFieldTypeMap = {};
                var SoftCreditFieldTypeMap = {};
                var lookUpFields = [];
                var lookUpFieldsObjectName = [];                
                var index =0;
                
                if(fileContent == 'FNS'){
                    j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                    j$("#fileSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>File not supported.....! Only CSV, XLS and XLSX file formats are allowed...!</b></div>');                                                                       
                    return;
                }
                else if(fileContent == null || fileContent == ''){
                    j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                    j$("#fileSpace").prepend('<div class="gift-limit-error-msg1" style="color: red; padding-left:13em;"><b>Select a file...!</b></div>');
                    return;                
                }
                csvMask.show();//Display loading image
                
                var totalRows = fileContent.split('\n');
                var names= fileContent.split('\n')[0].split(',');
                var lable=fileContent.split('\n')[1].split(',');
                
                //Display the measage if no records. Real records starts from line 3 (ie index 2)
                if((totalRows.length-1) <= 2){//Blank line exists due to split().
                    j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                    j$("#fileSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>File has no records...!</b></div>');
                    return;
                }
                
                //Preparing map headerMap containig field label and field name as key pair value to use below.
                //If any field name is changed then results in error.
                for(i=0;i<lable.length;i++){           
                    if(lable[i].indexOf("Con_")!=-1){            
                        contact[lable[i].split('Con_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(contactFields, lable[i].split('Con_')[1].split('*')[0], names[i], 'Contact');
                    }
                    if(lable[i].indexOf("Acc_")!=-1){            
                        Account[lable[i].split('Acc_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(accountFields, lable[i].split('Acc_')[1].split('*')[0], names[i], 'Account');                        
                    } 
                    if(lable[i].indexOf("RGift_")!=-1){            
                        RGift[lable[i].split('RGift_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(RecurringGiftFields, lable[i].split('RGift_')[1].split('*')[0], names[i], 'Recurring Gift');                        
                    } 
                    if(lable[i].indexOf("Tran_")!=-1){            
                        Transaction[lable[i].split('Tran_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(TransactionFields, lable[i].split('Tran_')[1].split('*')[0], names[i], 'Transaction');                        
                    } 
                    if(lable[i].indexOf("Pay_")!=-1){            
                        Payment[lable[i].split('Pay_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(PaymentFields, lable[i].split('Pay_')[1].split('*')[0], names[i], 'Payment');                        
                    } 
                    if(lable[i].indexOf("Recei_")!=-1){            
                        receipt[lable[i].split('Recei_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(ReceiptFields, lable[i].split('Recei_')[1].split('*')[0], names[i], 'Receipt');                        
                    } 
                    if(lable[i].indexOf("Alloc_")!=-1){            
                        Allocation[lable[i].split('Alloc_')[1].trim()]=names[i].trim();
                        fieldExistInTemplte(GiftDetailFields, lable[i].split('Alloc_')[1].split('*')[0], names[i], 'Allocation');                        
                    }                       
                }
                
                if(fieldNameErrorString != '' && fieldNameErrorString != null){
                    j$("#fileSpace").find('.gift-limit-error-msg1').remove();
                    j$("#fileSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Following fields in file are modified or are not present in \''+giftBatchResult.records.causeview__Template_Name__c+'\' template..!<br />'+fieldNameErrorString+'</b></div>');
                    return;
                }
                
                headerMap["Con_"]=  contact;
                headerMap["Acc_"]=  Account; 
                headerMap["RGift_"]=  RGift; 
                headerMap["Tran_"]=  Transaction; 
                headerMap["Pay_"]=  Payment; 
                headerMap["Recei_"]=  receipt; 
                headerMap["Alloc_"]=  Allocation;
                
                for(i=0;i<contactFields.length;i++){
                    conFieldTypeMap[contactFields[i]["fieldName"]] = contactFields[i]["fieldType"];
                    if(contactFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in contactFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('Contact', contactFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                for(i=0;i< accountFields.length;i++){
                    accFieldTypeMap[accountFields[i]["fieldName"]] = accountFields[i]["fieldType"];
                    if(accountFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in accountFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('Account', accountFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                for(i=0;i< RecurringGiftFields.length;i++){
                    RecGiftFieldTypeMap[RecurringGiftFields[i]["fieldName"]] = RecurringGiftFields[i]["fieldType"];
                    if(RecurringGiftFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in RecurringGiftFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('causeview__Recurring_Donation__c', RecurringGiftFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                for(i=0;i< TransactionFields.length;i++){
                    TransFieldTypeMap[TransactionFields[i]["fieldName"]] = TransactionFields[i]["fieldType"];
                    if(TransactionFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in TransactionFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('causeview__Gift__c', TransactionFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                for(i=0;i< PaymentFields.length;i++){
                    PayFieldTypeMap[PaymentFields[i]["fieldName"]] = PaymentFields[i]["fieldType"];
                    if(PaymentFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in PaymentFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('causeview__Payment__c', PaymentFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                for(i=0;i< ReceiptFields.length;i++){
                    ReceiptFieldTypeMap[ReceiptFields[i]["fieldName"]] = ReceiptFields[i]["fieldType"];
                    if(ReceiptFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in ReceiptFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;
                                lookUpFieldsObjectName[key] = lookUpObjectName('causeview__Receipt__c', ReceiptFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }                
                for(i=0;i< GiftDetailFields.length;i++){
                    GiftDetailFieldTypeMap[GiftDetailFields[i]["fieldName"]] = GiftDetailFields[i]["fieldType"];
                    if(GiftDetailFields[i]["fieldType"] == "REFERENCE"){                        
                        for(var key in GiftDetailFields[i].sObjectType){
                            if(key != 'attributes'){
                                lookUpFields[index] = key;                                
                                lookUpFieldsObjectName[key] = lookUpObjectName('causeview__Gift_Detail__c', GiftDetailFields[i]["fieldName"]);
                                index = index+1;
                            }
                        }
                    }
                }
                
                var lookUpFieldsIndex = [];
                var lookUpFieldsValues = [];
                var contactNames = [];
                var accountNames = [];
                var firstNameIndex;
                var lastNameIndex;
                var accountNameIndex;
                var expiryDateIndex;
                
                var apiNamesHeader= fileContent.split('\n')[0].split(',');//To get the index of look up fields
                for(j=0; j<apiNamesHeader.length; j++){
                    for(k=0;k<lookUpFields.length;k++){
                        if(apiNamesHeader[j].trim() == lookUpFields[k].trim()){//trim():- white space problem
                            lookUpFieldsIndex[lookUpFields[k].trim()] = j;                                
                        }                        
                    }
                }
                apiNamesHeader = [];                
                apiNamesHeader= fileContent.split('\n')[1].split(',');//To get the index of first name, last name and account name fields
                for(j=0; j<apiNamesHeader.length; j++){
                    if(apiNamesHeader[j].trim() == 'Con_Last Name*' ){
                        lastNameIndex = j;
                    }else if(apiNamesHeader[j] == 'Con_First Name*'){
                        firstNameIndex = j;
                    }else if(apiNamesHeader[j] == 'Acc_Organization Name*'){
                        accountNameIndex = j;
                    }                    
                }
                expiryDateIndex = apiNamesHeader.indexOf('Expiry Date');//for expiry date issue
                
                for(i=2; i<totalRows.length-1; i++){
                    var ValuesRow= fileContent.split('\n')[i].split(',');
                    for(var key in lookUpFieldsIndex){
                        if(key !="remove" && ValuesRow[lookUpFieldsIndex[key]] != ''){
                            if(lookUpFieldsValues[key] != null){
                                lookUpFieldsValues[key].push(ValuesRow[lookUpFieldsIndex[key]].trim().replace(/\\/g, "\\\\").replace(/'/g, "\\'"));                      
                            }else{
                                lookUpFieldsValues[key] = [];
                                lookUpFieldsValues[key].push(ValuesRow[lookUpFieldsIndex[key]].trim().replace(/\\/g, "\\\\").replace(/'/g, "\\'"));
                            }
                        }
                    }
                    if(firstNameIndex != undefined && lastNameIndex != undefined){
                        if(ValuesRow[lastNameIndex] != '' && ValuesRow[lastNameIndex] != null){
                            contactNames.push(ValuesRow[firstNameIndex].trim().replace(/\\/g, "\\\\").replace(/'/g, "\\'")+' '+ValuesRow[lastNameIndex].trim().replace(/\\/g, "\\\\").replace(/'/g, "\\'"));
                        }
                    }
                    if(accountNameIndex != undefined){
                        if(ValuesRow[accountNameIndex] != '' && ValuesRow[accountNameIndex] != null){
                            accountNames.push(ValuesRow[accountNameIndex].trim().replace(/\\/g, "\\\\").replace(/'/g, "\\'"));
                        }
                    }
                }
                
                var valuesOfLookup = [];
                for(var key in lookUpFieldsValues){
                    if(key != "remove"){
                        var objName = lookUpFieldsObjectName[key].replace(/\\/g, "\\\\").replace(/'/g, "\\'");                       
                        var recordsTemp = sforce.connection.query('Select id, Name From '+objName+' Where Name in (\''+lookUpFieldsValues[key].join('\',\'')+ '\')');                        
                        var recordsArray = recordsTemp.getArray("records");
                        valuesOfLookup[key] = [];
                        for(i=0;i<recordsArray.length;i++){                         
                            valuesOfLookup[key][recordsArray[i]["Name"].trim()] = recordsArray[i];
                        }
                    }
                }
                var contactMap = [];              
                var accountMap = [];
                var duplicateContacts = [];
                var duplicateAccounts = [];
                
                var contactRecords = sforce.connection.query('Select id, Name, firstName, lastName, causeview__Constituent_ID__c From contact Where Name in (\''+contactNames.join('\',\'')+ '\')');                        
                var recordsArray1 = contactRecords.getArray("records");
                for(i=0;i<recordsArray1.length;i++){
                    if(!(recordsArray1[i].Name in contactMap)){
                        contactMap[recordsArray1[i].Name] = recordsArray1[i];
                    }else{
                        duplicateContacts[recordsArray1[i].Name] = recordsArray1[i];    
                    }    
                }
                var accountRecords = sforce.connection.query('Select id, Name, causeview__Organization_ID__c From account Where Name in (\''+accountNames.join('\',\'')+ '\')');                        
                recordsArray1 = [];
                recordsArray1 = accountRecords.getArray("records");
                for(i=0;i<recordsArray1.length;i++){
                    if(!(recordsArray1[i].Name in accountMap)){
                        accountMap[recordsArray1[i].Name] = recordsArray1[i];
                    }else{
                        duplicateAccounts[recordsArray1[i].Name] = recordsArray1[i];    
                    }                    
                }            
                
                var listOfGifts = [];
                var skipRow = false;
                rejectedRecordString = "Row_Number\tName\tError\n";//to display thelist of rejected rows in ducument file
                rejectedRecordString += "==================================================================\n";
                rejectedRecordStringLenght = rejectedRecordString.length;
                
                for(i=2; i<totalRows.length-1; i++){
                    var ValuesRow= fileContent.split('\n')[i].split(',');
                    for(k=0; k<ValuesRow.length; k++){//White space removing
                        ValuesRow[k] = ValuesRow[k].trim();
                    }
                    for(j=0; j<ValuesRow.length; j++){
                        var contactRecord =[];
                        var accountRecord =[];
                        var RGiftRecord =[];
                        var giftRecord = [];
                        var paymentRecord =[];
                        var receiptRecord =[];
                        var AllocationRecord ={};
                        skipRow = false;
                        
                        for ( key in emptyAllBatchItemRecord )
                        {
                            // creating empty row fileds having null vlues
                            giftRecord[ key ] = emptyAllBatchItemRecord[ key ] ;
                        }                        
                        
                        //copying one row values into respective object fields one by one.
                        //if field is look up then id and name has to provide
                        //date value will be in string so need to create date instance by providing the string value 
                        var base = j;                
                        var upperLImit =Object.keys(headerMap["Con_"]).length;                
                        if(Object.keys(headerMap["Con_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Con_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(conFieldTypeMap[headerMap["Con_"][key]] == 'DATE' || conFieldTypeMap[headerMap["Con_"][key]] == 'Date/Time'){
                                           giftRecord["Contact_"+headerMap["Con_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(conFieldTypeMap[headerMap["Con_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["Con_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["Contact_"+headerMap["Con_"][key]]=valuesOfLookup[headerMap["Con_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["Contact_"+headerMap["Con_"][key]+"_Id"]=valuesOfLookup[headerMap["Con_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\t Lookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Con_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["Contact_"+headerMap["Con_"][key]]=ValuesRow[j];
                                       }                                       
                                   }
                                   j=j+1;
                               }
                           }
                           if((giftRecord["Contact_FirstName"]+" "+giftRecord["Contact_LastName"] in duplicateContacts)){                               
                               rejectedRecordString +=i+1+"\t\t"+giftRecord["Contact_FirstName"]+" "+giftRecord["Contact_LastName"]+"\tMultiple contacts records\n";
                               rejectedFileRowsNo.push(i+1);
                               giftRecord = [];
                               break;
                           }
                           if((giftRecord["Contact_FirstName"]+" "+giftRecord["Contact_LastName"] in contactMap)){                               
                               giftRecord['IsOrgRelated'] = 'I';
                               giftRecord['ConstOrgId'] = contactMap[giftRecord["Contact_FirstName"]+" "+giftRecord["Contact_LastName"]].causeview__Constituent_ID__c;
                               giftRecord['Contact_id'] = contactMap[giftRecord["Contact_FirstName"]+" "+giftRecord["Contact_LastName"]].Id;                               
                           }
                        }
                        upperLImit =j+Object.keys(headerMap["Acc_"]).length;                
                        if(Object.keys(headerMap["Acc_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Acc_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(accFieldTypeMap[headerMap["Acc_"][key]] == 'DATE' || accFieldTypeMap[headerMap["Acc_"][key]] == 'Date/Time'){
                                           giftRecord["Account_"+headerMap["Acc_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(accFieldTypeMap[headerMap["Acc_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["Acc_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["Account_"+headerMap["Acc_"][key]]=valuesOfLookup[headerMap["Acc_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["Account_"+headerMap["Acc_"][key]+"_Id"]=valuesOfLookup[headerMap["Acc_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Acc_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["Account_"+headerMap["Acc_"][key]]=ValuesRow[j];
                                       }    
                                       giftRecord['IsOrgRelated'] = 'O';
                                   }
                                   j=j+1;                                   
                               }
                           }
                            if((giftRecord["Account_Name"] in duplicateAccounts)){
                                rejectedRecordString+=i+1+"\t\t"+giftRecord["Account_Name"]+"\tMultiple account records\n";                                
                                rejectedFileRowsNo.push(i+1);
                                giftRecord = [];
                               break;
                           }
                            if((giftRecord["Account_Name"] in accountMap)){
                               giftRecord['ConstOrgId'] = accountMap[giftRecord["Account_Name"]].causeview__Organization_ID__c;
                               giftRecord['Account_id'] = accountMap[giftRecord["Account_Name"]].Id;                               
                           }                            
                        }
                        upperLImit =j+Object.keys(headerMap["RGift_"]).length;                
                        if(Object.keys(headerMap["RGift_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["RGift_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(RecGiftFieldTypeMap[headerMap["RGift_"][key]] == 'DATE' || RecGiftFieldTypeMap[headerMap["RGift_"][key]] == 'Date/Time'){
                                           giftRecord["RecGift_"+headerMap["RGift_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(RecGiftFieldTypeMap[headerMap["RGift_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["RGift_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["RecGift_"+headerMap["RGift_"][key]]=valuesOfLookup[headerMap["RGift_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["RecGift_"+headerMap["RGift_"][key]+"_Id"]=valuesOfLookup[headerMap["RGift_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["RGift_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["RecGift_"+headerMap["RGift_"][key]]=ValuesRow[j];
                                       }                                       
                                   }
                                   j=j+1;
                               }
                           }
                        }
                        upperLImit =j+Object.keys(headerMap["Tran_"]).length;                
                        if(Object.keys(headerMap["Tran_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Tran_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(TransFieldTypeMap[headerMap["Tran_"][key]] == 'DATE' || TransFieldTypeMap[headerMap["Tran_"][key]] == 'Date/Time'){
                                           giftRecord["Gift_"+headerMap["Tran_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(TransFieldTypeMap[headerMap["Tran_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["Tran_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["Gift_"+headerMap["Tran_"][key]]=valuesOfLookup[headerMap["Tran_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["Gift_"+headerMap["Tran_"][key]+"_Id"]=valuesOfLookup[headerMap["Tran_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Tran_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["Gift_"+headerMap["Tran_"][key]]=ValuesRow[j];
                                       }                                       
                                   }
                                   j=j+1;
                               }
                           }
                        }
                        upperLImit =j+Object.keys(headerMap["Pay_"]).length; 
                        
                        if(Object.keys(headerMap["Pay_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Pay_"]){
                               if(key!="remove"){
                                   if(j == expiryDateIndex){
                                       giftRecord["Pay_Expiry_Date__x"] = ValuesRow[expiryDateIndex];
                                       j=j+1;
                                   }
                                   if(ValuesRow[j]){
                                       if(PayFieldTypeMap[headerMap["Pay_"][key]] == 'DATE' || PayFieldTypeMap[headerMap["Pay_"][key]] == 'Date/Time'){
                                           giftRecord["Pay_"+headerMap["Pay_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(PayFieldTypeMap[headerMap["Pay_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["Pay_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["Pay_"+headerMap["Pay_"][key]]=valuesOfLookup[headerMap["Pay_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["Pay_"+headerMap["Pay_"][key]+"_Id"]=valuesOfLookup[headerMap["Pay_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Pay_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else                                       {
                                           giftRecord["Pay_"+headerMap["Pay_"][key]]=ValuesRow[j];
                                       }
                                   }
                                   j=j+1;
                               }
                           }
                        }                        
                        upperLImit =j+Object.keys(headerMap["Recei_"]).length;
                                        
                        if(Object.keys(headerMap["Recei_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Recei_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(ReceiptFieldTypeMap[headerMap["Recei_"][key]] == 'DATE' || ReceiptFieldTypeMap[headerMap["Recei_"][key]] == 'Date/Time'){
                                           giftRecord["Receipt_"+headerMap["Recei_"][key]]=new Date(ValuesRow[j]);                                           
                                       }else if(ReceiptFieldTypeMap[headerMap["Recei_"][key]] == 'REFERENCE'){
                                           if(valuesOfLookup[headerMap["Recei_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["Receipt_"+headerMap["Recei_"][key]]=valuesOfLookup[headerMap["Recei_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["Receipt_"+headerMap["Recei_"][key]+"_Id"]=valuesOfLookup[headerMap["Recei_"][key]][ValuesRow[j]]["Id"];                                            
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Recei_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["Receipt_"+headerMap["Recei_"][key]]=ValuesRow[j];
                                       }                                               
                                   }
                                   j=j+1;
                               }
                           }
                        }                        
                        upperLImit =j+Object.keys(headerMap["Alloc_"]).length;
                                        
                        if(Object.keys(headerMap["Alloc_"]).length>0 && upperLImit>j){
                           for(var key in headerMap["Alloc_"]){
                               if(key!="remove"){
                                   if(ValuesRow[j]){
                                       if(GiftDetailFieldTypeMap[headerMap["Alloc_"][key]] == 'DATE' || GiftDetailFieldTypeMap[headerMap["Alloc_"][key]] == 'Date/Time'){
                                           giftRecord["GiftDetail_"+headerMap["Alloc_"][key]]=new Date(ValuesRow[j]);
                                           AllocationRecord["GiftDetail_"+headerMap["Alloc_"][key]]=ValuesRow[j];                                           
                                       }else if(GiftDetailFieldTypeMap[headerMap["Alloc_"][key]] == 'REFERENCE'){
                                           var dd = valuesOfLookup[headerMap["Alloc_"][key]];
                                           if(valuesOfLookup[headerMap["Alloc_"][key]][ValuesRow[j]] != undefined){                                               
                                               giftRecord["GiftDetail_"+headerMap["Alloc_"][key]]=valuesOfLookup[headerMap["Alloc_"][key]][ValuesRow[j]]["Name"];
                                               AllocationRecord["GiftDetail_"+headerMap["Alloc_"][key]]=valuesOfLookup[headerMap["Alloc_"][key]][ValuesRow[j]]["Name"];                                            
                                               giftRecord["GiftDetail_"+headerMap["Alloc_"][key]+"_Id"]=valuesOfLookup[headerMap["Alloc_"][key]][ValuesRow[j]]["Id"];
                                               AllocationRecord["GiftDetail_"+headerMap["Alloc_"][key]+"_Id"]=valuesOfLookup[headerMap["Alloc_"][key]][ValuesRow[j]]["Id"];
                                           }else{                                               
                                               rejectedRecordString+=i+1+"\t\t"+ValuesRow[j]+"\tLookup record "+ValuesRow[j]+" does not exist in "+sforce.connection.describeSObject(lookUpFieldsObjectName[headerMap["Alloc_"][key]]).label+"\n";
                                               skipRow = true;
                                           }
                                       }else{
                                           giftRecord["GiftDetail_"+headerMap["Alloc_"][key]]=ValuesRow[j];
                                           AllocationRecord["GiftDetail_"+headerMap["Alloc_"][key]]=ValuesRow[j];
                                       }   
                                   }                             
                                   j=j+1;
                                }
                           }
                        }  
                        var alloclist = [];//Gift detail has to be proveide in seperate object for syncha dispay.
                        alloclist.push(AllocationRecord);
                        giftRecord["GiftDetails"]=alloclist;
                        
                        if(giftRecord["Pay_causeview__Amount__c"] != undefined && giftRecord["Pay_causeview__Amount__c"] != null){
                            giftRecord["Gift_causeview__Expected_Amount__c"] = giftRecord["Pay_causeview__Amount__c"];//For batch reconcilition roll up
                        }
                        
                        if(skipRow){
                            giftRecord = [];
                            break;
                        }                        
                        listOfGifts.push(giftRecord);
                        break;
                    }                    
                 }         
                 return listOfGifts;
            }
            
            function DisplayRecordsFromFile(){                
                var i = 0;
                var reachedLimt = false;
                var listOfGifts;
                try {
                    listOfGifts = parsingData();
                }
                catch(err) {
                    j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                    if(err.faultstring != undefined){
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Error: ' + err.faultstring + '</b></div>');                                                                       
                    }else if(err.message != undefined){
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Error: ' + err.message + '</b></div>');                                                                                           
                    }else{
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Error: error in processing file....</b></div>');                                                                                           
                    }
                }
                
                csvMask.show();//Display loading image 
                fieldNameErrorString = '';
                if(listOfGifts != undefined){
                    for(i=0;i<listOfGifts.length;i++){
                        var panel = new Ext.create('Ext.Cv.BatchItemPanel');            
                        var rec = new SummaryFieldsModel(getNewAllBatchItem(listOfGifts[i]));                
                        rec.data = SubtractTimezoneOffsetFromDate(rec.data);                        
                        if(panel.getStore().getCount() < totalGifts) {
                            panel.getStore().insert(panel.getStore().getCount(), rec);
                        }
                        else {  
                                reachedLimt = true;
                                break;
                            }
                        populateReconFields();
                        document.getElementById('uploadFile').disabled = true; //disable upload button
                        document.getElementById('fileInput').disabled = true;
                     }
                    if(listOfGifts.length > totalGifts){                        
                        var rowNO = i;
                        for(k=0;k<rejectedFileRowsNo.length;k++){
                            if(parseInt(rejectedFileRowsNo[k]) < i){
                                rowNO = rowNO+1;
                            }else{
                                break;
                            }                               
                        }
                        for(j=i;j<listOfGifts.length;j++){                            
                            while(rejectedFileRowsNo.indexOf(rowNO+3) != -1){
                                rowNO = rowNO+1;
                            } 
                            if(listOfGifts[j]["Contact_FirstName"] != null || listOfGifts[j]["Contact_LastName"] != null){
                                rejectedRecordString +=(rowNO+3)+"\t\t"+listOfGifts[j]["Contact_FirstName"]+" "+listOfGifts[j]["Contact_LastName"]+"\tLimit reached\n";
                            }else{
                                rejectedRecordString +=(rowNO+3)+"\t\t"+listOfGifts[j]["Account_Name"]+"\tLimit reached\n";
                            }
                            rowNO = rowNO + 1 ;
                        }
                        j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Reached Total Gift Size of ' + totalGifts + '. To continue edit in Gift Batch Summary. </b></div>');                                                   
                    }
                    var totalNoOfRows = fileContent.split('\n').length-3;                        
                    var rejectedRows = listOfGifts.length - i + rejectedFileRowsNo.length;
                    populateReconFields();
                    if(reachedLimt){
                        j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" ><b style="color: red;">Reached Total Gift Size of ' + totalGifts + '. To continue edit in Gift Batch Summary. </b><br /><b style="color: green;">The total number of rows inserted from CSV file = '+i+'<br / >The total number of rows rejected from CSV file = '+rejectedRows+' </b></div>');                                                   
                    }else{
                        j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: green;"><b>The total number of rows inserted from CSV file = '+i+'<br / >The total number of rows rejected from CSV file = '+rejectedRows+' </b></div>');                                            }    
                }                
                csvMask.hide();
            }
            //*************************************CSV END*******************************************************
            
          
            getTranResult();            
            if(tranResult.done == 'true' && tranResult.records !== undefined){
                var res = [];
                if(parseInt(tranResult.size) == 1) {
                    res.push(tranResult.records);
                } else if(parseInt(tranResult.size) > 1) {
                    res = tranResult.records;
                }
                
                for(var i=0; i<res.length; i++) {
                    var obj = {};
                    obj.GiftDetails = [];
                    obj.SoftCredits = [];
                    obj['Gift_id'] = res[i]['Id'];
                    obj['Gift_Name'] = res[i]['Name'];
                    obj['Gift_causeview__Batch_Status__c'] = res[i]['causeview__Batch_Status__c'];
                    obj['Gift_causeview__Expected_Amount__c'] = res[i]['causeview__Expected_Amount__c'];
                    obj['id'] = res[i]['Id'];
                    obj['saved'] = true;
                    for(var j=0; j<TransactionFields.length; j++) {
                        if(TransactionFields[j].isHidden == false) {
                            if(TransactionFields[j].fieldType != 'REFERENCE') {
                                obj['Gift_' + TransactionFields[j].fieldName] = res[i][TransactionFields[j].fieldName];
                                if(TransactionFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(res[i][TransactionFields[j].fieldName])){  
                                    obj['Gift_' + TransactionFields[j].fieldName] = obj['Gift_' + TransactionFields[j].fieldName].split(';');
                                    
                                }
                                if(TransactionFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(res[i][TransactionFields[j].fieldName]) ) 
                                {
                                    obj['Gift_' + TransactionFields[j].fieldName] = '$'+Ext.util.Format.number(res[i][TransactionFields[j].fieldName], '0,000.00/i');
                                } 
                                
                            } else if(res[i][TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                if(TransactionFields[j].fieldName.trim() == 'causeview__Letter__c') {
                                    obj['Gift_' + TransactionFields[j].fieldName + '_Name'] = res[i][TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Name__c'];
                                }
                                obj['Gift_' + TransactionFields[j].fieldName] = res[i][TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                obj['Gift_' + TransactionFields[j].fieldName + '_Id'] = res[i][TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                            }
                        }
                    }
                    if(res[i].causeview__Constituent__r != null) {
                        //----------------------------- Installment -----------------------------
                        obj['Inst_' + 'causeview__Installment_Balance__c'] = donorInstBalMap[res[i].causeview__Constituent__r.Id];
                        
                        obj['IsOrgRelated'] = 'I';
                        obj['ConstOrgId'] = res[i].causeview__Constituent__r.causeview__Constituent_ID__c;
                        obj['Contact_id'] = res[i].causeview__Constituent__r.Id;
                        for(var j=0; j<contactFields.length; j++) {
                            if(contactFields[j].isHidden == false) {
                                if(contactFields[j].fieldType != 'REFERENCE') {
                                    obj['Contact_' + contactFields[j].fieldName] = res[i].causeview__Constituent__r[contactFields[j].fieldName];
                                    if(contactFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(res[i].causeview__Constituent__r[contactFields[j].fieldName])){  
                                        obj['Contact_' + contactFields[j].fieldName] = obj['Contact_' + contactFields[j].fieldName].split(';');
                                    }
                                    if(contactFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(obj['Contact_' + contactFields[j].fieldName]))
                                    {
                                        obj['Contact_' + contactFields[j].fieldName]='$'+Ext.util.Format.number(obj['Contact_' + contactFields[j].fieldName], '0,000.00/i');
                                    }
                                } else if(res[i].causeview__Constituent__r[contactFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    obj['Contact_' + contactFields[j].fieldName] = res[i].causeview__Constituent__r[contactFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    obj['Contact_' + contactFields[j].fieldName + '_Id'] = res[i].causeview__Constituent__r[contactFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                    }
                    if(res[i].causeview__Organization__r != null) {
                        //----------------------------- Installment -----------------------------
                        obj['Inst_' + 'causeview__Installment_Balance__c'] = donorInstBalMap[res[i].causeview__Organization__r.Id];
                        
                        obj['IsOrgRelated'] = 'O';
                        obj['ConstOrgId'] = res[i].causeview__Organization__r.causeview__Organization_ID__c;
                        obj['Account_id'] = res[i].causeview__Organization__r.Id;
                        for(var j=0; j<accountFields.length; j++) {
                            if(accountFields[j].isHidden == false) {
                                if(accountFields[j].fieldType != 'REFERENCE') {
                                    obj['Account_' + accountFields[j].fieldName] = res[i].causeview__Organization__r[accountFields[j].fieldName];
                                    if(accountFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(res[i].causeview__Organization__r[accountFields[j].fieldName])){  
                                        obj['Account_' + accountFields[j].fieldName] = obj['Account_' + accountFields[j].fieldName].split(';');
                                    }
                                    if(accountFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(obj['Account_' + accountFields[j].fieldName]))
                                    {
                                        obj['Account_' + accountFields[j].fieldName]='$'+Ext.util.Format.number(obj['Account_' + accountFields[j].fieldName], '0,000.00/i');
                                        
                                    }
                                    
                                } else if(res[i].causeview__Organization__r[accountFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    obj['Account_' + accountFields[j].fieldName] = res[i].causeview__Organization__r[accountFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    obj['Account_' + accountFields[j].fieldName + '_Id'] = res[i].causeview__Organization__r[accountFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                    }
                    if(res[i].causeview__Recurring_Donation__r != null) {
                        obj['RecGift_id'] = res[i].causeview__Recurring_Donation__c;
                        for(var j=0; j<RecurringGiftFields.length; j++) {
                            if(RecurringGiftFields[j].isHidden == false) {
                                if(RecurringGiftFields[j].fieldType != 'REFERENCE') {
                                    obj['RecGift_' + RecurringGiftFields[j].fieldName] = res[i].causeview__Recurring_Donation__r[RecurringGiftFields[j].fieldName];
                                    if(RecurringGiftFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(res[i].causeview__Recurring_Donation__r[RecurringGiftFields[j].fieldName])){  
                                        obj['RecGift_' + RecurringGiftFields[j].fieldName] = obj['RecGift_' + RecurringGiftFields[j].fieldName].split(';');
                                        
                                    }
                                    if(RecurringGiftFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(obj['RecGift_' + RecurringGiftFields[j].fieldName]) ){
                                        obj['RecGift_' + RecurringGiftFields[j].fieldName]='$'+Ext.util.Format.number(obj['RecGift_' + RecurringGiftFields[j].fieldName], '0,000.00/i');
                                        
                                    }
                                } else if(res[i].causeview__Recurring_Donation__r[RecurringGiftFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    obj['RecGift_' + RecurringGiftFields[j].fieldName] = res[i].causeview__Recurring_Donation__r[RecurringGiftFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    obj['RecGift_' + RecurringGiftFields[j].fieldName + '_Id'] = res[i].causeview__Recurring_Donation__r[RecurringGiftFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                        //-------------- Populate "Organizational Contacts" fields.
                        if(res[i].causeview__Recurring_Donation__r.causeview__Constituent__r != null) {
                            obj['RecGiftOrgContact_' + RecGiftOrgContactFields[0].fieldName] = res[i].causeview__Recurring_Donation__r.causeview__Constituent__r.causeview__Constituent_ID__c;
                            obj['RecGiftOrgContact_' + RecGiftOrgContactFields[0].fieldName + '_Id'] = res[i].causeview__Recurring_Donation__r.causeview__Constituent__c;
                            obj['RecGiftOrgContact_' + RecGiftOrgContactFields[1].fieldName] = res[i].causeview__Recurring_Donation__r.causeview__Constituent__r.FirstName;
                            obj['RecGiftOrgContact_' + RecGiftOrgContactFields[2].fieldName] = res[i].causeview__Recurring_Donation__r.causeview__Constituent__r.LastName;
                        }
                    }
                    if(res[i].causeview__Recurring_Payments__r != null && res[i].causeview__Recurring_Payments__r.done == 'true' && res[i].causeview__Recurring_Payments__r.records !== undefined) {
                        var RecurringPayment;
                        if(parseInt(res[i].causeview__Recurring_Payments__r.size) == 1) {
                            RecurringPayment = res[i].causeview__Recurring_Payments__r.records;
                        } else if(parseInt(res[i].causeview__Recurring_Payments__r.size) > 0) {
                            RecurringPayment = res[i].causeview__Recurring_Payments__r.records[0];
                        }                                                
                        obj['Pay_id'] = RecurringPayment['Id'];
                        obj['Pay_causeview__Status__c'] = RecurringPayment['causeview__Status__c'];
                        if(RecurringPayment['causeview__Status__c'] == 'Approved' || (RecurringPayment['causeview__Status__c'] == 'Pending' && RecurringPayment['causeview__Payment_Type__c'] == 'ACH/PAD')) {    ////user story : ACH payment made through gift batch has approved status. Added or condition for ACH/PAD
                            obj['approved'] = true;
                            obj['Pay_Submit_to_Gateway__x'] = false;
                        }
                        //Submit to Gateway
                        if((RecurringPayment['causeview__Payment_Type__c'] == 'Credit Card' || 
                            RecurringPayment['causeview__Payment_Type__c'] == 'ACH/PAD') && 
                           RecurringPayment['causeview__Status__c'] == 'Declined')
                        {
                            obj['Pay_Submit_to_Gateway__x'] = false;
                        }
                        
                        for(var j=0; j<PaymentFields.length; j++) {
                            if(PaymentFields[j].isHidden == false) {
                                if(PaymentFields[j].fieldType != 'REFERENCE') {
                                    obj['Pay_' + PaymentFields[j].fieldName] = RecurringPayment[PaymentFields[j].fieldName];
                                    if(PaymentFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(RecurringPayment[PaymentFields[j].fieldName])){  
                                        obj['Pay_' + PaymentFields[j].fieldName] = obj['Pay_' + PaymentFields[j].fieldName].split(';');
                                    }
                                    if(PaymentFields[j].fieldType == 'CURRENCY'&&  !isEmptyOrNullOrUndefined(obj['Pay_' + PaymentFields[j].fieldName]) ) 
                                    {
                                        obj['Pay_' + PaymentFields[j].fieldName]  = '$'+Ext.util.Format.number(obj['Pay_' + PaymentFields[j].fieldName], '0,000.00/i');
                                    } 
                                } else if(RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    obj['Pay_' + PaymentFields[j].fieldName] = RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    obj['Pay_' + PaymentFields[j].fieldName + '_Id'] = RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                    } else if(res[i].causeview__Recurring_Payments__r != null && res[i].causeview__Recurring_Payments__r.done != 'true') {
                        j$("#gridSpace").prepend('<div class="payment-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Payment Records at row no. ' + (i+1) + '. </b></div>');
                    } else {
                        j$("#gridSpace").prepend('<div class="payment-fetch-error-msg error-msg" style="color: red;"><b> No Payment Records found at row no. ' + (i+1) + '. </b></div>');
                    }
                    
                    //----------------------------- Receipts -----------------------------
                    if(res[i].causeview__Receipts__r != null && res[i].causeview__Receipts__r.done == 'true' && res[i].causeview__Receipts__r.records !== undefined &&
                       parseInt(res[i].causeview__Receipts__r.size) == 1)
                    {
                        obj['Receipt_id'] = res[i].causeview__Receipts__r.records['Id'];
                        for(var j=0; j<ReceiptFields.length; j++) {
                            if(ReceiptFields[j].isHidden == false) {
                                if(ReceiptFields[j].fieldType != 'REFERENCE') {
                                    obj['Receipt_' + ReceiptFields[j].fieldName] = res[i].causeview__Receipts__r.records[ReceiptFields[j].fieldName];
                                    if(ReceiptFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(res[i].causeview__Receipts__r.records[ReceiptFields[j].fieldName])){  
                                        obj['Receipt_' + ReceiptFields[j].fieldName] = obj['Receipt_' + ReceiptFields[j].fieldName].split(';');
                                    }
                                    if(ReceiptFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(obj['Receipt_' + ReceiptFields[j].fieldName] )) 
                                    {
                                        obj['Receipt_' + ReceiptFields[j].fieldName]   = '$'+Ext.util.Format.number(obj['Receipt_' + ReceiptFields[j].fieldName] , '0,000.00/i');
                                    } 
                                } else if(res[i].causeview__Receipts__r.records[ReceiptFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    obj['Receipt_' + ReceiptFields[j].fieldName] = res[i].causeview__Receipts__r.records[ReceiptFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    obj['Receipt_' + ReceiptFields[j].fieldName + '_Id'] = res[i].causeview__Receipts__r.records[ReceiptFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                    } else if(res[i].causeview__Receipts__r != null && res[i].causeview__Receipts__r.done != 'true') {
                        j$("#gridSpace").prepend('<div class="receipt-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Receipt Records at row no. ' + (i+1) + '. </b></div>');
                    } else {
                        //                    j$("#gridSpace").prepend('<div class="receipt-fetch-error-msg error-msg" style="color: red;"><b> No Receipt Records found at row no. ' + (res.length - i) + '. </b></div>');
                    }
                    
                    //----------------------------- Soft Credits -----------------------------
                    var SoftCredits = [];
                    if(res[i].causeview__Soft_Credits__r != null && res[i].causeview__Soft_Credits__r.done == 'true' && res[i].causeview__Soft_Credits__r.records !== undefined) {
                        if(parseInt(res[i].causeview__Soft_Credits__r.size) == 1) {
                            SoftCredits.push(res[i].causeview__Soft_Credits__r.records);
                        } else if(parseInt(res[i].causeview__Soft_Credits__r.size) > 1) {
                            SoftCredits = res[i].causeview__Soft_Credits__r.records;
                        }
                        for(var k=0; k<SoftCredits.length; k++) {
                            var softCredit = {};
                            softCredit['SoftCred_id'] = SoftCredits[k]['Id'];
                            
                            if(!isEmptyOrNullOrUndefined(SoftCredits[k]['causeview__Custom_Amount__c'])) {
                                softCredit['SoftCred_causeview__Custom_Amount__c'] = '$'+Ext.util.Format.number(SoftCredits[k]['causeview__Custom_Amount__c'], '0,000.00/i');
                            }
                            
                            softCredit['SoftCred_causeview__Role__c'] = SoftCredits[k]['causeview__Role__c'];
                            if(!isEmptyOrNullOrUndefined(SoftCredits[k]['causeview__Solicitor__r'])) {
                                softCredit['SoftCred_causeview__Solicitor__c'] = SoftCredits[k]['causeview__Solicitor__r']['Name'];
                            }
                            softCredit['SoftCred_causeview__Solicitor__c_Id'] = SoftCredits[k]['causeview__Solicitor__c'];
                            if(!isEmptyOrNullOrUndefined(SoftCredits[k]['causeview__Organization_Solicitor__r'])) {
                                softCredit['SoftCred_causeview__Organization_Solicitor__c'] = SoftCredits[k]['causeview__Organization_Solicitor__r']['Name'];
                            }
                            softCredit['SoftCred_causeview__Organization_Solicitor__c_Id'] = SoftCredits[k]['causeview__Organization_Solicitor__c'];
                            
                            obj.SoftCredits.push(softCredit);
                        }
                    } else if(res[i].causeview__Soft_Credits__r != null && res[i].causeview__Soft_Credits__r.done != 'true') {
                        j$("#gridSpace").prepend('<div class="receipt-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Soft Credit Records at row no. ' + (i+1) + '. </b></div>');
                    } else {
                        //                    j$("#gridSpace").prepend('<div class="receipt-fetch-error-msg error-msg" style="color: red;"><b> No Soft Credit Records found at row no. ' + (res.length - i) + '. </b></div>');
                    }
                    
                    //----------------------------- Allocations -----------------------------
                    var GiftDetails = [];
                    if(isEmptyOrNullOrUndefined(res[i].causeview__Recurring_Donation__c)) {
                        if(res[i].causeview__Gift_Allocations__r != null && res[i].causeview__Gift_Allocations__r.done == 'true' && res[i].causeview__Gift_Allocations__r.records !== undefined) {
                            if(parseInt(res[i].causeview__Gift_Allocations__r.size) == 1) {
                                GiftDetails.push(res[i].causeview__Gift_Allocations__r.records);
                            } else if(parseInt(res[i].causeview__Gift_Allocations__r.size) > 1) {
                                GiftDetails = res[i].causeview__Gift_Allocations__r.records;
                            }
                            
                        } else if(res[i].causeview__Gift_Allocations__r != null && res[i].causeview__Gift_Allocations__r.done != 'true') {
                            j$("#gridSpace").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Allocation Records at row no. ' + (i+1) + '. </b></div>');
                        } else {
                            j$("#gridSpace").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> No Allocation Records found at row no. ' + (i+1) + '. </b></div>');
                        }
                    } else {
                        //----------------------------- Recurring Gift Allocations -----------------------------
                        if(giftRecGiftMap[res[i].causeview__Recurring_Donation__c] !== undefined && giftRecGiftMap[res[i].causeview__Recurring_Donation__c] != null && giftRecGiftMap[res[i].causeview__Recurring_Donation__c].done == 'true' && giftRecGiftMap[res[i].causeview__Recurring_Donation__c].records !== undefined) {
                            if(parseInt(giftRecGiftMap[res[i].causeview__Recurring_Donation__c].size) == 1) {
                                GiftDetails.push(giftRecGiftMap[res[i].causeview__Recurring_Donation__c].records);
                            } else if(parseInt(giftRecGiftMap[res[i].causeview__Recurring_Donation__c].size) > 1) {
                                GiftDetails = giftRecGiftMap[res[i].causeview__Recurring_Donation__c].records;
                            }
                            
                        } else if(giftRecGiftMap[res[i].causeview__Recurring_Donation__c].done != 'true') {
                            j$("#gridSpace").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Recurring Gift Allocation Records at row no. ' + (i+1) + '. </b></div>');
                        } else {
                            j$("#gridSpace").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> No Recurring Gift Allocation Records found at row no. ' + (i+1) + '. </b></div>');
                        }
                    }
                    
                    //If no Allocations or Recurring Gift Allocations, then populate empty list.
                    if(GiftDetails.length == 0) {
                        var giftDetail = {};
                        for(var fld in AllBatchItems.Records[0].GiftDetails[0]) {
                            giftDetail[fld] = null;
                        }
                        obj.GiftDetails.push(giftDetail);
                    }
                    
                    
                    for(var k=0; k<GiftDetails.length; k++) {
                        var giftDetail = {};
                        giftDetail['GiftDetail_id'] = GiftDetails[k]['Id'];
                        for(var j=0; j<GiftDetailFields.length; j++) {
                            if(GiftDetailFields[j].isHidden == false) {
                                if(GiftDetailFields[j].fieldType != 'REFERENCE') {
                                    if(GiftDetailFields[j].isForSummary == true) {
                                        obj['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[0][GiftDetailFields[j].fieldName];
                                        if(GiftDetailFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                            obj['GiftDetail_' + GiftDetailFields[j].fieldName] = obj['GiftDetail_' + GiftDetailFields[j].fieldName].split(';');
                                        }
                                        if(GiftDetailFields[j].fieldType == 'CURRENCY'&& !isEmptyOrNullOrUndefined(obj['GiftDetail_' + GiftDetailFields[j].fieldName]) ) 
                                        {
                                            obj['GiftDetail_' + GiftDetailFields[j].fieldName]  ='$' +Ext.util.Format.number(obj['GiftDetail_' + GiftDetailFields[j].fieldName], '0,000.00/i');
                                        } 
                                    }
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName];
                                    if(GiftDetailFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                        giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName].split(';');
                                    }
                                    if(GiftDetailFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])) 
                                    {
                                        giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName]  = '$'+Ext.util.Format.number(giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName], '0,000.00/i');
                                    } 
                                } else if(GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    if(GiftDetailFields[j].fieldName.trim() == 'causeview__Fund__c') {
                                        if(GiftDetailFields[j].isForSummary == true) {
                                            obj['GiftDetail_' + GiftDetailFields[j].fieldName + '_Name'] = GiftDetails[0][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Fund_Name__c'];
                                        }
                                        giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName + '_Name'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Fund_Name__c'];
                                    }
                                    if (GiftDetailFields[j].isForSummary == true )  
                                    {
                                        if  (!isEmptyOrNullOrUndefined(GiftDetails[0][GiftDetailFields[j].fieldName] )) {
                                            obj['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[0][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                            obj['GiftDetail_' + GiftDetailFields[j].fieldName + '_Id'] = GiftDetails[0][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                        }
                                        
                                    }
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName + '_Id'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                        obj.GiftDetails.push(giftDetail);
                    }
                    
                    AllBatchItems.Records.push(obj);
                    //                AllBatchItems.Records.splice(1, 0, obj);
                    var totalGifts1 = totalGifts + 1;
                    if(AllBatchItems.Records.length > totalGifts1) {
                        j$("#gridSpace").find('.gift-limit-error-msg').remove();
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg" style="color: red;"><b>Exceeded Total Gift Size of ' + totalGifts + '</b></div>');
                    }
                    
                    //--------------------- Populate Reconciliation Fields. ---------------------
                    
                    
                    var paymentType = '';
                    try {
                        paymentType = RecurringPayment.causeview__Payment_Type__c;
                    } catch(err) {
                        //                    j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.message +' </b></div>');
                    }
                    var paymentAmount = isNaN(parseFloat(res[i].causeview__Expected_Amount__c)) ? 0 : parseFloat(res[i].causeview__Expected_Amount__c);
                    
                    if(res[i].causeview__Gift_Type__c == 'Recurring') {
                        reconRecord.sharePlanCount++;
                        reconRecord.ShareplanTotal += paymentAmount;
                    }
                    reconRecord.totalCount++;
                    
                    if(paymentType == 'Cash') {
                        reconRecord.cashTotal += paymentAmount;
                        reconRecord.cashCount++;
                        reconRecord.OfflinePaymentCount++;
                        
                    } else {
                        if (paymentType == 'Credit Card') {
                            reconRecord.creditCardTotal += paymentAmount;
                            reconRecord.ccCount++;
                            reconRecord.OnlinePaymentCount++;
                            
                            if(res[i].causeview__Batch_Status__c == 'Committed' || res[i].causeview__Batch_Status__c == 'Receipted') {
                                reconRecord.ccApprovedCount ++;
                            } else if(res[i].causeview__Batch_Status__c == 'Failed') {
                                reconRecord.ccDeclinedCount ++;
                            }
                        }
                        else if(paymentType == 'Check' || paymentType == 'Cheque') {    //user story : Cheque issue in new gift batch
                            reconRecord.chequeTotal += paymentAmount;
                            reconRecord.checkCount++;
                            reconRecord.OfflinePaymentCount++;
                        }else                                                //added by nitin this line to
                            if(paymentType == 'In Kind') {  
                                reconRecord.inKindTotal += paymentAmount;
                                reconRecord.inKindCount++;
                                reconRecord.OfflinePaymentCount++;
                            }else
                                if(paymentType == 'Stock') {  
                                    reconRecord.stockTotal += paymentAmount;
                                    reconRecord.stockCount++;
                                    reconRecord.OfflinePaymentCount++;
                                }else
                                    if(paymentType == 'ACH/PAD') {  
                                        reconRecord.ACHPADTotal += paymentAmount;
                                        reconRecord.ACHPADCount++;
                                        reconRecord.OnlinePaymentCount++;
                                        
                                        
                                    } 
                        
                        
                        
                                    else {    /* paymentType == 'Other' */
                                        reconRecord.OtherTotal += paymentAmount;
                                        reconRecord.otherCount++;
                                        reconRecord.OfflinePaymentCount++;
                                    }
                        
                    }
                    if(paymentType != 'PAD') {
                        //reconRecord.grandTotal += paymentAmount;
                    }
                    
                    if(paymentType == 'Credit Card' 
                       && res[i].causeview__Batch_Status__c == 'Pending'
                       && (res[i].causeview__Gift_Type__c != 'Recurring' || (res[i].causeview__Gift_Type__c == 'Recurring' &&  res[i].causeview__Recurring_Donation__r.causeview__Start_Date__c == new Date())) ) {    
                        
                        reconRecord.ccPendingCount ++;
                        reconRecord.creditCardTotalPending += paymentAmount;
                    }
                    
                    reconRecord.grandTotal += paymentAmount;
                    
                }
            } else if(tranResult.done != 'true' ||  parseInt(tranResult.size) > 0) {
                j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Batch Item Records. </b></div>');
            }

            reconRecord.cashTotal = Ext.util.Format.number(reconRecord.cashTotal, '0,000.00/i');
            reconRecord.chequeTotal = Ext.util.Format.number(reconRecord.chequeTotal, '0,000.00/i');
            reconRecord.creditCardTotal = Ext.util.Format.number(reconRecord.creditCardTotal, '0,000.00/i');
            reconRecord.inKindTotal = Ext.util.Format.number(reconRecord.inKindTotal, '0,000.00/i');
            reconRecord.stockTotal = Ext.util.Format.number(reconRecord.stockTotal, '0,000.00/i');
            reconRecord.ACHPADTotal = Ext.util.Format.number(reconRecord.ACHPADTotal, '0,000.00/i');
            reconRecord.OtherTotal = Ext.util.Format.number(reconRecord.OtherTotal, '0,000.00/i');
            reconRecord.grandTotal = Ext.util.Format.number(reconRecord.grandTotal, '0,000.00/i');
    
    
    /* ************************************************************************    Populate Gift Reconciliation Fields    ************************************************************************ */
    
            var GiftBatchReconFields = [];
    
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Cash Payments' , name: 'noOfCashGifts' , id:'noOfCashGifts' }); 
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Check Payments' , name: 'noOfCheckGifts', id:'noOfCheckGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Credit Card Payments' , name: 'noOfCreditCardGifts', id:'noOfCreditCardGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of In Kind Payments' , name: 'noOfInKindGifts', id:'noOfInKindGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Stock Payments' , name: 'noOfStockGifts', id:'noOfStockGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of ACH/PAD payments' , name: 'noOfACHPADGifts', id:'noOfACHPADGifts' });
                   
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Other Gifts' , name: 'noOfOtherGifts', id:'noOfOtherGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: 'Total Gift #' , name: 'noOfTotalGifts', id:'noOfTotalGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Credit Cards Approved' , name: 'noOfCreditCardApprovedGifts', id:'noOfCreditCardApprovedGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Credit Cards Declined' , name: 'noOfCreditCardDeclinedGifts', id:'noOfCreditCardDeclinedGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Recurring Sign-Ups' , name: 'noOfRecSignUpsGifts', id:'noOfRecSignUpsGifts' });
                    
                    GiftBatchReconFields.push({ fieldLabel: 'Total Cash $' , name: 'totalCash', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalCash' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Check $' , name: 'totalCheck', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalCheck' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Credit Card $' , name: 'totalCreditCard', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalCreditCard' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total In Kind $' , name: 'totalInKind', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalInKind' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Stock $' , name: 'totalStock', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalStock' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total ACH/PAD $' , name: 'totalACHPAD', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalACHPAD' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Other $' , name: 'totalOther', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalOther' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Gift Amount $' , name: 'totalGiftAmount', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalGiftAmount' });
                    GiftBatchReconFields.push({ fieldLabel: 'Total Recurring $' , name: 'totalRecurring', allowDecimals: true, decimalPrecision: 2, minValue: 0.00, id:'totalRecurring' });
                    
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Online Payment' , name: 'noOfOnlinePaymentGifts', id:'noOfOnlinePaymentGifts' });
                    GiftBatchReconFields.push({ minValue: 0, fieldLabel: '# of Offline Payment' , name: 'noOfOfflinePaymentGifts', id:'noOfOfflinePaymentGifts' });
    
    //******************************************    Commit Batch    *********************************************************************************************************************************
    
            var commitBatch = function() {
    
                // validations
    
                if(giftBatchResult.records.causeview__Cash_Gifts__c != reconRecord.cashCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected cash payments is not equal to actual number of cash payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__Cheque_Gifts__c != reconRecord.checkCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected check payments is not equal to actual number of check payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__Credit_Card_Gifts__c != reconRecord.ccCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected credit card payments is not equal to actual number of credit card payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__of_In_Kind_Payments__c != reconRecord.inKindCount){ 
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected In Kind payments is not equal to actual number of In Kind payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__of_Stock_Payments__c != reconRecord.stockCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected Stock payments is not equal to actual number of Stock payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__of_ACH_PAD_payments__c != reconRecord.ACHPADCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected ACH/PAD payments is not equal to actual number of ACH/PAD payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__Other_Gifts__c != reconRecord.otherCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected other payments is not equal to actual number of other payments entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__Total_Gift__c != reconRecord.totalCount){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Number of projected total gift is not equal to actual number of total gift entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Cash__c.replace(/[^0-9\.]+/g,"")) != Number(reconRecord.cashTotal.replace(/[^0-9\.]+/g,"")) ) { 
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total cash amount is not equal to actual total cash amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Cheque__c.replace(/[^0-9\.]+/g,""))  != Number(reconRecord.chequeTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total check amount is not equal to actual total check amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Credit_Card__c.replace(/[^0-9\.]+/g,"")) != Number(reconRecord.creditCardTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total credit card amount is not equal to actual total credit card amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Total_In_Kind__c.replace(/[^0-9\.]+/g,"") ) != Number(reconRecord.inKindTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total In Kind amount is not equal to actual total In Kind amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Total_Stock__c.replace(/[^0-9\.]+/g,""))  != Number(reconRecord.stockTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total Stock amount is not equal to actual total Stock amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Total_ACH_PAD__c.replace(/[^0-9\.]+/g,"") ) != Number(reconRecord.ACHPADTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total ACH/PAD amount is not equal to actual total ACH/PAD amount entered for this batch. </b></div>');
                    return;
                }else
                if(Number(giftBatchResult.records.causeview__Other__c.replace(/[^0-9\.]+/g,"") ) != Number(reconRecord.OtherTotal.replace(/[^0-9\.]+/g,""))){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total credit card amount is not equal to actual total credit card amount entered for this batch. </b></div>');
                    return;
                }else
                if(giftBatchResult.records.causeview__Total_Gift_Amount__c != reconRecord.grandTotal){
                    j$(".commitBatch-record-save-msg").remove();
                    j$("#summarySpace").prepend('<div class="commitBatch-record-save-msg gb-error-msg" style="color: red;"><b> Projected total gift amount is not equal to actual total gift amount entered for this batch. </b></div>');
                    return;
                }
    
                if(tranResult.done == 'true' && tranResult.records !== undefined) {
                    var res = [];
                    if(parseInt(tranResult.size) == 1) {
                        res.push(tranResult.records);
                    } else if(parseInt(tranResult.size) > 1) {
                        res = tranResult.records;
                    }
                    for(var i=0; i<res.length; i++) {
                        if(RecurringPayment.causeview__Payment_Type__c == 'Credit Card' && res[i].causeview__Batch_Status__c == 'Pending') {
                            j$("#gridSpace").prepend('<div class="credit-card-error-msg error-msg" style="color: red;"><b> There are a number of Pending Credit Card items within this Batch. Please process these payments before committing the Batch. </b></div>');
                        }
                        if(isEmptyOrNullOrUndefined(RecurringPayment.causeview__Status__c)) {
                            j$("#gridSpace").prepend('<div class="credit-card-error-msg error-msg" style="color: red;"><b> There are a number of items within this Batch that are not yet submitted. Please process these payments before committing the Batch. </b></div>');
                        }
                    }
                }
    
                var gb = new sforce.SObject("causeview__Gift_Batch__c");
                gb['Id'] = giftBatchId;
                gb['causeview__Close_Date__c'] = new Date();
                gb['causeview__Batch_Status__c'] = 'Closed'; 
                var UpdateResult = sforce.connection.update([gb]);
                if(UpdateResult[0].success != 'true'&& UpdateResult[0].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                    j$("#gridSpace").prepend('<div class="update-error-msg error-msg" style="color: red;"><b> Error Commiting Payment Records. </b></div>');
                    return;
                }
                isLoadingEdit = true;
                var testbacthsave1=window.location.href;
                if(testbacthsave1.indexOf("&save=true") !== -1)
                 {
                   testbacthsave1=testbacthsave1.replace("&save=true",""); 
                   window.location.assign(testbacthsave1); 
                 }
                 else
                 { document.location.reload(true); }
               
            }
    
    
    
            var displayNonSummaryFields = function(rowElem) {
                if(rowElem != null && !rowElem.hasCls('x-grid-row-collapsed')) {
                      
                    if(rowElem.down('.ux-row-expander-box').down('div')) {
                        rowElem.down('.ux-row-expander-box').down('div').destroy();
                    }
    
                    var storeData = store.getAt(rowElem.dom.rowIndex);
    
                    dispPaymentFieldsOnType(storeData.data.Pay_causeview__Payment_Type__c);
    
                    var grid = Ext.create('myapp.MyFormPanel');
                    var formWidth = j$('.x-grid-table').width() - 40;
                    if(grid.width > formWidth) {
                        grid.width = formWidth;
                    }
                    
                    //Swap Individual And Organization fieldsets in the Expanded view based on the Donor Type.
                    if(storeData.data.IsOrgRelated == 'O') {
                        grid.items.items.splice(1, 1);
                    } else {
                        grid.items.items.splice(2, 1);
                    }
                    //Show "Recurring Gift" fieldset in the Expanded view if the GiftType is Recurring
                    if(storeData.data.Gift_causeview__Gift_Type__c != 'Recurring') {
                        grid.items.items.splice(2, 1);
                    }
                    //Display "Organizational Contacts" fieldset in the Expanded view if the Donor Type is "O" and Gift Type is Recurring.
                    if( !(storeData.data.IsOrgRelated == 'O') ) {    // && storeData.data.Gift_causeview__Gift_Type__c == 'Recurring'
                        grid.items.items.splice(0, 1);
                    }
                    
                    grid.items.items.push(getNewAllocationGrid(storeData));
                    grid.items.items.push(getNewSoftCreditGrid(storeData));
    
                    grid.render(rowElem.down('.ux-row-expander-box'));
                    rowElem.down('.ux-row-expander-box').swallowEvent(['click', 'mousedown', 'mouseup', 'dblclick'], false);
    
                    grid.getForm().loadRecord(storeData);
    
                    setBorderColor();
                    markNonSummaryFieldsRequired(j$("#" + rowElem.id), rowElem.dom.rowIndex);
    
                    //Change Default Allocation Record Delete Icon color to Grey
                    changeAllocationIconStatus();
                }
                
                //Form Checkbox, TextArea field alinement issue. 
                //Set the width of checkbox, TextArea field same as other fields.
                var maxWidth = Math.max.apply(null, j$('table.non-summary-fields').map(function ()
                                {
                                    return j$(this).width();
                                }).get());
                j$('table.x-form-type-checkbox.non-summary-fields').attr('style', j$('table.x-form-type-checkbox.non-summary-fields').attr('style') + '; width: ' + maxWidth + 'px !important');
                j$('table.x-form-type-text.non-summary-fields:has(textarea.x-form-textarea)').attr('style', j$('table.x-form-type-text.non-summary-fields:has(textarea.x-form-textarea)').attr('style') + '; width: ' + maxWidth + 'px !important');
            }
    
            var getNewAllBatchItem = function(old) {
                var newAllBatchItem = {};
                for(each in old) {
                    if(each == 'GiftDetails') {
                        var GDs = [];
                        old.GiftDetails.forEach(function(obj) {
                            var newObj = {};
                            for(e in obj) {
                                newObj[e] = obj[e];
                            }
                            GDs.push(newObj);
                        });
                        newAllBatchItem[each] = GDs;
                    } else if(each == 'SoftCredits') {
                        var SCs = [];
                        old.SoftCredits.forEach(function(obj) {
                            var newObj = {};
                            for(e in obj) {
                                newObj[e] = obj[e];
                            }
                            SCs.push(newObj);
                        });
                        newAllBatchItem[each] = SCs;
                    } else {
                        newAllBatchItem[each] = old[each];
                    }
                }
                return newAllBatchItem;
            };
    
            var allocationCellEditing;
            var softCreditCellEditing;
    
            var getNewAllocationGrid = function(storeData) {
                var allocationStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                                    model       : 'AllocationFieldsModel', //Associate your store with Model
                                    proxy       : {
                                                    type    : 'memory',
                                                    reader  : {
                                                        type : 'json',
                                                    }
                                                  },
                                });
    
                allocationCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                                                clicksToEdit : 1
                                            });
        
                var AllocationGrid = new Ext.create('Ext.cv.GiftDetailPanel', {
                    title       : 'Allocations',
                    enableColumnResize: false,//UI misalignment issue crops up if you make this true ie..resizing the column width of softcredit and allocation. CAREFUL!!!!
                    enableColumnMove : false,
                    sortableColumns :false,
                    store       : allocationStore, //allocationStore
                    plugins     : [
                                    allocationCellEditing,
                                    ],
                    viewConfig  : { //Added grid View to support 'refresh' event on Panel.
                        stripeRows: true
                    },
                });
    
                if(storeData.data['approved'] == true) {
                    Ext.getCmp(AllocationGrid.id + '-add-allocation').disable();
                }
    
                AllocationGrid.on('beforeitemmouseenter', function(elem, record, item, index, e, eOpts) {
                    var t = this;
                    if(j$.inArray('fund-tdcls', e.target.offsetParent.classList) != -1) {
                        Ext.fly(e.target.offsetParent).set({ 'data-qtip': record.data.GiftDetail_causeview__Fund__c_Name });
                        //this.onAddClick();
                    }
                });
    
                // Make Fields Uneditable.
                AllocationGrid.on('beforeedit', function(editor, e) {
                    //Bug Fix: Uncaught TypeError: Cannot read property 'findParent' of null 
                    if(!isEmptyOrNullOrUndefined(Ext.get(this.id))) {
                        row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                        if(e.value == undefined ) {
                            e.value = "";
                        }
                        if(!isEmptyOrNullOrUndefined(row) && store.getAt(row.rowIndex).data['approved'] == true) {
                            return false;
                        }
                    }
                });
        
                AllocationGrid.getView().on('refresh', function(panel, eOpts) {
                    if (giftBatchStatus =='Closed') {
                        committedBatch();
                    }
                });
        
                AllocationGrid.on('edit', function(editor, e) {
                    var that = this;
                   
                    var row;
                    try {
                        row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                    } catch(err) {
                        //j$("#gridSpace").prepend('<div class="allocation-grid-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.message +' </b></div>');
                        return;
                    }
                    var storeData = store.getAt(row.rowIndex);
                    
                   
                    
                   j$(".error-msg").has("b:contains('No Record found for the given value At row No. " + (e.rowIdx + 1 ) + " for \"" + e.column.text + "\"') ").remove();
                   // var storeData = store.getAt(row.rowIndex);
                   
                      if(!(isEmptyOrNullOrUndefined(e.value)) && e.column.field.id.indexOf('customtrigger') != -1) 
                       {
                         if( isEmptyOrNullOrUndefined(storeData.data.GiftDetails[e.rowIdx][e.field + '_Id']))
                         {
                          j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given value At row No. ' + (e.rowIdx + 1) + ' for "' + e.column.text  + '" ' + ' . Please select the value from look up Icon ' +': ' + e.value +'</b></div>');
                           return;
                         }                 
                          
                       }
                    
                    
                    
                    
                    
                    
                    //Create a new "GiftDetails" Array.
                    var temp = [];
                    storeData.data.GiftDetails.forEach(function(obj) {
                        var newObj = {};
                        for(each in obj) {
                            newObj[each] = obj[each];
                        }
                        temp.push(newObj);
                    });
    
                    //Store the value of updated field to BatchItemPanel Store.
                    temp[e.rowIdx][e.field] = e.value;
    
                    storeData.data.GiftDetails = temp;
    
                    // When field value is Null
                    if(!e.value) {
                        // If field is a Lookup and value is Null, make the Lookup Id field as Null.
                        if(storeData.data.GiftDetails[e.rowIdx].hasOwnProperty(e.field + '_Id')) {
                            storeData.data.GiftDetails[e.rowIdx][e.field + '_Id'] = null;
                        }
                        // If field is a Lookup and value is Null, make the Lookup Name field as Null.
                        if(storeData.data.GiftDetails[e.rowIdx].hasOwnProperty(e.field + '_Name')) {
                            storeData.data.GiftDetails[e.rowIdx][e.field + '_Name'] = null;
                        }
                    }
    
    
                    // If the field is from 0'th row, save the value to Summary field if field exists in Summary field.
                    if(e.rowIdx == 0) {
                        var x = storeData.data[e.field];
                        if(storeData.data[e.field] !== undefined) {
                            storeData.data[e.field] = e.value;
                            if(storeData.data.GiftDetails[e.rowIdx][e.field + '_Id'] !== undefined) {
                                storeData.data[e.field + '_Id'] = storeData.data.GiftDetails[e.rowIdx][e.field + '_Id'];
                            }
                            if(storeData.data.GiftDetails[e.rowIdx][e.field + '_Name'] !== undefined) {
                                storeData.data[e.field + '_Name'] = storeData.data.GiftDetails[e.rowIdx][e.field + '_Name'];
                            }
                        }
                    }
    
                    if(e.field == 'GiftDetail_causeview__New_Campaign__c' || e.field == 'GiftDetail_causeview__Fund__c') {
                        var queryFields = '';
                        var objPrefix = '';
                        var objName = '';
                        var fieldName = '';
                        var value = '';
                        if(e.field == 'GiftDetail_causeview__New_Campaign__c') {
                            queryFields += ', causeview__Fund__c, causeview__Fund__r.Name, causeview__Fund__r.causeview__Fund_Name__c';
                            objPrefix = 'GiftDetail_';
                            objName = 'Campaign';
                            fieldName = 'Id';
                            value = storeData.data.GiftDetails[e.rowIdx][e.field + '_Id'];
                        }
                        if(e.field == 'GiftDetail_causeview__Fund__c') {
                            queryFields += ', causeview__Fund_Name__c';
                            objPrefix = 'GiftDetail_';
                            objName = 'causeview__Fund__c';
                            fieldName = 'Id';
                            value = storeData.data.GiftDetails[e.rowIdx][e.field + '_Id'];
                        }
    
                        var fetchResult;
                        if(value !== undefined) {        
                            fetchResult = sforce.connection.query('Select id ' + queryFields + ' From ' + objName + ' Where ' + fieldName + ' = \'' + value + '\'');
                        }
                        var result;
                        if(fetchResult !== undefined && fetchResult.done == 'true' && fetchResult.records !== undefined) {
                            if(parseInt(fetchResult.size) == 1) {
                                result = fetchResult.records;
                            } else if(parseInt(fetchResult.size) > 1) {
                                result = fetchResult.records[0];
                            }
                            if(e.field == 'GiftDetail_causeview__New_Campaign__c' && result != null && result.causeview__Fund__r != null) {
                                storeData.data.GiftDetails[e.rowIdx][objPrefix + 'causeview__Fund__c'] = result.causeview__Fund__r.Name;
                                storeData.data.GiftDetails[e.rowIdx][objPrefix + 'causeview__Fund__c_Id'] = result.causeview__Fund__c;
                                storeData.data.GiftDetails[e.rowIdx][objPrefix + 'causeview__Fund__c_Name'] = result.causeview__Fund__r.causeview__Fund_Name__c;
                                if(e.rowIdx == 0) {
                                    storeData.data[objPrefix + 'causeview__Fund__c'] = result.causeview__Fund__r.Name;
                                    storeData.data[objPrefix + 'causeview__Fund__c_Id'] = result.causeview__Fund__c;
                                    storeData.data[objPrefix + 'causeview__Fund__c_Name'] = result.causeview__Fund__r.causeview__Fund_Name__c;
                                }
                            }
                            if(e.field == 'GiftDetail_causeview__Fund__c' && result != null) {
                                storeData.data.GiftDetails[e.rowIdx][objPrefix + 'causeview__Fund__c_Name'] = result.causeview__Fund_Name__c;
                                if(e.rowIdx == 0) {
                                    storeData.data[objPrefix + 'causeview__Fund__c_Name'] = result.causeview__Fund_Name__c;
                                }
                            }
    
                            //Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
    //                                Ext.getCmp(that.id).getView().refresh();
                        }
                    }
    
    
    
                    for(var i=0; i<that.store.data.items.length; i++) {
                        that.store.data.items[i].data = storeData.data.GiftDetails[i];
                    }
                    that.store.commitChanges();
                    changeAllocationIconStatus();
                    markNonSummaryFieldsRequired(j$("#" + row.id), row.rowIndex);
                });
        
                allocationStore.loadData(storeData.data.GiftDetails);
                
                return AllocationGrid;
            };
    
            var getNewSoftCreditGrid = function(storeData) {
                var softCreditStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                                    model       : 'SoftCreditFieldsModel', //Associate your store with Model
                                    proxy       : {
                                                    type    : 'memory',
                                                    reader  : {
                                                        type : 'json',
                                                    }
                                                  },
                                });
    
                softCreditCellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                                                clicksToEdit : 1
                                            });
        
                var SoftCreditGrid = new Ext.create('Ext.cv.SoftCreditPanel', {
                    title       : 'Soft Credits',
                    enableColumnResize: false,//UI misalignment issue crops up if you make this true ie..resizing the column width of softcredit and allocation. CAREFUL!!!!
                    enableColumnMove : false,                            //madhu 78578102
                    sortableColumns :false, // vg edit
                    store       : softCreditStore, //allocationStore
                    plugins     : [
                                    softCreditCellEditing,
                                    ],
                    viewConfig  : { //Added grid View to support 'refresh' event on Panel.
                        stripeRows: true
                    },
                });
    
                if(storeData.data['approved'] == true) {
                    Ext.getCmp(SoftCreditGrid.id + '-add-softcredit').disable();
                }
        
                // Make Fields Uneditable.
                SoftCreditGrid.on('beforeedit', function(editor, e) {
                    try {
                        row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                        if(store.getAt(row.rowIndex).data['approved'] == true) {
                            return false;
                        }
                    } catch(err) { /*do nothing*/ }
                });
    
                SoftCreditGrid.getView().on('refresh', function(panel, eOpts) {
                    if (giftBatchStatus =='Closed') {
                        committedBatch();
                    }
                });
        
                SoftCreditGrid.on('edit', function(editor, e) {
                    var that = this;
                    var row;
                    try {
                    row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                    } catch(err) {
                        //j$("#gridSpace").prepend('<div class="allocation-grid-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.message +' </b></div>');
                        return;
                    }
                    
                    j$(".error-msg").has("b:contains('No Record found for the given value At row No. " + (e.rowIdx + 1 ) + " for \"" + e.column.text + "\"') ").remove();
                    var storeData = store.getAt(row.rowIndex);
                    
                      if(! (isEmptyOrNullOrUndefined(e.value)) && e.column.field.id.indexOf('customtrigger') != -1) 
                       {
                         if( isEmptyOrNullOrUndefined(storeData.data.SoftCredits[e.rowIdx][e.field + '_Id']))
                         {          
                          j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given value At row No. ' + (e.rowIdx + 1) + ' for "' + e.column.text  + '" ' + ' . Please select the value from look up Icon ' +': ' + e.value +'</b></div>');
                          return;
                         }                 
                           
                       }
                    
                    var storeData = store.getAt(row.rowIndex);
                    //Create a new "SoftCredit" Array.
                    var temp = [];
                    storeData.data.SoftCredits.forEach(function(obj) {
                        var newObj = {};
                        for(each in obj) {
                            newObj[each] = obj[each];
                        }
                        temp.push(newObj);
                    });
    
                    //Store the value of updated field to BatchItemPanel Store.
                    temp[e.rowIdx][e.field] = e.value;
    
                    storeData.data.SoftCredits = temp;
    
                    if(!e.value) {
                        // If field is a Lookup and value is Null, make the Lookup Id field as Null.
                        if(storeData.data.SoftCredits[e.rowIdx].hasOwnProperty(e.field + '_Id')) {
                            storeData.data.SoftCredits[e.rowIdx][e.field + '_Id'] = null;
                        }
                        // If field is a Lookup and value is Null, make the Lookup Name field as Null.
                        if(storeData.data.SoftCredits[e.rowIdx].hasOwnProperty(e.field + '_Name')) {
                            storeData.data.SoftCredits[e.rowIdx][e.field + '_Name'] = null;
                        }
                    }
    
                });
        
                softCreditStore.loadData(storeData.data.SoftCredits);
        
                return SoftCreditGrid;
            };
    
            var setCellQuickTip = function(elem, value) {
                Ext.fly(elem).set({ 'data-qtip': value });
            }
    
            var setBorderColor = function() {
                j$('.x-toolbar, .x-grid-header-ct, .x-panel-body').css('border-left-color', '#157fcc');
                j$('.x-toolbar, .x-grid-header-ct, .x-panel-body').css('border-right-color', '#157fcc');
                j$('.x-panel-body').css('border-bottom-color', '#157fcc');
            }
    
            requiredFields = requiredFields.concat(['Contact_FirstName', 'Contact_LastName', 'Account_Name', 'Gift_causeview__Receipt_Type__c', 'Gift_causeview__Gift_Type__c', 'Pay_causeview__Date__c', 'Pay_causeview__Payment_Type__c', 'Pay_causeview__Amount__c', 'GiftDetail_causeview__New_Campaign__c', 'GiftDetail_causeview__Fund__c']);
    
            var addCustomFields = function(storeData, requiredFieldsNew) {
                if(storeData['Gift_causeview__Gift_Type__c'] == 'Recurring') {
                    if(storeData['Pay_causeview__Payment_Type__c'] == 'ACH/PAD') {
                        requiredFieldsNew.push('Contact_Phone');
                        requiredFieldsNew.push('Account_Phone');
                    }
                    if('ACH/PAD,Credit Card'.indexOf(storeData['Pay_causeview__Payment_Type__c']) != -1 ) {
                        
                        requiredFieldsNew.push('Contact_MailingStreet');
                        requiredFieldsNew.push('Contact_MailingCity');
                       // requiredFieldsNew.push('Contact_MailingState');
                        requiredFieldsNew.push('Contact_MailingCountry');
                        requiredFieldsNew.push('Contact_MailingPostalCode');
                        
                        requiredFieldsNew.push('Account_BillingStreet');
                        requiredFieldsNew.push('Account_BillingCity');
                        //requiredFieldsNew.push('Account_BillingState');
                        requiredFieldsNew.push('Account_BillingCountry');
                        requiredFieldsNew.push('Account_BillingPostalCode');
                    }
                     
                    //contact mailingstate
                     if('ACH/PAD,Credit Card'.indexOf(storeData['Pay_causeview__Payment_Type__c']) != -1  && (storeData['Contact_MailingCountry'] != "" && 'US,Canada,Mexico,us,canada,mexico,united states,United States'.indexOf(storeData['Contact_MailingCountry']) != -1)) { 
                        requiredFieldsNew.push('Contact_MailingState');
                    }
                    
                    //account billingstate
                    if('ACH/PAD,Credit Card'.indexOf(storeData['Pay_causeview__Payment_Type__c']) != -1 && (storeData['Account_BillingCountry'] != "" && 'US,Canada,Mexico,us,canada,mexico,united states,United States'.indexOf(storeData['Account_BillingCountry']) != -1)) { 
                        requiredFieldsNew.push('Account_BillingState');
                    }
                }
                if(storeData['Pay_causeview__Payment_Type__c'] == 'Credit Card') {
                    requiredFieldsNew.push('Pay_causeview__Credit_Card_Number__c');
                    requiredFieldsNew.push('Pay_causeview__Credit_Card_Type__c');
                    requiredFieldsNew.push('Pay_Expiry_Date__x');
                }
                if('Check,Cheque'.indexOf(storeData['Pay_causeview__Payment_Type__c']) != -1) {
                    requiredFieldsNew.push('Pay_causeview__Cheque_Num__c');
                    requiredFieldsNew.push('Pay_causeview__Cheque_Date__c');
                }
                if(storeData['Pay_causeview__Payment_Type__c'] == 'ACH/PAD') {
                    requiredFieldsNew.push('Contact_MailingCountry');
                    requiredFieldsNew.push('Account_BillingCountry');
                    requiredFieldsNew.push('Pay_causeview__Account_Number__c');
                    //requiredFieldsNew.push('Pay_causeview__Account_Type__c');
                    requiredFieldsNew.push('Pay_causeview__Routing_Branch_Number__c');
                }
                if(storeData['Gift_causeview__Gift_Type__c'] == 'Recurring' || storeData['Pay_causeview__Payment_Type__c'] == 'ACH/PAD') {
                    requiredFieldsNew.push('RecGiftOrgContact_causeview__Constituent__c');
                    requiredFieldsNew.push('RecGiftOrgContact_firstName');
                    requiredFieldsNew.push('RecGiftOrgContact_lastName');
                }
                
                return requiredFieldsNew;
            }
    
            var markSummaryFieldsRequired = function() {
                j$('tr.x-grid-data-row').each(function(idx, elm) {
                    var reqFields = [];
                    var requiredFieldsNew = requiredFields.concat([]);
                    var storeData;
                    try {
                        storeData = store.getAt(idx).data;
                        requiredFieldsNew = addCustomFields(storeData, requiredFieldsNew);
                        for(var i=0; i<requiredFieldsNew.length; i++) {
                            //Ind/Org
                            if(storeData['IsOrgRelated'] == 'I') {
                                if(requiredFieldsNew[i].indexOf('Contact_') == 0) {
                                    reqFields.push(requiredFieldsNew[i].replace('Contact_', 'Contact-'));
                                }
                            } else {
                                if(requiredFieldsNew[i].indexOf('Account_') == 0) {
                                    reqFields.push(requiredFieldsNew[i].replace('Account_', 'Account-'));
                                }
                            }
                            
                            //Gift
                            if(requiredFieldsNew[i].indexOf('Gift_') == 0) {
                                reqFields.push(requiredFieldsNew[i].replace('Gift_', 'causeview__Gift__c-'));
                            }
                            
                            //Payment
                            if(requiredFieldsNew[i].indexOf('Pay_') == 0) {
                                reqFields.push(requiredFieldsNew[i].replace('Pay_', 'causeview__Payment__c-'));
                            }
        
                            //Receipt
                            if(requiredFieldsNew[i].indexOf('Receipt_') == 0) {
                                reqFields.push(requiredFieldsNew[i].replace('Receipt_', 'causeview__Receipt__c-'));
                            }
        
                            //Allocation
                            if(requiredFieldsNew[i].indexOf('GiftDetail_') == 0) {
                                reqFields.push(requiredFieldsNew[i].replace('GiftDetail_', 'causeview__Gift_Detail__c-'));
                            }
                        }
                    } catch(err) { /*Do nothing*/ }
                    for(var i=0; i<reqFields.length; i++) {
                        j$(elm).find("td.x-grid-cell-" + reqFields[i]).each(function(i, el) {
                            j$(el).addClass('required-field');
                        });
                    }
                });
            }
    
            var markNonSummaryFieldsRequired = function(elem, rowIdx) {
                var storeData;
                try {
                    storeData = store.getAt(rowIdx).data;
                    var requiredFieldsNew = requiredFields.concat([]);
                    requiredFieldsNew = requiredFieldsNew.concat(['RecGift_causeview__Start_Date__c', 'RecGift_causeview__Frequency__c']);
                    requiredFieldsNew = addCustomFields(storeData, requiredFieldsNew);
                    for(var i=0; i<requiredFieldsNew.length; i++) {
                        //Form Fields
                        j$(elem).find("input[name='" + requiredFieldsNew[i] + "']").each(function(i, el) {
                            j$(el).addClass('required-field');
                        });
                        //user story : Organization Recurring - required indicator needed in new gift batch
                        j$(elem).find("textarea[name='" + requiredFieldsNew[i] + "']").each(function(i, el) {
                            j$(el).addClass('required-field');
                        });
                        //Grid Fields
                        if(requiredFieldsNew[i].indexOf('GiftDetail_') == 0) {
                            j$(elem).find("td.x-grid-cell-NonSum-" + requiredFieldsNew[i].replace('GiftDetail_', 'causeview__Gift_Detail__c-')).each(function(i, el) {
                                j$(el).addClass('required-field');
                            });
                        }
                    }
                } catch(err) { /*Do nothing*/ }
            }
    
            var showHideStatusIcons = function() { 
                setStatusIconSize();    //Make icons bigger
                if (giftBatchStatus =='Closed') {
                    committedBatch();
                } else {
                    j$(".x-grid-wrap-row").each(function(i, el) {
                        if(!isEmptyOrNullOrUndefined(store.data.items[i].data['id'])) {                
                            j$(el).find(".saved-icon").attr("src", '{!URLFOR($Resource.Icons, "SaveFailed.png")}');
                        } else {
                              j$(el).find(".saved-icon").attr("src", '{!URLFOR($Resource.Icons, "Saved.png")}');
                        }
                        if(store.data.items[i].data['saved'] == true) {
                           j$(el).find(".saved-icon").attr("src", '{!URLFOR($Resource.Icons, "SaveSuccess.png")}');
                        } 
    
                        //Open Pledge               
                        if(store.data.items[i].data['approved'] != true && store.data.items[i].data['Inst_' + 'causeview__Installment_Balance__c'] > 0 &&
                            store.data.items[i].data['Gift_causeview__Gift_Type__c'] != 'Recurring')
                        {
                           j$(el).find(".Close-Pledge").attr("src", '{!URLFOR($Resource.Icons, "OpenPledge.png")}');
                           j$(el).find(".Close-Pledge").css("cursor", "hand");
                        } else {
                           j$(el).find(".Close-Pledge").attr("src", '{!URLFOR($Resource.Icons, "ClosedPledge.png")}');
                           j$(el).find(".Close-Pledge").css("cursor", "default");
                        }
    
                        if(store.data.items[i].data['Pay_causeview__Payment_Type__c']== 'Credit Card' || 
                           store.data.items[i].data['Pay_causeview__Payment_Type__c']== 'ACH/PAD'){
                            if( store.data.items[i].data['approved'] == false && !isEmptyOrNullOrUndefined(store.data.items[i].data['id'])){
                                j$(el).find(".Payment-Gateway").attr("src", '{!URLFOR($Resource.Icons, "PaymentGatewayFailed.png")}');  
                            }
                            else if( store.data.items[i].data['approved'] == true)
                            {
                                 j$(el).find(".Payment-Gateway").attr("src", '{!URLFOR($Resource.Icons, "PaymentGatewaySuccess.png")}'); 
                                 j$(el).find(".delete-batch-item-icon").attr("src", '{!URLFOR($Resource.Icons, "DeleteDisabled.png")}');
                                 j$(el).find(".delete-batch-item-icon").css("cursor", "default");  //madhu 78228288
                            
                            }
                        }
                        else{
                             j$(el).find(".Payment-Gateway").attr("src", '{!URLFOR($Resource.Icons, "PaymentGateway.png")}'); 
                        }
                    });
                }
            }
            
            var changeAllocationIconStatus = function(){
                try {
                        setStatusIconSize();    //Make icons bigger
                        j$(".ux-row-expander-box").each(function(i, el) {
                            j$(el).find(".delete-alloc-item-icon").first().attr("src", '{!URLFOR($Resource.Icons, "DeleteDisabled.png")}');
                            j$(el).find(".delete-alloc-item-icon").first().css("cursor", "default");
    
                        });
                    } catch(err) {
                        //Do nothing.
                    }
            }
            //Make icons bigger
            var setStatusIconSize = function(){
                j$('img.x-action-col-icon').height('20px');                       
                j$('img.x-action-col-icon').not('.Separator').width('20px');
                j$('img.x-action-col-icon').css('margin-top', '2px');
            }
    
    
    
    /*  ****************************************************************************************************************************  */
    
            var cellEditing;
            var reconForm;
            var giftBatchStore;
    
            Ext.ns("Ext.Cv");
            Ext.onReady(function(){ //This is a execution point
    
                Ext.QuickTips.init(); //For tool tip.
    
                giftBatchStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                                    model       : 'GiftBatchFieldsModel', //Associate your store with Model
                                    proxy       : {
                                                    type    : 'memory',
                                                    reader  : {
                                                        type : 'json',
                                                    }
                                                  },
                                });
                for(var field in giftBatchResult.records){  //user story : Edit and Cancel feature for Gift Batch Summary Section
                    var testdfjks = giftBatchResult.records[field];
                    if('causeview__Cash__c,causeview__Cheque__c,causeview__Credit_Card__c,causeview__Total_In_Kind__c,causeview__Total_Stock__c,causeview__Total_ACH_PAD__c,causeview__Other__c'.indexOf(field) != -1){
                        //giftBatchResult.records[field+'_dField'] = parseFloat(giftBatchResult.records[field]);  
                        giftBatchResult.records[field+'_dField'] = Ext.util.Format.number(giftBatchResult.records[field], '0,000.00/i');
                        giftBatchResult.records[field] = '$'+Ext.util.Format.number(giftBatchResult.records[field], '0,000.00/i');
                        continue;
                    }
                    giftBatchResult.records[field+'_dField'] = giftBatchResult.records[field]; 
                }
                giftBatchStore.loadData([giftBatchResult.records]);
    
                var summaryForm = Ext.create('Ext.cv.GiftBatch.SummaryForm', { vtype: 'Currency',
                                                renderTo: summarySpace,
                                            });
    
                if(giftBatchResult.done == 'true' && giftBatchResult.records !== undefined) {
                    summaryForm.getForm().loadRecord(giftBatchStore.getAt(0));
                }
    
                reconForm = Ext.create('Ext.cv.GiftBatch.ReconForm', {
                                                renderTo: reconSpace,
                                            });
    
                cellEditing = Ext.create('Ext.grid.plugin.CellEditing', {
                                                clicksToEdit : 1
                                            }),
    
                BatchItemPanel = new Ext.create('Ext.Cv.BatchItemPanel', {   //This is to create our custom panel
                        renderTo: gridSpace,
                        enableColumnResize : false,
                        enableColumnMove : false,
                        sortableColumns :false,
                        title : 'Batch Items',
                        plugins: [
                                cellEditing,
                                {
                                ptype: 'rowexpander',
                                rowBodyTpl:  ['<div class="ux-row-expander-box"></div>'],
                                },
                            ],
                        viewConfig: { //Add grid View to support 'refresh' event on Panel.
                            stripeRows: true
                        },
    
                    });
    
    
                BatchItemPanel.getView().on('refresh', function(panel, eOpts) {
                    showHideStatusIcons();
                    for(row in panel.all.elements) {
                        displayNonSummaryFields(Ext.get(panel.all.elements[row]));
                        markSummaryFieldsRequired();
                    }
                    if(Ext.get(panel.focusedRow) != null) {
                        
    //                    displayNonSummaryFields(Ext.get(panel.focusedRow).up('tr'));
                    }
                });
    
                BatchItemPanel.on('beforeitemmouseenter', function(elem, record, item, index, e, eOpts) {
                    var t = this;
                    if(j$.inArray('fund-tdcls', e.target.offsetParent.classList) != -1) {
                        Ext.fly(e.target.offsetParent).set({ 'data-qtip': record.data.GiftDetail_causeview__Fund__c_Name });
                    }
                    if(j$.inArray('letter-tdcls', e.target.offsetParent.classList) != -1) {
                        Ext.fly(e.target.offsetParent).set({ 'data-qtip': record.data.Gift_causeview__Letter__c_Name });
                    }
                });
    
    
                BatchItemPanel.on('beforeedit', function(editor, e) {
                    // If Tabbed on the last column of the first row, Add a new row to the Batch Interface.
                    if(e.colIdx == e.row.childElementCount - 1) {
                        //if(e.rowIdx == 0 && totalGifts > store.getCount()) { //e.colIdx == e.row.childElementCount - 2 && e.rowIdx == e.store.data.length - 1
                        if(e.rowIdx == store.getCount()-1 && totalGifts > store.getCount()) { //e.colIdx == e.row.childElementCount - 2 && e.rowIdx == e.store.data.length - 1
                            this.onAddClick();
                        }
                        return false;
                    }
    
                    // Make Fields Uneditable.
                    if(store.getAt(e.rowIdx).data['approved'] == true || 
                      (e.field == 'Pay_Submit_to_Gateway__x' && (store.getAt(e.rowIdx).data['Pay_causeview__Status__c'] != 'Declined' && !isEmptyOrNullOrUndefined(store.getAt(row.rowIndex).data['Pay_causeview__Status__c']) && store.getAt(row.rowIndex).data['Gift_causeview__Batch_Status__c'] != 'Failed')) ||
                      (e.field == 'Gift_causeview__Gift_Type__c'&& store.getAt(e.rowIdx).data['Pay_causeview__Status__c'] == 'Declined'))
                    {
                         return false;
                    }
                });
    
                BatchItemPanel.on('edit', function(editor, e, eOpts) {
                  
                   j$(".error-msg").has("b:contains('No Record found for the given value At row No. " + (e.rowIdx + 1 ) + " for \"" + e.column.text + "\"') ").remove();
    
                  
                    if(e.record.data[e.field] != e.record.modified[e.field]) {
                        e.record.data['saved'] = false;
                        showHideStatusIcons();
                    }
                    
                    
                   
                    var storeData = store.getAt(e.rowIdx);
                    
                    
                    if(!(e.field == 'ConstOrgId' || e.field == 'GiftDetail_causeview__New_Campaign__c' || e.field == 'GiftDetail_causeview__Fund__c' ||
                        e.field == 'Gift_causeview__Letter__c'))
                     {
                      if(! (isEmptyOrNullOrUndefined(e.value)) && e.column.field.id.indexOf('customtrigger') != -1) 
                       {
                         if(isEmptyOrNullOrUndefined(storeData.data[e.field + '_Id']))
                         {
                          
                          j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given value At row No. ' + (e.rowIdx + 1) + ' for "' + e.column.text  + '" ' + ' . Please select the value from look up Icon ' +': ' + e.value +'</b></div>');
                          return;
                          }
                       }
                     }
    
                    if(-1 != 'Gift_causeview__Gift_Type__c,Pay_causeview__Amount__c,Pay_causeview__Payment_Type__c'.indexOf(e.field)) {
                        if(e.field == 'Pay_causeview__Amount__c') {
                            storeData.data['Gift_causeview__Expected_Amount__c'] = e.value;
                        }
                        populateReconFields();
                    }
    
                    if(e.field == 'Gift_causeview__Gift_Type__c') {
                        if(e.value == 'Recurring') {
                            storeData.data['Gift_causeview__Receipt_Type__c'] = 'Consolidated';
                            storeData.set('Gift_causeview__Receipt_Type__c', 'Consolidated');
                            store.commitChanges();
                           // displayNonSummaryFields(Ext.get(e.row.id).up('tr'));
                        }
                        //Display Pledge Icons
                        showHideStatusIcons();
                    }
    
                    // When field value is Null
                    if(!e.value) {
                        // If "ConstOrgId" is emptied, set 'Account_id' and 'Contact_id' to null.
                        /*if(e.field == 'ConstOrgId') {
                            storeData['Account_id'] = null;
                            storeData['Contact_id'] = null;
                        }*/
                        // If field is a Lookup and value is Null, make the Lookup Id field as Null.
                        if(storeData.data.hasOwnProperty(e.field + '_Id')) {
                            storeData.data[e.field + '_Id'] = null;
                        }
                        // If field is a Lookup and value is Null, make the Lookup Name field as Null.
                        if(storeData.data.hasOwnProperty(e.field + '_Name')) {
                            storeData.data[e.field + '_Name'] = null;
                        }
                        return;
                    }
    
    
                    if(e.field == 'Pay_causeview__Amount__c') {
                        if(storeData.data.GiftDetails[0]['GiftDetail_causeview__Amount__c'] == null || storeData.data.GiftDetails[0]['GiftDetail_causeview__Amount__c'] == '') {
                            storeData.data.GiftDetails[0]['GiftDetail_causeview__Amount__c'] = e.value;
                        }
                        if(storeData.data.GiftDetails.length - 1 == 0){          //madhu                   
                            storeData.data.GiftDetails[storeData.data.GiftDetails.length - 1]['GiftDetail_causeview__Amount__c'] = e.value;
                        } 
                    }
    
                    if(e.field == 'IsOrgRelated' && e.value != e.originalValue) {    // && e.value != e.originalValue
                        storeData.set('ConstOrgId', null);
                        if(e.value == 'I') {
                            for(key in storeData.data) {
                                if(key.indexOf("Account_") == 0) {
                                    storeData.set(key, null);
                                }
                            }
                        } else {
                            for(key in storeData.data) {
                                if(key.indexOf("Contact_") == 0) {
                                    storeData.set(key, null);
                                }
                            }
                        }
    
                    }
    
                    if(e.field == 'Pay_causeview__Payment_Type__c') {
    //                    dispPaymentFieldsOnType(e.value);
                    }
    
                    //Update the BatchItemPanel Store's default Allocation fields with that of the updated value.
                    if(e.field.match('GiftDetail_') != null) {
                        storeData.data.GiftDetails[0][e.field] = e.value;
                        if(storeData.data[e.field + '_Id'] !== undefined) {
                            storeData.data.GiftDetails[0][e.field + '_Id'] = storeData.data[e.field + '_Id'];
                        }
                        if(storeData.data[e.field + '_Name'] !== undefined) {
                            storeData.data.GiftDetails[0][e.field + '_Name'] = storeData.data[e.field + '_Name'];
                        }
                    }
    
                    if(e.field == 'ConstOrgId' || e.field == 'GiftDetail_causeview__New_Campaign__c' || e.field == 'GiftDetail_causeview__Fund__c' ||
                        e.field == 'Gift_causeview__Letter__c') {
    
                        var queryFields = '';
                        var objPrefix = '';
                        var objName = '';
                        var fieldName = '';
                        var value = '';
                        if(e.field == 'ConstOrgId') {
                            if(storeData.data['IsOrgRelated'] == 'O') {
                                queryFields = accountQueryFields;
                                objPrefix = 'Account_';
                                objName = 'Account';
                                fieldName = 'causeview__Organization_ID__c';
                            } else {
                                queryFields = contactQueryFields;
                                objPrefix = 'Contact_';
                                objName = 'Contact';
                                fieldName = 'causeview__Constituent_ID__c';                        
                            }
                            value = e.value;
                        }
                        if(e.field == 'GiftDetail_causeview__New_Campaign__c') {
                            queryFields += ', causeview__Fund__c, causeview__Fund__r.Name, causeview__Fund__r.causeview__Fund_Name__c';
                            objPrefix = 'GiftDetail_';
                            objName = 'Campaign';
                            fieldName = 'Id';
                            value = storeData.data[e.field + '_Id'];
                        }
                        if(e.field == 'GiftDetail_causeview__Fund__c') {
                            queryFields += ', causeview__Fund_Name__c';
                            objPrefix = 'GiftDetail_';
                            objName = 'causeview__Fund__c';
                            fieldName = 'Id';
                            value = storeData.data[e.field + '_Id'];
                        }
                        if(e.field == 'Gift_causeview__Letter__c') {
                            queryFields += ', causeview__Name__c';
                            objPrefix = 'Gift_';
                            objName = 'causeview__Letter__c';
                            fieldName = 'Id';
                            value = storeData.data[e.field + '_Id'];
                        }
                        Visualforce.remoting.Manager.invokeAction(
                            '{!$RemoteAction.BatchProcessingController.getData}',
                            value, queryFields, objName, fieldName,
                            function(result, event) {
                                if(result != null) {
                                    var fields = queryFields.split(',');
                                    if(fieldName == 'causeview__Constituent_ID__c') {
                                         storeData.data['Contact_id'] = result.Id;
                                         try {
                                             var instResultI = sforce.connection.query('SELECT  causeview__Pledge__r.causeview__Constituent__c, ' +
                                                                                    'Max(causeview__Installment_Balance__c) InstBal FROM causeview__Installment__c WHERE ' +
                                                                                    'causeview__Pledge__r.causeview__Constituent__c = \'' + storeData.data['Contact_id'] + '\' Group By ' +
                                                                                    'causeview__Pledge__r.causeview__Constituent__c');
                                             storeData.data['Inst_' + 'causeview__Installment_Balance__c'] = parseFloat(instResultI.records !== undefined ? instResultI.records.InstBal : 0);
                                         } catch(err) {    /*Do nothing*/    }
                                    }
                                    if(fieldName == 'causeview__Organization_ID__c') {
                                         storeData.data['Account_id'] = result.Id;
                                         try {
                                             var instResultO = sforce.connection.query('SELECT  causeview__Pledge__r.causeview__Organization__c, ' +
                                                                                    'Max(causeview__Installment_Balance__c) InstBal FROM causeview__Installment__c WHERE ' +
                                                                                    'causeview__Pledge__r.causeview__Organization__c = \'' + storeData.data['Account_id'] + '\' Group By ' +
                                                                                    'causeview__Pledge__r.causeview__Organization__c');
                                             storeData.data['Inst_' + 'causeview__Installment_Balance__c'] = parseFloat(instResultO.records !== undefined ? instResultO.records.InstBal : 0);
                                         } catch(err) {    /*Do nothing*/    }
                                    }
    
                                    for(var i=0; i<fields.length; i++) {
                                        var isObjectArray = false;
                                        if(fields[i].trim() == 'causeview__Fund__c') {
                                            if(isEmptyOrNullOrUndefined(result.causeview__Fund__r)) {
                                                continue;
                                            }
                                            storeData.data[objPrefix + 'causeview__Fund__c'] = result.causeview__Fund__r.Name;
                                            storeData.data.GiftDetails[0][objPrefix + 'causeview__Fund__c'] = result.causeview__Fund__r.Name;
                                            storeData.data[objPrefix + 'causeview__Fund__c_Id'] = result[fields[i].trim()];
                                            storeData.data.GiftDetails[0][objPrefix + 'causeview__Fund__c_Id'] = result[fields[i].trim()];
                                            storeData.set(objPrefix + 'causeview__Fund__c', result.causeview__Fund__r.Name);
                                        } else if(fields[i].trim() == 'causeview__Fund_Name__c') {
                                            storeData.data[objPrefix + 'causeview__Fund__c_Name'] = result[fields[i].trim()];
                                            storeData.data.GiftDetails[0][objPrefix + 'causeview__Fund__c_Name'] = result[fields[i].trim()];
                                        } else if(fields[i].trim() == 'causeview__Fund__r.causeview__Fund_Name__c') {
                                            if(isEmptyOrNullOrUndefined(result['causeview__Fund__r'])) {
                                                continue;
                                            }
                                            storeData.data[objPrefix + 'causeview__Fund__c_Name'] = result['causeview__Fund__r']['causeview__Fund_Name__c'];
                                            storeData.data.GiftDetails[0][objPrefix + 'causeview__Fund__c_Name'] = result['causeview__Fund__r']['causeview__Fund_Name__c'];
                                        } else if(fields[i].trim() == 'causeview__Name__c') {
                                            storeData.data[objPrefix + 'causeview__Letter__c_Name'] = result['causeview__Name__c'];
                                        } else {
                                            if(fields[i].trim().indexOf("__r.Name", fields[i].trim().length - 8) != -1) {
                                                //For Custom Lookup fields.
                                                if(isEmptyOrNullOrUndefined(result[fields[i].trim().substr(0, fields[i].trim().length - 5)])) {
                                                    storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 8) + '__c'] = null;
                                                    storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 8) + '__c_Id'] = null;
                                                    continue;
                                                }
                                                storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 8) + '__c'] = result[fields[i].trim().substr(0, fields[i].trim().length - 5)]['Name'];
                                                storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 8) + '__c_Id'] = result[fields[i].trim().substr(0, fields[i].trim().length - 5)]['Id'];
                                            } else if(fields[i].trim().indexOf(".Name", fields[i].trim().length - 5) != -1) {
                                                //For Standard Lookup fields.
                                                if(isEmptyOrNullOrUndefined(result[fields[i].trim().substr(0, fields[i].trim().length - 5)])) {
                                                    storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 5) + 'Id'] = null;
                                                    storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 5) + 'Id_Id'] = null;
                                                    continue;
                                                }
                                                storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 5) + 'Id'] = result[fields[i].trim().substr(0, fields[i].trim().length - 5)]['Name'];
                                                storeData.data[objPrefix + fields[i].trim().substr(0, fields[i].trim().length - 5) + 'Id_Id'] = result[fields[i].trim().substr(0, fields[i].trim().length - 5)]['Id'];
                                            }
                                            else {
                                                //For non Lookup fields.
                                                if( !( (fields[i].trim().indexOf("__c", fields[i].trim().length - 3) != -1 && result[fields[i].trim().substr(0, fields[i].trim().length - 3) + '__r'] !== undefined)
                                                        || (fields[i].trim().indexOf("Id", fields[i].trim().length - 2) != -1 && result[fields[i].trim().substr(0, fields[i].trim().length - 2)] !== undefined) ) ) {
                                                    if(Object.prototype.toString.call(storeData.data[objPrefix + fields[i].trim()]) === '[object Array]') { 
                                                        isObjectArray = true;
                                                    }
                                                    storeData.data[objPrefix + fields[i].trim()] = result[fields[i].trim()];
                                                    storeData.set(objPrefix + fields[i].trim(), result[fields[i].trim()]);
                                                    if(isObjectArray && !(isEmptyOrNullOrUndefined(storeData.data[objPrefix+fields[i].trim()]))){
                                                       storeData.data[objPrefix+fields[i].trim()] = StoreData.data[objPrefix+fields[i].trim()].split(';');
                                                    }
                                                    //storeData.data.GiftDetails[storeData.data.GiftDetails.length - 1][objPrefix + fields[i].trim()] = result[fields[i].trim()];
                                                }
                                            }
                                        }
                                    }
    
    
    
                                    store.commitChanges();
                                    displayNonSummaryFields(Ext.get(e.row.id).up('tr'));
                                    markSummaryFieldsRequired();
                                    //Display Pledge Icons
                                    showHideStatusIcons();
    
                                } else {
                                    if(fieldName == 'causeview__Constituent_ID__c'|| fieldName == 'causeview__Organization_ID__c') {
                                        storeData.data['ConstOrgId'] = "";
                                    }
                                      j$("#gridSpace").prepend('<div class="lookup-record-not-found-msg error-msg" style="color: red;"><b> No Record found for the given value At row No. ' + (e.rowIdx + 1) + ' for "' + e.column.text  + '" ' + ' . Please select the value from look up Icon ' +': ' + e.value +'</b></div>');
                                }
                            }
                        );                
                    } else {
                        displayNonSummaryFields(Ext.get(e.row.id).up('tr'));
                    }
                    markSummaryFieldsRequired();
                });
    
                var records = [];
                for(var i=0; i<AllBatchItems.Records.length; i++) {
                    records.push(getNewAllBatchItem(AllBatchItems.Records[i]));
                }
                if (giftBatchStatus == 'Closed') {
                    records.shift();
                } else {
                    emptyAllBatchItemRecord = records.shift();
                }
                store.loadData(records);
    
                for(var i=0; i<store.data.items.length; i++) {
                    store.data.items[i].data = SubtractTimezoneOffsetFromDate(store.data.items[i].data);
                }
    
                populateReconFields();
    
                // If Summary fields width is smaller than the Batch Item Grid width, increase the width of the last column.
                // To support the Expanded view fields.
                var formWidth = j$('.x-grid-table').width() - 100;
                if(width > formWidth && (width - formWidth) > BatchItemPanel.columns[BatchItemPanel.columns.length - 2].width ) {
                    BatchItemPanel.columns[BatchItemPanel.columns.length - 2].width = width - formWidth;
                }
                  var myurl=window.location.href;
                if(myurl.indexOf("&save=true") > -1 )
                {
                j$("#summarySpace").prepend('<div class="giftBatch-record-update-msg gb-error-msg" style="color: green;"><b> Gift Batch record updated successfully. </b></div>') ;                                
                window.setTimeout(function() { j$('.giftBatch-record-update-msg').slideUp(7000).delay(3000).remove();}, 6000);
                }
    
            });
    
    
        //----------------------------    Store Model Definition    -------------------------------
            var PledgePaymentTypeFields = 'causeview__Credit_Card_Number__c,causeview__Credit_Card_Type__c,Expiry_Date__x,Security_Code__x,causeview__Description__c,' +
                                            'causeview__Date_Deposited__c,causeview__Status__c,causeview__Cheque_Num__c,causeview__Cheque_Date__c,' +
                                            'causeview__Account_Number__c,causeview__Account_Type__c,causeview__Routing_Branch_Number__c';
            var PledgePaymentTypeReqFields = 'causeview__Credit_Card_Number__c,causeview__Credit_Card_Type__c,Expiry_Date__x,' +
                                            'causeview__Date_Deposited__c,causeview__Status__c,causeview__Cheque_Num__c,causeview__Cheque_Date__c,' +
                                            'causeview__Account_Number__c,causeview__Account_Type__c,causeview__Routing_Branch_Number__c';
    
            var PledgePaymentTypeFieldMap = {};
    
            PledgePaymentTypeFieldMap['Credit Card'] = 'causeview__Credit_Card_Number__c, causeview__Credit_Card_Type__c, Expiry_Date__x, Security_Code__x, causeview__Description__c';
            PledgePaymentTypeFieldMap['Credit Card - Offline'] = 'causeview__Credit_Card_Type__c, causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
            PledgePaymentTypeFieldMap['Cheque'] = 'causeview__Cheque_Num__c, causeview__Cheque_Date__c, causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
            PledgePaymentTypeFieldMap['Check'] = 'causeview__Cheque_Num__c, causeview__Cheque_Date__c, causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
            PledgePaymentTypeFieldMap['Cash'] = 'causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
            PledgePaymentTypeFieldMap['ACH/PAD'] = 'causeview__Account_Number__c, causeview__Account_Type__c, causeview__Routing_Branch_Number__c';
            PledgePaymentTypeFieldMap['Stock'] = 'causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
            PledgePaymentTypeFieldMap['Property'] = '';
            PledgePaymentTypeFieldMap['In Kind'] = '';
            PledgePaymentTypeFieldMap['Other'] = 'causeview__Date_Deposited__c, causeview__Description__c, causeview__Status__c';
    
    
            Ext.define('PledgePaymentFieldsModel', {
                extend  : 'Ext.data.Model',
                fields  : [
                        { name: 'causeview__Donation__c', type: 'string' },
                        { name: 'causeview__Amount__c', type: 'float' },
                        { name: 'causeview__Date__c', type: 'date' },
                        { name: 'causeview__Payment_Type__c', type: 'string' },
                        { name: 'causeview__Credit_Card_Type__c', type: 'string' },    //Credit Card
                        { name: 'causeview__Credit_Card_Number__c', type: 'string' },
                        { name: 'Expiry_Date__x', type: 'string' },
                        { name: 'Security_Code__x', type: 'string' },
                        { name: 'causeview__Description__c', type: 'string' },
                        { name: 'causeview__Date_Deposited__c', type: 'date' },    //Credit Card - offline
                        { name: 'causeview__Status__c', type: 'string' },
                        { name: 'causeview__Cheque_Num__c', type: 'string' },    //Check
                        { name: 'causeview__Cheque_Date__c', type: 'date' },
                        { name: 'causeview__Account_Number__c', type: 'string' },    //ACH/PAD
                        { name: 'causeview__Account_Type__c', type: 'string' },
                        { name: 'causeview__Routing_Branch_Number__c', type: 'string' },
                        { name: 'causeview__Payment__c_Id', type: 'string' },
                        { name: 'gridStoreIndex', type: 'numberfield' },
                    ],
            });
             
            Ext.define('PledgeInstFieldsModel', {
                extend  : 'Ext.data.Model',
                fields  : [
                        { name: 'id' },
                        { name: 'causeview__Account_Contact__c_Id' },
                        { name: 'causeview__Account_Contact__c' },
                        { name: 'name' },
                        { name: 'causeview__Installment_Amount__c', type: 'customnumberfield' },
                        { name: 'causeview__Installment_Balance__c', type: 'customnumberfield' },
                        { name: 'causeview__Pledge__c' },
                        { name: 'causeview__Installment_Date__c' },
                        { name: 'fulfillment_Amount', type: 'customnumberfield'},
                        { name: 'causeview__Pledge__c_Id' },
                    ],
            });
             
             Ext.define('ReconFieldsModel', {
                 extend: 'Ext.data.Model',
                 fields: [
                     {name: 'noOfCashGifts', type: 'displayfield'},
                     {name: 'noOfCheckGifts',type: 'displayfield'},
                     {name: 'noOfCreditCardGifts', type: 'displayfield'},
                     {name: 'noOfInKindGifts', type: 'displayfield'},
                     {name: 'noOfStockGifts', type: 'displayfield'},
                     {name: 'noOfACHPADGifts', type: 'displayfield'},
                     {name: 'noOfOtherGifts', type: 'displayfield'},
                     {name: 'noOfTotalGifts', type: 'displayfield'},
                     {name: 'noOfCreditCardApprovedGifts', type: 'displayfield'},
                     {name: 'noOfCreditCardDeclinedGifts', type: 'displayfield'},
                     
                     {name: 'noOfOnlinePaymentGifts', type: 'displayfield'},
                     {name: 'noOfOfflinePaymentGifts', type: 'displayfield'},
                     
                     {name: 'noOfRecSignUpsGifts',type: 'displayfield'},
                     {name: 'totalCash',  type: 'displayfield'},
                     {name: 'totalCheck', type: 'displayfield'},
                     {name: 'totalCreditCard', type: 'displayfield'},
                     {name: 'totalInKind',type: 'displayfield'},
                     {name: 'totalStock',  type: 'displayfield'},
                     {name: 'totalACHPAD', type: 'displayfield'},
                     {name: 'totalOther', type: 'displayfield'},
                     {name: 'totalGiftAmount',type: 'displayfield'},
                     {name: 'totalRecurring', type: 'displayfield'}
                 ]
             });
    
            Ext.define('GiftBatchFieldsModel', { //Defining a model, which is like an object
                extend  : 'Ext.data.Model',
                fields  : giftBatchFields,
            });
             
            Ext.define('SoftCreditFieldsModel', { //Defining a model, which is like an object
                extend  : 'Ext.data.Model',
                fields  : softCreditFields,
            });
             
            Ext.define('AllocationFieldsModel', { //Defining a model, which is like an object
                extend  : 'Ext.data.Model',
                fields  : allocationFields,
            });
             
            Ext.define('SummaryFieldsModel', { //Defining a model, which is like an object
                extend  : 'Ext.data.Model',
                fields  : fields,
            });
    
             
        //----------------------------    Store Definition    -------------------------------
    
            var pledgeInstStore = Ext.create('Ext.data.Store', {
                                model       : 'PledgeInstFieldsModel',
                                proxy       : {
                                                type    : 'memory',
                                                reader  : {
                                                    type : 'json',
                                                }
                                              },
                            });
    
            var pledgePaymentStore = Ext.create('Ext.data.Store', {
                                model       : 'PledgePaymentFieldsModel',
                                proxy       : {
                                                type    : 'memory',
                                                reader  : {
                                                    type : 'json',
                                                }
                                              },
                            });
    
            var store = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                                model       : 'SummaryFieldsModel', //Associate your store with Model
                                proxy       : {
                                                type    : 'memory',
                                                reader  : {
                                                    type : 'json',
                                                }
                                              },
                            });
    
    
    
    //******************************************    Pledge Container    *********************************************************************************************************************************
    
            var createTran = function(donorId, isOrg, amount) {
                var tran = new sforce.SObject("causeview__Gift__c");
                if(!isOrg) {
                    tran['causeview__Constituent__c'] = donorId;
                } else {
                    tran['causeview__Organization__c'] = donorId;
                }
                tran['causeview__Expected_Amount__c'] = amount;
                tran['causeview__GiftBatch__c'] = giftBatchId;
                
                return tran;
            }
    
            var paymentPicklistValueMap = {};
            var PaymentFieldLabelMap = {};
            var PayFields = sforce.connection.describeSObject("causeview__Payment__c").fields;    //.getFields();
            for(var i = 0; i < PayFields.length; i++) {
                PaymentFieldLabelMap[PayFields[i].name] = PayFields[i].label;
                if(PayFields[i].type == "picklist") {
                    paymentPicklistValueMap[PayFields[i].name] = [];
                    for(var j = 0; j < PayFields[i].picklistValues.length; j++) {
                        if(PayFields[i].picklistValues[j].active == 'true') {
                            paymentPicklistValueMap[PayFields[i].name].push([PayFields[i].picklistValues[j].label, PayFields[i].picklistValues[j].label]);
                        }
                    }
                }
            }
    
            var InstFieldLabelMap = {};
            var InstFields = sforce.connection.describeSObject("causeview__Installment__c").fields;    //.getFields();
            for(var i = 0; i < InstFields.length; i++) {
                InstFieldLabelMap[InstFields[i].name] = InstFields[i].label;
            }
    
            var PledgeContainerWidth = (width * 0.7) + 30;
    
            Ext.define('Ext.cv.GiftBatch.PledgeContainer', {
                extend: 'Ext.container.Container',
                id: 'pledge-container',
                layout: {
                    type: 'vbox'
                },
                width: PledgeContainerWidth,
                maxHeight: 800,
                minHeight: 500,
    
                defaults: {
                    style: {
    //                    padding: '10px'
                    }
                },
                items: [{
                    xtype: 'form',
                    title: 'Payment',
                    id: 'pledge-payment',
                    layout: 'column',
                    width: PledgeContainerWidth,
                    bodyPadding: '10 0 10 10',
                    margin: '0 0 10 0',
                    border: 1,
                    autoScroll:true,
                    collapsible: false,
                    frame: true,
                    style: {
                              borderStyle: 'solid',
                              borderWidth: 'medium'
                          },
                
                    fieldDefaults: {
                        labelAlign: 'right',
                        labelWidth: (PledgeContainerWidth/5) - 0,
                        msgTarget: 'side'
                    },
                    items: [{
                        xtype: 'container',
                        defaults: {
                            anchor: '100%',
                        },
                        layout:'column',
                        items:[{
                            xtype: 'container',
                            columnWidth:.6,
                            layout: 'anchor',
                            defaults: {
                                anchor: '100%',
                            },
                            items: [
                                { xtype: 'displayfield', fieldLabel: PaymentFieldLabelMap.causeview__Donation__c , name: 'causeview__Donation__c', inputAttrTpl: ' data-qtip="Read Only" ' },
                                { xtype: 'customnumberfield', vtype: 'Currency',minValue: 0.00, allowDecimals: true, decimalPrecision: 2, fieldLabel: PaymentFieldLabelMap.causeview__Amount__c , name: 'causeview__Amount__c', allowBlank: false, },
                                { xtype: 'combobox', fieldLabel: PaymentFieldLabelMap.causeview__Credit_Card_Type__c , name: 'causeview__Credit_Card_Type__c',
                                    id: 'causeview__Credit_Card_Type__c', hidden: true, store: paymentPicklistValueMap.causeview__Credit_Card_Type__c, allowBlank: false, },
                                { xtype: 'textfield', fieldLabel: 'Credit Card Expiry' , name: 'Expiry_Date__x', id: 'Expiry_Date__x', hidden: true, allowBlank: false, maxLength: 4,
                                    regex: new RegExp("^[0-9]*$") },
                                { xtype: 'textfield', fieldLabel: PaymentFieldLabelMap.causeview__Cheque_Num__c , name: 'causeview__Cheque_Num__c', id: 'causeview__Cheque_Num__c',
                                    hidden: true, allowBlank: false, },
                                { xtype: 'textfield', fieldLabel: PaymentFieldLabelMap.causeview__Account_Number__c , name: 'causeview__Account_Number__c', id: 'causeview__Account_Number__c',
                                    hidden: true, allowBlank: false, },
                                { xtype: 'textfield', fieldLabel: PaymentFieldLabelMap.causeview__Routing_Branch_Number__c , name: 'causeview__Routing_Branch_Number__c',
                                    id: 'causeview__Routing_Branch_Number__c', hidden: true, allowBlank: false, },
                                { xtype: 'textarea', fieldLabel: PaymentFieldLabelMap.causeview__Description__c , name: 'causeview__Description__c', id: 'causeview__Description__c', hidden: true, },
                            ],
                        },{
                            xtype: 'container',
                            columnWidth:.6,
                            layout: 'anchor',
                            defaults: {
                                anchor: '100%',
                                listeners: {
                                    change: function(field, newVal, oldVal) {
                                        if(field.name == 'causeview__Payment_Type__c' && !isEmptyOrNullOrUndefined(newVal)) {
                                            try {var PledgePaymentTypeList =Object.keys(PledgePaymentTypeFieldMap); //['Credit Card','Credit Card - Offline','Cheque','Check','Cash','ACH/PAD','Stock','Property','In Kind','Other'];
                                                if(PledgePaymentTypeList.indexOf(newVal) == -1 ) {newVal='Other';}
                                            
                                                var pledgePaymentForm = Ext.getCmp('pledge-payment');
                                                for(var i = 0; i < 2; i++) {
                                                    for(var j = 0; j < pledgePaymentForm.items.items[0].items.items[i].items.items.length; j++) {
                                                        if(PledgePaymentTypeFields.indexOf(pledgePaymentForm.items.items[0].items.items[i].items.items[j].name) != -1) {
                                                            if(PledgePaymentTypeFieldMap[newVal].indexOf(pledgePaymentForm.items.items[0].items.items[i].items.items[j].name) == -1) {
                                                                Ext.getCmp(pledgePaymentForm.items.items[0].items.items[i].items.items[j].name).hide();
                                                            } else {
                                                                Ext.getCmp(pledgePaymentForm.items.items[0].items.items[i].items.items[j].name).show();
                                                            }
                                                        }
                                                    }
                                                }
                                            } catch(err) {
                                                var x = err;
                                                //do nothing
                                            }
                                        }
                                    },
                                },
                            },
                            items: [
                                { xtype: 'datefield', fieldLabel: PaymentFieldLabelMap.causeview__Date__c , name: 'causeview__Date__c', allowBlank: false, },
                                { xtype: 'combobox', fieldLabel: PaymentFieldLabelMap.causeview__Payment_Type__c , name: 'causeview__Payment_Type__c', store: paymentTypePicklistValues, allowBlank: false, },
                                { xtype: 'customnumberfield', minValue: 0, allowDecimals: false, fieldLabel: PaymentFieldLabelMap.causeview__Amount__c , name: 'gridStoreIndex', allowBlank: false, hidden: true, },
                                { xtype: 'textfield', fieldLabel: PaymentFieldLabelMap.causeview__Credit_Card_Number__c , name: 'causeview__Credit_Card_Number__c',
                                    id: 'causeview__Credit_Card_Number__c', hidden: true, allowBlank: false, },
                                { xtype: 'textfield', fieldLabel: 'CVV' , name: 'Security_Code__x', id: 'Security_Code__x', hidden: true, },
                                { xtype: 'datefield', fieldLabel: PaymentFieldLabelMap.causeview__Cheque_Date__c , name: 'causeview__Cheque_Date__c', id: 'causeview__Cheque_Date__c',
                                    hidden: true, allowBlank: false, },
                                { xtype: 'combobox', fieldLabel: PaymentFieldLabelMap.causeview__Account_Type__c , name: 'causeview__Account_Type__c', id: 'causeview__Account_Type__c',
                                    hidden: true, store: paymentPicklistValueMap.causeview__Account_Type__c, allowBlank: false, },
                                { xtype: 'datefield', fieldLabel: PaymentFieldLabelMap.causeview__Date_Deposited__c , name: 'causeview__Date_Deposited__c', id: 'causeview__Date_Deposited__c',
                                    hidden: true, allowBlank: false, },
                                { xtype: 'combobox', fieldLabel: PaymentFieldLabelMap.causeview__Status__c , name: 'causeview__Status__c', id: 'causeview__Status__c', hidden: true,
                                    store: paymentPicklistValueMap.causeview__Status__c, allowBlank: false, },
                            ],
                        }]
                    }],
                },{
                    xtype: 'gridpanel',
                    selType: 'cellmodel',
                    columnLines: true,
                    autoScroll: true,
                    singleSelect: true,
                    selType: 'cellmodel',
                    border: true,
                    store: pledgeInstStore,
                    plugins: [
                            Ext.create('Ext.grid.plugin.CellEditing', {
                                                clicksToEdit : 1
                                            }),
                        ],
                    columns: [
                        { text: 'Name',  dataIndex: 'causeview__Account_Contact__c', flex: 0.3 },    //, width: PledgeContainerWidth/7
                        { text: 'Installment', dataIndex: 'name', flex: 0.3 },    //, flex: 1
                        { text: InstFieldLabelMap['causeview__Installment_Amount__c'], dataIndex: 'causeview__Installment_Amount__c', flex: 0.3, renderer:  Ext.util.Format.usMoney , },
                        { text: InstFieldLabelMap['causeview__Installment_Balance__c'], dataIndex: 'causeview__Installment_Balance__c', flex: 0.3, renderer:Ext.util.Format.usMoney, },
                        { text: 'Transaction', dataIndex: 'causeview__Pledge__c', flex: 0.3 },
                        { text: InstFieldLabelMap['causeview__Installment_Date__c'], dataIndex: 'causeview__Installment_Date__c', flex: 0.3, xtype: 'datecolumn', },
                        { text: 'Fulfillment Amount',dataIndex: 'fulfillment_Amount', flex: 0.3, editor: {xtype: 'customnumberfield', repeatTriggerClick : false, vtype: 'Currency'} },
                    ],
                    title: 'Open Installment List',
                    maxHeight: 470,
                    minHeight: 365,    //365,
                    width: PledgeContainerWidth,
                    tbar: [getEditor1(
                        {
                            fieldName: 'pledge_donor_lookup',
                            fieldLable: 'Account/Contact',
                            fieldType: 'REFERENCE',
                            id: 'pledge_donor_lookup',
                            sObjectType: {attributes: {type: 'causeview__Installment__c'}},
                        },
                        true,
                        ''
                    )],
                    fbar: [{
                            text: 'Submit',
                            scope: this,
                            //cls: 'add-batch-item',
                            //id: 'addBatchItemId',
                            handler: function(a, b, c) {
                                myMask.show();
                                window.setTimeout(function() {
                                   //try {
                                        j$('.custPopupPledge').find('.error-msg').remove();
                                        var x = pledgeInstStore;
                                        var pledgeContainer = Ext.getCmp('pledge-container');
                                        var PledgeFormVal = pledgeContainer.items.items[0].getForm().getFieldValues();
                                        var storeData = store.getAt(PledgeFormVal.gridStoreIndex).data;
                                         var re=/^\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/ ;
                                        //--------------    Create Payments    -------------
                                        
                                        var pledgePayment = new sforce.SObject("causeview__Payment__c");
                                        //pledgePayment['causeview__Amount__c'] = PledgeFormVal['causeview__Amount__c'];
                                         var customPledgePaymentAMount=PledgeFormVal['causeview__Amount__c'];
                                        if(! isEmptyOrNullOrUndefined(customPledgePaymentAMount) )
                                        {
                                          if(!re.test(customPledgePaymentAMount)) 
                                              {
                                              j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b>  Enter Valid Amount  ' + ' for field  Payment Amount'+ ' </b></div>');                         
                                               myMask.hide();
                                               return;
                                              }
                                              else{
                                               customPledgePaymentAMount=customPledgePaymentAMount.replace(/[$,]/g, '');
                                               customPledgePaymentAMount= parseFloat(customPledgePaymentAMount); 
                                                pledgePayment['causeview__Amount__c'] =customPledgePaymentAMount; }
                                         } 
                                         
                                       // pledgePayment['causeview__Amount__c'] = PledgeFormVal['causeview__Amount__c'];
                                        pledgePayment['causeview__Date__c'] = PledgeFormVal['causeview__Date__c'];
                                        pledgePayment['causeview__Payment_Type__c'] = PledgeFormVal['causeview__Payment_Type__c'];
                                        //pledgePayment['causeview__Donation__c'] = pledgeInstStore.data.items[0].data.causeview__Pledge__c_Id;
                                        //pledgePayment['id'] = storeData.Pay_id;
    
                                        if(!pledgeContainer.items.items[0].isValid()) {
                                            if(isEmptyOrNullOrUndefined(PledgeFormVal['causeview__Amount__c'])) {
                                                if(PledgeFormVal['causeview__Amount__c'] == 0) {
                                                    j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b> Payment Amount Cannot be Zero. </b></div>');
                                                } else {
                                                    j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b> Missing Required Fields. </b></div>');
                                                }
                                                myMask.hide();
                                                return;
                                            }
                                            if(isEmptyOrNullOrUndefined(PledgeFormVal['causeview__Payment_Type__c']) || isEmptyOrNullOrUndefined(PledgeFormVal['causeview__Date__c']))
                                             {
                                                j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b> Missing Required Fields. </b></div>');
                                                myMask.hide();
                                                return;
                                            }
                                            var PledgePaymentTypeList1 = Object.keys(PledgePaymentTypeFieldMap);
                                            console.log(PledgePaymentTypeList1);
                                            var CustomPicklistField=PledgeFormVal['causeview__Payment_Type__c'];
                                            if(PledgePaymentTypeList1.indexOf(CustomPicklistField)== -1) 
                                             {
                                              CustomPicklistField='Other';
                                             }
                                            
                                            
                                            
                                            //var pFields = PledgePaymentTypeFieldMap[PledgeFormVal['causeview__Payment_Type__c']].split(',');
                                            var pFields = PledgePaymentTypeFieldMap[CustomPicklistField].split(',');
                                            for(var i = 0; i < pFields.length; i++) {
                                                if(!isEmptyOrNullOrUndefined(pFields[i].trim()) && PledgePaymentTypeReqFields.indexOf(pFields[i].trim()) != -1 && isEmptyOrNullOrUndefined(PledgeFormVal[pFields[i].trim()])) {
                                                    j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b> Missing Required Fields. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }
                                                if('Expiry_Date__x,Security_Code__x'.indexOf(pFields[i].trim()) == -1) {
                                                    pledgePayment[pFields[i].trim()] = PledgeFormVal[pFields[i].trim()];
                                                }
                                            }
                                            if(PledgeFormVal['causeview__Payment_Type__c'] == 'Credit Card') {
                                                var expiry = '' + PledgeFormVal['Expiry_Date__x'];
                                                if(expiry.length != 4){
                                                    j$(".custPopupPledge").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date Field should be of 4 digits. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }else
                                                if(isNaN(parseInt(expiry.substring(0, 1))) || isNaN(parseInt(expiry.substring(1, 2))) || isNaN(parseInt(expiry.substring(2, 3))) || isNaN(parseInt(expiry.substring(3, 4)))){
                                                    j$(".custPopupPledge").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date should be numeric value. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }else
                                                if(parseInt(expiry.substring(0, 2)) < 1 || parseInt(expiry.substring(0, 2)) > 12){
                                                    j$(".custPopupPledge").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date month should be between 01 and 12. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }
                                            }
                                        }
                                        
                                        var transactionsIds = [];
                                            for(var i = pledgeInstStore.data.items.length-1; i >= 0 ; i--) {
                                            var InstStoreData = pledgeInstStore.data.items[i].data;
                                            
                                            var customfulfillmentAmount=pledgeInstStore.data.items[i].data['fulfillment_Amount'];
                                            if(!isEmptyOrNullOrUndefined(customfulfillmentAmount))
                                              {                               
                                                if(!re.test(customfulfillmentAmount))
                                                  {
                                                   j$("#gridSpace").prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) +' for field  FulfillmentAmount' +' </b></div>');                         
                                                   myMask.hide();
                                                    return;
                                                  }
                                                else{
                                                 customfulfillmentAmount=customfulfillmentAmount.replace(/[$,]/g, '');
                                                 customfulfillmentAmount= parseFloat(customfulfillmentAmount); 
                                                  
                                                 }
                                               } 
                                           
                                            
                                            if(isEmptyOrNullOrUndefined(customfulfillmentAmount) || customfulfillmentAmount == 0) {
                                              instCount++;                                            
                                                continue;
                                            }
    
                                            //----------------- Validation -----------------
                                            if(InstStoreData.causeview__Installment_Balance__c < customfulfillmentAmount) {
                                                j$('.custPopupPledge').prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b> Fulfillment Amount should not be greater than Installment Balance at row no : ' + (i + 1) + '</b></div>');
                                                myMask.hide();
                                                return;
                                            }
                                            
                                            transactionsIds.push(InstStoreData.causeview__Pledge__c_Id);
                                            if(isEmptyOrNullOrUndefined (pledgePayment['causeview__Donation__c'])){
                                                pledgePayment['causeview__Donation__c']= InstStoreData.causeview__Pledge__c_Id;
                                            }
                                        }
    
                                        var pledgePayCreateResult;
                                        var tranUpdateRes;
                                        var pledgePaymentUIFields = {};
                                        pledgePaymentUIFields['CCNumber'] = pledgePayment['causeview__Credit_Card_Number__c'];
                                        pledgePaymentUIFields['ACHAccountNo'] = pledgePayment['causeview__Account_Number__c'];
                                        pledgePaymentUIFields['Pay_Expiry_Date__x'] = PledgeFormVal['Expiry_Date__x'];
                                        pledgePaymentUIFields['Pay_Security_Code__x'] = PledgeFormVal['Security_Code__x'];
                                        pledgePaymentUIFields['isNewRecord'] = 'Existing';
    
                                        if('Credit Card'.indexOf(pledgePayment.causeview__Payment_Type__c) !== -1) {
                                        //Mask CC Number
                                            var masked_cc_number = maskCCNumber(pledgePayment['causeview__Credit_Card_Number__c'], 4);
                                            pledgePayment.causeview__Credit_Card_Number__c = masked_cc_number;
                                        }
                                        if('ACH/PAD'.indexOf(pledgePayment.causeview__Payment_Type__c) !== -1) {
                                        //Mask ACH Account Number Number
                                            var masked_acc_number = maskCCNumber(pledgePayment['causeview__Account_Number__c'], 2);
                                            pledgePayment.causeview__Account_Number__c = masked_acc_number;
                                        }
                                        
                                        // shri. new code for payment splitting. story-  cv pledge(98457186)
                                        
                                        var splittedPayments = [];
                                        var instPaymentMap = {};
                                        var totalInstFulfillAmt = 0;
                                        var instCount = 0;
                                        var tran = new sforce.SObject("causeview__Gift__c");
                                        var submitSuccess = true;
                                        tran['id'] = pledgePayment['causeview__Donation__c'];
                                        
                                        for(var i = pledgeInstStore.data.items.length-1; i >= 0 ; i--) {
                                            var InstStoreData = pledgeInstStore.data.items[i].data;
                                            
                                            var customfulfillmentAmount=pledgeInstStore.data.items[i].data['fulfillment_Amount'];
                                            if(!isEmptyOrNullOrUndefined(customfulfillmentAmount))
                                              {                               
                                                if(!re.test(customfulfillmentAmount))
                                                  {
                                                   j$("#gridSpace").prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) +' for field  FulfillmentAmount' +' </b></div>');                         
                                                   myMask.hide();
                                                    return;
                                                  }
                                                else{
                                                 customfulfillmentAmount=customfulfillmentAmount.replace(/[$,]/g, '');
                                                 customfulfillmentAmount= parseFloat(customfulfillmentAmount); 
                                                  
                                                 }
                                               } 
                                           
                                            
                                            if(isEmptyOrNullOrUndefined(customfulfillmentAmount) || customfulfillmentAmount == 0) {
                                              instCount++;                                            
                                                continue;
                                            }
    
                                            //----------------- Validation ----------------- 
                                            if(InstStoreData.causeview__Installment_Balance__c < customfulfillmentAmount) {
                                                j$('.custPopupPledge').prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b> Fulfillment Amount should not be greater than Installment Balance at row no : ' + (i + 1) + '</b></div>');
                                                myMask.hide();
                                                return;
                                            }
                                            
                                            var payment = new sforce.SObject("causeview__Payment__c");
                                            payment['causeview__Amount__c'] =customfulfillmentAmount;
                                            payment['causeview__Date__c'] = pledgePayment['causeview__Date__c'];
                                            payment['causeview__Payment_Type__c'] =pledgePayment['causeview__Payment_Type__c'];
                                            payment['causeview__Donation__c'] = InstStoreData.causeview__Pledge__c_Id;
                                            payment['causeview__Status__c'] = pledgePayment['causeview__Status__c'] || 'Approved'; ;
                                            payment['causeview__Date_Deposited__c'] = pledgePayment['causeview__Date_Deposited__c'] || new Date();; 
                                            payment['causeview__Cheque_Num__c'] = pledgePayment['causeview__Cheque_Num__c'];
                                            payment['causeview__Cheque_Date__c'] = pledgePayment['causeview__Cheque_Date__c'];
                                            payment['causeview__Description__c'] = pledgePayment['causeview__Description__c'];
                                            if('Credit Card'.indexOf(payment.causeview__Payment_Type__c) !== -1) {
                                                //Mask CC Number                                            
                                                payment['causeview__Credit_Card_Number__c'] = pledgePayment['causeview__Credit_Card_Number__c'];
                                                payment['causeview__Credit_Card_Type__c'] = pledgePayment['causeview__Credit_Card_Type__c'];                        
                                                
                                            }
                                            if('ACH/PAD'.indexOf(pledgePayment.causeview__Payment_Type__c) !== -1) {
                                                //Mask ACH Account Number Number                                        
                                                payment['causeview__Account_Number__c'] = pledgePayment['causeview__Account_Number__c'];                                            
                                            }                                   
                                            
                                            
                                        
                                        
                                        var pledgePaymentUIFieldsMap = {};
                                            pledgePaymentUIFieldsMap[payment['causeview__Donation__c']] = pledgePaymentUIFields;
                                        
                                            var submitPaymentResult = null;
                                            var transactionResults = null;
                                    
                                            if('Credit Card,ACH/PAD'.indexOf(payment.causeview__Payment_Type__c) !== -1) {
                                                try {
                                                    submitPaymentResult = sforce.apex.execute('causeview.BatchProcessingController' ,'submitPayment1',{giftBatchId: giftBatchId, giftPaymentUIFieldsMap: JSON.stringify(pledgePaymentUIFieldsMap) });
                                                } catch(err) {
                                                    j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Submitting Payment. : '+ err.message + err.faultstring + ' </b></div>');
                                                    submitSuccess = false;
                                                }
                                                if(submitPaymentResult != null) {
                                                    transactionResults = JSON.parse(submitPaymentResult);
                                                    if(submitPaymentResult != null && transactionResults != null && transactionResults[0] != null) {
                                                        payment.causeview__Authorization__c = transactionResults[0].ApprovalCode;
                                                        if(transactionResults[0].TransactionId != -1) {
                                                            payment.causeview__CC_Reference__c = transactionResults[0].TransactionId;
                                                        }
                                                        payment.causeview__Status__c = transactionResults[0].TransactionStatus == null || transactionResults[0].TransactionStatus != 'success' ? 'Declined' : 'Approved';
                                                        payment.causeview__CC_Transaction_Date__c = new Date();
                                                        if (transactionResults[0].Errors != null)
                                                        {
                                                            if(transactionResults[0].Errors.ErrorMessages != null &&  transactionResults[0].Errors.ErrorMessages.length > 0)
                                                            {
                                                                    //payment.causeview__StatusComment__c = transactionResults[0].Errors.ErrorMessages[0].Error;
                                                                     payment.causeview__StatusComment__c = 'REJ' + transactionResults[0].Errors.ErrorMessages[0].ErrorCode+ ': '+transactionResults[0].Errors.ErrorMessages[0].Error;
                                                            }
                                                        }
                                                        else
                                                        {
                                                                payment.causeview__StatusComment__c = 'Approved.  Transaction Number: ' + transactionResults[0].TransactionId;
                                                        }
                    
                                                        if (transactionResults[0].TransactionStatus == null || transactionResults[0].TransactionStatus != 'success')
                                                        {
                                                            submitSuccess = false;
                                                            tran.causeview__Batch_Status__c = 'Failed';
                                                            tran.causeview__Status__c = 'Cancelled';
                                                            if(transactionResults[0].Errors != null && transactionResults[0].Errors.ErrorMessages != null &&  transactionResults[0].Errors.ErrorMessages.length > 0) {
                                                                j$(".custPopupPledge").prepend('<div class="payment-processing-error-msg error-msg" style="color: red;"><b> Error in Processing the Payment : ' + transactionResults[0].Errors.ErrorMessages[0].Error + '</b></div>');
                                                            } else {
                                                                j$(".custPopupPledge").prepend('<div class="payment-processing-error-msg error-msg" style="color: red;"><b> Error in Processing the Payment. </b></div>');
                                                            }
                                                        } 
                                                        else
                                                        {
                                                            payment.causeview__Status__c = 'Approved';
                                                            tran.causeview__Batch_Status__c = 'Committed';
                                                            tran.causeview__Reference__c = transactionResults[0].RecurringProfileId;
                                                        }
                                                    }
                                                    else {
                                                        //Handle no response to payment
                                                        payment.causeview__Status__c = 'Declined';
                                                        tran.causeview__Status__c = 'Cancelled';
                                                        tran.causeview__Batch_Status__c = 'Failed';
                                                        payment.causeview__StatusComment__c = 'Could not connect to Payment Gateway';
                                                        j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Could not connect to Payment Gateway.  </b></div>'+ payment.causeview__StatusComment__c);
                                                        submitSuccess = false;
                                                    }
                                                }
                                                if(!submitSuccess) {
                                                    break;
                                                }
                                            }
                                            splittedPayments.push(payment);
                                            instPaymentMap[InstStoreData.id]=payment;
                                            totalInstFulfillAmt += customfulfillmentAmount;
                                                                                    
                                        }
                                        totalInstFulfillAmt =totalInstFulfillAmt.toFixed(2);
                                        if(parseFloat(totalInstFulfillAmt) != parseFloat(pledgePayment['causeview__Amount__c']) && submitSuccess) {
                                            j$('.custPopupPledge').prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b> Sum of all the Fulfillment Amount should be equal to Payment Amount. </b></div>');
                                            myMask.hide();
                                            return;
                                        }
                                        if(instCount == pledgeInstStore.data.items.length) {
                                            j$('.custPopupPledge').prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b> Populate any of the Open Installment\'s Fulfillment Amount. </b></div>');
                                            myMask.hide();
                                            return;
                                        }
                                            
                                            
                                        var transUpdateForGiftBatch = [];
                                        var tranResultRecords = sforce.connection.query('select id, causeview__GiftBatch__c from  causeview__Gift__c  where id in (\''+transactionsIds.join('\',\'')+'\') ');
                                        var tranResult= tranResultRecords.getArray("records");
                                        for(var i=0; i<tranResult.length; i++){
                                            tranResult[i]['causeview__Status__c'] = tran['causeview__Status__c'];
                                            tranResult[i]['causeview__Batch_Status__c'] = tran['causeview__Batch_Status__c'];
                                            tranResult[i]['causeview__Reference__c'] = tran['causeview__Reference__c']; 
                                            if(isEmptyOrNullOrUndefined (tranResult[i]['causeview__GiftBatch__c']))
                                            { 
                                                tranResult[i]['causeview__GiftBatch__c'] = giftBatchId;
                                                                                    
                                            }
                                            else
                                            {
                                                if(tranResult[i]['causeview__GiftBatch__c'] != giftBatchId ){
                                                     j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Transaction belong to differerent Gift Batch.Select any other Transaction Record '+'</b></div>');
                                                    myMask.hide();
                                                    return;
                                                }
                                            }
                                                transUpdateForGiftBatch.push(tranResult[i]);
                                        }
                                        
                                        try{
                                            tranUpdateRes = sforce.connection.update(transUpdateForGiftBatch);                                      
                                        }catch(err) 
                                        {
                                         j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while updating Transaction.' + err.message + err.faultstring +'</b></div>');
                                         myMask.hide();
                                         return;
                                        }if(tranUpdateRes[0] === undefined) {
                                                j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in updating Transaction Record. </b></div>');
                                                myMask.hide();
                                                return;
                                        }
                                        else if(tranUpdateRes[0].success != 'true') {
                                                j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in updating Transaction Record :  ' + tranUpdateRes[0].errors.message + '</b></div>');
                                                myMask.hide();
                                                return;
                                        }
                                        
                                          
                                        if(!submitSuccess) {
                                            try{  
                                                pledgePayment.causeview__Status__c = 'Declined';
                                                pledgePayment.causeview__StatusComment__c = 'Could not connect to Payment Gateway';                                     
                                                pledgePayCreateResult = sforce.connection.upsert('Id', [pledgePayment]);
                                            }catch(err) 
                                            {
                                                 j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Payment.' + err.message + err.faultstring +'</b></div>');
                                                 myMask.hide();
                                                 return;
                                            }if(pledgePayCreateResult[0] === undefined) {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Payment Record. </b></div>');
                                                    myMask.hide();
                                                    return;
                                            }
                                            else if(pledgePayCreateResult[0].success != 'true') {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Payment Record :  ' + pledgeTranCreateResult[0].errors.message + '</b></div>');
                                                    myMask.hide();
                                                    return;
                                            } else
                                            {
                                                pledgePayment['id'] = pledgePayCreateResult[0].id;
                                            } 
                                            populateBatchItems(storeData, [pledgePayment]);
                                            myMask.hide();
                                            return;
                                        }                                         
                                        
                                        var spilttedPaymentsCreateResult;
                                        try{
                                                spilttedPaymentsCreateResult = sforce.connection.create(splittedPayments);
                                            } 
                                        catch(err){
                                                j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating payment record. </b></div>');
                                                myMask.hide();
                                                return;
                                            }
                                        for(var i=0; i<splittedPayments.length; i++) {
                                            if(spilttedPaymentsCreateResult[i] === undefined) {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating payment Record. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }
                                                else if(spilttedPaymentsCreateResult[i].success != 'true') {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating payment Record :  ' + spilttedPaymentsCreateResult[i].errors.message + '</b></div>');
                                                    myMask.hide();
                                                    return;
                                                } else
                                                {
                                                    splittedPayments[i]['id'] = spilttedPaymentsCreateResult[i]['id']; 
                                                }
                                            }
                                         
                                               
    
                                        var InstallmentMap = {};
                                        
                                        
                                        var softCreditInstFulfillAmt = 0;
                                        var pledgeTranToCreate;
                                        var instFulfills = [];
                                        var installmentIds = [];
                                        var instFulfillAmountMap = {};
                                        
                                        
    
                                        for(var i = 0; i < pledgeInstStore.data.items.length ; i++) {
                                            var InstStoreData = pledgeInstStore.data.items[i].data;
                                            
                                            var customfulfillmentAmount=pledgeInstStore.data.items[i].data['fulfillment_Amount'];
                                            if(!isEmptyOrNullOrUndefined(customfulfillmentAmount))
                                              {                               
                                                if(!re.test(customfulfillmentAmount))
                                                  {
                                                   j$("#gridSpace").prepend('<div class="pledge-validation1-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) +' for field  FulfillmentAmount' +' </b></div>');                         
                                                   myMask.hide();
                                                    return;
                                                  }
                                                else{
                                                 customfulfillmentAmount=customfulfillmentAmount.replace(/[$,]/g, '');
                                                 customfulfillmentAmount= parseFloat(customfulfillmentAmount); 
                                                  
                                                 }
                                               } 
                                           
                                            
                                            if(isEmptyOrNullOrUndefined(customfulfillmentAmount) || customfulfillmentAmount == 0) {
                                                                                       
                                                continue;
                                            }
                                                                    
                                          
                                            var instFulfill = new sforce.SObject("causeview__Installment_Fulfillment__c");
                                            instFulfill['causeview__Installment__c'] = InstStoreData.id;
                                            instFulfill['causeview__Fulfillment_Amount__c'] = customfulfillmentAmount;
                                            instFulfill['causeview__Payment__c'] = instPaymentMap[InstStoreData.id]['id'];
                                            
                                        
                                            var softCredit;
                                        
                                            installmentIds.push(InstStoreData.id);
                                        
                                            instFulfillAmountMap[InstStoreData.id] = customfulfillmentAmount;
                                            
                                            instFulfills.push(instFulfill);
                                        }
                               
    
                                        //--------------- Payment applied to  Installments from   multiple    transactions    - same  donor    ----------
                                        
                                        //----------------- Create Transaction -----------------
                                        
                                        /*var allocs = getInstAllocs(installmentIds);*/                                  
                                        var  allocsRecords =sforce.connection.query('Select id, causeview__Installment__c, causeview__Amount__c, causeview__Allocation_Date__c, causeview__Campaign__c, causeview__New_Campaign__c, causeview__Gift__c, causeview__Fund__c, causeview__GL_Auto_Credit_Account__c, causeview__GL_Auto_Debit_Account__c, causeview__Payment__c from causeview__Gift_Detail__c WHERE causeview__Installment__c in (\''+installmentIds.join('\',\'')+'\') ');
                                        var instToAllocationMap = {};
                                        var   allocs= allocsRecords.getArray("records");
                                        for(var i=0; i<allocs.length;i++){
                                            if(allocs[i]['causeview__Amount__c'] > 0 && (allocs[i]['causeview__Payment__c'] == '' || allocs[i]['causeview__Payment__c'] == undefined))
                                                instToAllocationMap[allocs[i]['causeview__Installment__c']] = allocs[i];
                                        }
                                        
                                        
                                        
                                       /*else {*/
                                            
                                            
                                            //var payUpdateRes = sforce.connection.update([pledgePayment]);
                                            
    
                                            var instFulCreateResult;
                                            try 
                                            {
                                                instFulCreateResult = sforce.connection.create(instFulfills);
                                            } catch(err) 
                                            {
                                                j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Installment Fulfillment. </b></div>');
                                                myMask.hide();
                                                return;
                                            }   
                                            for(var i=0; i<instFulfills.length; i++) {
                                                if(instFulCreateResult[i] === undefined) {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Installment Fulfillment Record. </b></div>');
                                                    myMask.hide();
                                                    return;
                                                }
                                                else if(instFulCreateResult[i].success != 'true') {
                                                    j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Installment Fulfillment Record :  ' + instFulCreateResult[i].errors.message + '</b></div>');
                                                    myMask.hide();
                                                    return;
                                                } else
                                                {
                                                    //success
                                                }
                                            }
    
    
                                            var allocsToCreate = [];
                                            for (var key in instToAllocationMap) {
                                                var instFulfillAllocPositive = new sforce.SObject("causeview__Gift_Detail__c");
                                                var instFulfillAllocNegative= new sforce.SObject("causeview__Gift_Detail__c");
                                                
                                                
                                                for(var key1 in instToAllocationMap[key]) {
                                                    if('type,Id,causeview__GL_Auto_Credit_Account__c,causeview__GL_Auto_Debit_Account__c,causeview__Installment__c'.indexOf(key1) == -1) {
                                                        instFulfillAllocPositive[key1] = instToAllocationMap[key][key1];
                                                    }
                                                }
                                                instFulfillAllocPositive['causeview__GL_Auto_Credit_Account__c'] = instToAllocationMap[key]['causeview__GL_Auto_Debit_Account__c'];
                                                instFulfillAllocPositive['causeview__GL_Auto_Debit_Account__c'] = instToAllocationMap[key]['causeview__GL_Auto_Credit_Account__c'];
                                                instFulfillAllocPositive['causeview__Amount__c'] =instFulfillAmountMap[key];                                             
                                                instFulfillAllocPositive['causeview__Installment__c'] = null;
                                                instFulfillAllocPositive['causeview__Payment__c'] = instPaymentMap[key].id;
                                                //instFulfillAllocPositive['causeview__Allocation_Date__c'] = instToAllocationMap[key]['causeview__Allocation_Date__c'];                                            
                                                allocsToCreate.push(instFulfillAllocPositive);
                                                
                                                for(var key1 in instToAllocationMap[key]) {
                                                    if('type,Id,causeview__GL_Auto_Credit_Account__c,causeview__GL_Auto_Debit_Account__c,causeview__Installment__c'.indexOf(key1) == -1) {
                                                        instFulfillAllocNegative[key1] = instToAllocationMap[key][key1];
                                                    }
                                                }
                                                instFulfillAllocNegative['causeview__GL_Auto_Credit_Account__c'] = instToAllocationMap[key]['causeview__GL_Auto_Debit_Account__c'];
                                                instFulfillAllocNegative['causeview__GL_Auto_Debit_Account__c'] = instToAllocationMap[key]['causeview__GL_Auto_Credit_Account__c'];
                                                instFulfillAllocNegative['causeview__Amount__c'] =0-instFulfillAmountMap[key];                                             
                                                instFulfillAllocNegative['causeview__Installment__c'] = key;
                                                instFulfillAllocNegative['causeview__Payment__c'] = null;
                                                allocsToCreate.push(instFulfillAllocNegative);  
                                                                                
                                            }
            
    
    
                                            var instFulAlocCreateResult;
                                            try 
                                            {
                                                instFulAlocCreateResult = sforce.connection.create(allocsToCreate);
                                            } catch(err) 
                                            {
                                                j$(".custPopupPledge").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Installment Fulfillment Allocation. </b></div>');
                                                myMask.hide();
                                                return;
                                            }   
                                            for(var i=0; i<allocsToCreate.length; i++) {
                                                if(instFulAlocCreateResult[i] === undefined) {
                                                        j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Installment Fulfillment Allocation Record. </b></div>');
                                                        myMask.hide();
                                                        return;
                                                }
                                                else if(instFulAlocCreateResult[i].success != 'true') {
                                                        j$(".custPopupPledge").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Installment Fulfillment Allocation Record :  ' + instFulAlocCreateResult[i].errors.message + '</b></div>');
                                                        myMask.hide();
                                                        return;
                                                } else
                                                {
                                                }
                                            }
    
    
                                        //----------------- Create Soft Credit -----------------
    
                                        /*}*/
    
    
                                    
                                        populateBatchItems(storeData, splittedPayments);                                   
                                        
    
    
                                        Ext.getCmp('pledge-container').destroy();
                                        Ext.select('.pledge-popup').remove();
    
                                        myMask.hide();
                                    
                                        store.commitChanges();
                                        Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
                                        populateReconFields();
                                    /*} catch(err) {
                                        j$('.custPopupPledge').prepend('<div class="pledge-pay-error-msg error-msg" style="color: red;"><b> Unexpected Error : ' + err.message + '</b></div>');
                                        myMask.hide();
                                    }*/
                                }, 1);
                            }
                        }, {
                            text: 'Cancel',
                            scope: this,
                            //id: 'savebatchItemId',
                            handler: function() {
                                //Ext.removeNode(Ext.select('.pledge-popup'));pledge-container
                                //Ext.select('#pledge-container').remove();
                                Ext.getCmp('pledge-container').destroy();
                                Ext.select('.pledge-popup').remove();
    
                                store.commitChanges();
                                Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
                                populateReconFields();
                            }
                    }],
                }]
            });
    
    
            //Populate Batch Items
            var populateBatchItems = function(storeData, pledgePayments) {
                var paymentIds = [];
                for(i=0;i<pledgePayments.length;i++){
                    paymentIds.push(pledgePayments[i].id);
                }
                if(isEmptyOrNullOrUndefined(pledgePayments[0]['causeview__Donation__c'])) {
                    storeData['id'] = pledgePayments[0]['causeview__Donation__c'];
                    storeData['Gift_id'] = pledgePayments[0]['causeview__Donation__c'];
                    //storeData['Gift_Name'] = PledgeFormVal['causeview__Donation__c'];
                }
                var tResult;
                try {
                    tResult = sforce.connection.query('Select id ' + transnQueryFields +
                                                                ', (Select Id ' + paymentQueryFields + ' From causeview__Recurring_Payments__r)' +
                                                                ', (Select Id ' + allocQueryFields + ' From causeview__Gift_Allocations__r Where causeview__Payment__c in (\''+paymentIds.join('\',\'')+'\'))' +
                                                                ', (Select Id ' + receiptQueryFields + ' From causeview__Receipts__r)' +
                                                                ', (Select Id, causeview__Custom_Amount__c, causeview__Solicitor__c, causeview__Solicitor__r.Id, causeview__Solicitor__r.Name, ' +
                                                                'causeview__Organization_Solicitor__c, causeview__Organization_Solicitor__r.Id, causeview__Organization_Solicitor__r.Name, ' +
                                                                'causeview__Role__c From causeview__Soft_Credits__r)' +
                                                                ' From causeview__Gift__c Where id = \'' + pledgePayments[0]['causeview__Donation__c'] + '\' Limit 1');
                } catch(err) {
                    j$(".custPopupPledge").prepend('<div class="transaction-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.faultstring +' </b></div>');
                }
                
                if(tResult.done == 'true' && tResult.records !== undefined) {
                    storeData['Gift_causeview__Batch_Status__c'] = tResult.records['causeview__Batch_Status__c'];
                    storeData['saved'] = true;
                    for(var j=0; j<TransactionFields.length; j++) {
                        if(TransactionFields[j].isHidden == false) {
                            if(TransactionFields[j].fieldType != 'REFERENCE') {
                                storeData['Gift_' + TransactionFields[j].fieldName] = tResult.records[TransactionFields[j].fieldName];
                                if(TransactionFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(tResult.records[TransactionFields[j].fieldName])){  
                                    storeData['Gift_' + TransactionFields[j].fieldName] = storeData['Gift_' + TransactionFields[j].fieldName].split(';');
                                }
                                if(TransactionFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(tResult.records[TransactionFields[j].fieldName])){ 
                                  storeData['Gift_' + TransactionFields[j].fieldName]= '$' + Ext.util.Format.number(storeData['Gift_' + TransactionFields[j].fieldName], '0,000.00/i');
                                }
                            } else if(tResult.records[TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                if(TransactionFields[j].fieldName.trim() == 'causeview__Letter__c') {
                                    storeData['Gift_' + TransactionFields[j].fieldName + '_Name'] = tResult.records[TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Name__c'];
                                }
                                storeData['Gift_' + TransactionFields[j].fieldName] = tResult.records[TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                storeData['Gift_' + TransactionFields[j].fieldName + '_Id'] = tResult.records[TransactionFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                            }
                        }
                    }
                    if(tResult.records.causeview__Recurring_Payments__r != null && tResult.records.causeview__Recurring_Payments__r.done == 'true' && tResult.records.causeview__Recurring_Payments__r.records !== undefined) {
                        var RecurringPayment;
                        if(parseInt(tResult.records.causeview__Recurring_Payments__r.size) == 1) {
                            RecurringPayment = tResult.records.causeview__Recurring_Payments__r.records;
                        } else if(parseInt(tResult.records.causeview__Recurring_Payments__r.size) > 1) {
                            RecurringPayment = tResult.records.causeview__Recurring_Payments__r.records[(tResult.records.causeview__Recurring_Payments__r.size) - 1];
                        }
                        storeData['Pay_id'] = RecurringPayment['Id'];
                        storeData['Pay_causeview__Status__c'] = RecurringPayment['causeview__Status__c'];
                        if(RecurringPayment['causeview__Status__c'] == 'Approved') {
                            storeData['approved'] = true;
                            storeData['Pay_Submit_to_Gateway__x'] = false;
                        }
                        //Submit to Gateway
                        if((RecurringPayment['causeview__Payment_Type__c'] == 'Credit Card' || 
                            RecurringPayment['causeview__Payment_Type__c'] == 'ACH/PAD') && 
                            RecurringPayment['causeview__Status__c'] == 'Declined')
                        {
                            storeData['Pay_Submit_to_Gateway__x'] = false;
                        }
    
                        for(var j=0; j<PaymentFields.length; j++) {
                            if(PaymentFields[j].isHidden == false) {
                                if(PaymentFields[j].fieldType != 'REFERENCE') {
                                    storeData['Pay_' + PaymentFields[j].fieldName] = RecurringPayment[PaymentFields[j].fieldName];
                                    if(PaymentFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(RecurringPayment[PaymentFields[j].fieldName])){  
                                        storeData['Pay_' + PaymentFields[j].fieldName] = storeData['Pay_' + PaymentFields[j].fieldName].split(';');
                                    }
                                    if(PaymentFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(RecurringPayment[PaymentFields[j].fieldName])){ 
                                     storeData['Pay_' + PaymentFields[j].fieldName]='$'+Ext.util.Format.number(storeData['Pay_' + PaymentFields[j].fieldName], '0,000.00/i');
                                    }
                                    
                                } else if(RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    storeData['Pay_' + PaymentFields[j].fieldName] = RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    storeData['Pay_' + PaymentFields[j].fieldName + '_Id'] = RecurringPayment[PaymentFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                    } else if(tResult.records.causeview__Recurring_Payments__r != null && tResult.records.causeview__Recurring_Payments__r.done != 'true') {
                        j$(".custPopupPledge").prepend('<div class="payment-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Payment Records.  </b></div>');
                    } else {
                        j$(".custPopupPledge").prepend('<div class="payment-fetch-error-msg error-msg" style="color: red;"><b> No Payment Records found. </b></div>');
                    }
        
                    var GiftDetails = [];
                    if(isEmptyOrNullOrUndefined(tResult.records.causeview__Recurring_Donation__c)) {
                        if(tResult.records.causeview__Gift_Allocations__r != null && tResult.records.causeview__Gift_Allocations__r.done == 'true' && tResult.records.causeview__Gift_Allocations__r.records !== undefined) {
                            if(parseInt(tResult.records.causeview__Gift_Allocations__r.size) == 1) {
                                GiftDetails.push(tResult.records.causeview__Gift_Allocations__r.records);
                            } else if(parseInt(tResult.records.causeview__Gift_Allocations__r.size) > 1) {
                                GiftDetails = tResult.records.causeview__Gift_Allocations__r.records;
                            }
                            
                        } else if(tResult.records.causeview__Gift_Allocations__r != null && tResult.records.causeview__Gift_Allocations__r.done != 'true') {
                            j$(".custPopupPledge").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> Error in Fetching Existing Allocation Records. </b></div>');
                        } else {
                            //j$(".custPopupPledge").prepend('<div class="allocation-fetch-error-msg error-msg" style="color: red;"><b> No Allocation Records found. </b></div>');
                        }
                    }
        
                    //If no Allocations or Recurring Gift Allocations, then populate empty list.
                    if(GiftDetails.length == 0) {
                        var giftDetail = {};
                        for(var fld in AllBatchItems.Records[0].GiftDetails[0]) {
                            giftDetail[fld] = null;
                        }
                        storeData.GiftDetails.push(giftDetail);
                    }
                    
                    
                    storeData.GiftDetails = [];
                    for(var k=0; k<GiftDetails.length; k++) {
                        var giftDetail = {};
                        giftDetail['GiftDetail_id'] = GiftDetails[k]['Id'];
                        for(var j=0; j<GiftDetailFields.length; j++) {
                            if(GiftDetailFields[j].isHidden == false) {
                                if(GiftDetailFields[j].fieldType != 'REFERENCE') {
                                    if(GiftDetailFields[j].isForSummary == true) {
                                        storeData['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName];
                                        if(GiftDetailFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                            storeData['GiftDetail_' + GiftDetailFields[j].fieldName] = storeData['GiftDetail_' + GiftDetailFields[j].fieldName].split(';');
                                        }
                                         if(GiftDetailFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                         storeData['GiftDetail_' + GiftDetailFields[j].fieldName] ='$'+Ext.util.Format.number(storeData['GiftDetail_' + GiftDetailFields[j].fieldName], '0,000.00/i');
                                         }
                                    }
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName];
                                    if(GiftDetailFields[j].fieldType == 'MULTIPICKLIST' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                        giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName].split(';');
                                    }
                                     if(GiftDetailFields[j].fieldType == 'CURRENCY' && !isEmptyOrNullOrUndefined(GiftDetails[k][GiftDetailFields[j].fieldName])){  
                                      giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = '$'+Ext.util.Format.number(giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName], '0,000.00/i');
                                     }
                                } else if(GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")] != null) {
                                    if(GiftDetailFields[j].fieldName.trim() == 'causeview__Fund__c') {
                                        if(GiftDetailFields[j].isForSummary == true) {
                                            storeData['GiftDetail_' + GiftDetailFields[j].fieldName + '_Name'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Fund_Name__c'];
                                        }
                                        giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName + '_Name'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['causeview__Fund_Name__c'];
                                    }
                                    if(GiftDetailFields[j].isForSummary == true) {
                                        storeData['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                        storeData['GiftDetail_' + GiftDetailFields[j].fieldName + '_Id'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                    }
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Name'];
                                    giftDetail['GiftDetail_' + GiftDetailFields[j].fieldName + '_Id'] = GiftDetails[k][GiftDetailFields[j].fieldName.replace(/__c$/,"__r").replace(/Id$/,"")]['Id'];
                                }
                            }
                        }
                        storeData.GiftDetails.push(giftDetail);
                    }
                }
            }
    
    
    //******************************************    Custom Trigger for Grid Lookup    *********************************************************************************************************************************
    
            Ext.define('Ext.ux.CustomTrigger', {
                extend: 'Ext.form.field.Trigger',
                alias: 'widget.customtrigger',
            });
    
    //******************************************    custom number field    ********
      Ext.define('Ext.ux.textfield', {
      extend: 'Ext.form.field.Text',
      alias: 'widget.customnumberfield',
      maskRe: /[0-9 . , $]/,
        
    });
    
    /*  /^\$(\d{1,3}(\,\d{3})*|(\d+))(\.\d{2})?$/.test(value) */
    
     Ext.apply(Ext.form.field.VTypes, {
        Currency:  function(v) {
             return  /^\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/.test(v);
        },
        CurrencyText: 'Must be a valid format',
        CurrencyMask: /[0-9 . , $]/
    });
     
     //for default currency symbol
     
     
     
     //******************************************    Gift Batch Summary Panel   *********************************************************************************************************************************
     
     
     
     
          Ext.define('Ext.cv.GiftBatch.SummaryForm', {
                extend: 'Ext.form.Panel',
                frame: true,
                title: 'Gift Batch Summary',
                bodyPadding: '10 0 10 100',
                autoScroll:true,
                collapsible: true,
                width: width,
                border: 1,
                id : 'SummaryForm-panel-id',    //user story : Edit and Cancel feature for Gift Batch Summary Section
                style: {
                          borderStyle: 'solid',
                          borderWidth: 'medium'
                      },
            
                fieldDefaults: {
                    labelAlign: 'right',
                    labelWidth: 200,
                    msgTarget: 'side'
                },
            
                initComponent: function() {
                
                    var me = this;
                    var result=false;
            
                    this.items = [{
                        xtype: 'container',
                        defaults: {
                            anchor: '100%'
                        },
                        layout:'column',
                        items:[{
                            xtype: 'container',
                            columnWidth:.5,
                            layout: 'anchor',
                            defaults: {
                                xtype:'textfield',
                                hideTrigger: true,
                                anchor: '70%',
                            },
                            items: [GiftBatchSummaryFields[0], GiftBatchSummaryFields[2], GiftBatchSummaryFields[4], GiftBatchSummaryFields[6], GiftBatchSummaryFields[7], {xtype:'displayfield'}, GiftBatchSummaryFields[8], GiftBatchSummaryFields[10],   //user story : Edit and Cancel feature for Gift Batch Summary Section
                                    GiftBatchSummaryFields[12], GiftBatchSummaryFields[14], GiftBatchSummaryFields[16], GiftBatchSummaryFields[18], GiftBatchSummaryFields[20], GiftBatchSummaryFields[22],
                                    GiftBatchSummaryFields[24], GiftBatchSummaryFields[26], 
                                    GiftBatchSummaryFields[28], GiftBatchSummaryFields[30], GiftBatchSummaryFields[32], GiftBatchSummaryFields[34], GiftBatchSummaryFields[36], GiftBatchSummaryFields[38]]    //added by nitin in both items
                        },{
                            xtype: 'container',
                            columnWidth:.5,
                            layout: 'anchor',
                            defaults: {
                                xtype:'textfield',
                                hideTrigger: true,
                                anchor: '70%'
                            },
                            items: [GiftBatchSummaryFields[1], GiftBatchSummaryFields[3], GiftBatchSummaryFields[5], {xtype:'displayfield'}, GiftBatchSummaryFields[9], GiftBatchSummaryFields[11],     //user story : Edit and Cancel feature for Gift Batch Summary Section
                                    GiftBatchSummaryFields[13], GiftBatchSummaryFields[15], GiftBatchSummaryFields[17], GiftBatchSummaryFields[19], GiftBatchSummaryFields[21], GiftBatchSummaryFields[23],
                                    GiftBatchSummaryFields[25], GiftBatchSummaryFields[27], 
                                    GiftBatchSummaryFields[29], GiftBatchSummaryFields[31], GiftBatchSummaryFields[33], GiftBatchSummaryFields[35], GiftBatchSummaryFields[37], GiftBatchSummaryFields[39]]
                        }]
                    }];
            
                    this.buttons = [{
                                        text: '<span style="color: #666;">Save</span>',
                                        formBind: true,
                                        id: 'saveId',
                                        handler: function() {
                                        try{
                                                var thisform = this;
                                                myMask.show();
                                                thisform.up('form').getForm().isValid();
                                                for(var i=0; i<store.data.items.length; i++) {
                                                if(store.data.items[i].data['saved'] == false){
                                                   
                                                    j$(".giftBatch-record-save-msg").remove();
                                                    j$("#summarySpace").prepend('<div class="giftBatch-record-save-msg gb-error-msg" style="color: red;"><b> Save all batch items before saving Gift Batch Summary. </b></div>');
                                                     myMask.hide();
                                                      return;
                                                }
                                            }
                                            var gBatch = new sforce.SObject("causeview__Gift_Batch__c");
    
                                            var GBStore = thisform.up('form').getForm().getValues();
            
            
                                            gBatch['Id'] = giftBatchResult.records.Id;
                                            for(fld in GBStore) {
                                                if('Name,causeview__Total_Gift_Amount__c,causeview__Total_Gift__c,causeview__Template_Name__c,causeview__Template_Name__r.Name'.indexOf(fld) == -1) {
                                                    if('causeview__Open_Date__c,causeview__Close_Date__c'.indexOf(fld) != -1) {
                                                        gBatch[fld] = GBStore[fld] == '' ? null : new Date(GBStore[fld]);
                                                     } 
                                                     else if(fld =='causeview__Other__c' || fld == 'causeview__Cash__c'||fld =='causeview__Cheque__c'||fld=='causeview__Credit_Card__c'||fld=='causeview__Total_In_Kind__c'||fld=='causeview__Total_Stock__c'||fld=='causeview__Total_ACH_PAD__c')
                                                     { 
                                                      if(GBStore[fld] !== '' )
                                                         {
                                                         var a= GBStore[fld];
                                                         a=a.replace(/[$,]/g, '');
                                                         GBStore[fld]=a;
    
                                                         }
                                                        else
                                                        {
                                                        GBStore[fld] = "0";
    
                                                        }
                                                        gBatch[fld] = GBStore[fld];
    
                                                     }
                                                    else {
                                                        if(GBStore[fld] == '' && fld != 'causeview__Description__c'){
    
                                                            GBStore[fld] = 0;
                                                        }
                                                        gBatch[fld] = GBStore[fld];
                                                    }
                                                }
                                            }
                                            var GBUpdateResult = sforce.connection.update([gBatch]);
                                            j$('.gb-error-msg').remove();                                
                                            if(GBUpdateResult !== undefined && GBUpdateResult[0] != undefined && GBUpdateResult[0].success == 'true') 
                                            {   
                                                  //vg edit
                                                   isLoadingEdit = true;
                                                   var test= window.location.href;
                                                   test.indexOf("save"); 
                                                    if( test.indexOf("&save=true") == -1)
                                                    { 
                                                    test = test+"&save=true";
                                                    window.location.assign(test);                                                           
                                                    }
                                                    else
                                                    {         
                                                     window.location.reload();
                                                    }
                                              } 
    
                                            else 
                                            {
                                                j$("#summarySpace").prepend('<div class="giftBatch-record-update-error-msg gb-error-msg" style="color: red;"><b> Error updating Gift Batch record. </b></div>');
                                                myMask.hide();
                                                return;
                                                
                                             }
                                            }catch(err)
                                             {
                                             j$("#summarySpace").prepend('<div class="giftBatch-record-update-error-msg gb-error-msg" style="color: red;"><b> Unexpected Error : '+ err.faultstring +' </b></div>');
                                                myMask.hide();
                                                return;
                                             } 
                                             
                                  },
         
                                 },
                                 {  //user story : Edit and Cancel feature for Gift Batch Summary Section
                                        text: '<span style="color: #666;">Edit</span>',
                                            formBind: true,
                                            id: 'editId',
                                            handler: function() {
                                                var pledgePaymentForm = Ext.getCmp("SummaryForm-panel-id");
                                                for(i=0; i<pledgePaymentForm.items.items[0].items.items[0].items.items.length;i++){
                                                    var ads = pledgePaymentForm.items.items[0].items.items[0].items.items[i];
                                                    if(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name.indexOf('_dField') >= 0){
                                                        Ext.getCmp(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name).hide();
                                                    }else
                                                    if(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name.indexOf('displayfield-') == -1){
                                                        Ext.getCmp(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name).show();
                                                    }
                                                }
                                                for(i=0; i<pledgePaymentForm.items.items[0].items.items[1].items.items.length;i++){
                                                    var ads = pledgePaymentForm.items.items[0].items.items[1].items.items[i];
                                                    if(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name.indexOf('_dField') >= 0){
                                                        Ext.getCmp(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name).hide();
                                                    }else
                                                    if(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name.indexOf('displayfield-') == -1){
                                                        Ext.getCmp(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name).show();
                                                    }
                                                }
                                            },
                                    },
                                    {
                                        text: '<span style="color: #666;">Cancel</span>',
                                            formBind: true,
                                            id: 'cancelId',
                                            handler: function() {
                                                var pledgePaymentForm = Ext.getCmp("SummaryForm-panel-id");
                                                for(i=0; i<pledgePaymentForm.items.items[0].items.items[0].items.items.length;i++){
                                                    if(!(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name == 'Name' || pledgePaymentForm.items.items[0].items.items[0].items.items[i].name == 'causeview__Total_Gift__c')){
                                                        if(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name.indexOf('_dField') >= 0){
                                                            Ext.getCmp(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name).show();
                                                        }else
                                                        if(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name.indexOf('displayfield-') == -1){
                                                            Ext.getCmp(pledgePaymentForm.items.items[0].items.items[0].items.items[i].name).hide();
                                                        }
                                                    }
                                                }
                                                for(i=0; i<pledgePaymentForm.items.items[0].items.items[1].items.items.length;i++){
                                                    if(!(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name == 'causeview__Open_Date__c' || pledgePaymentForm.items.items[0].items.items[1].items.items[i].name == 'causeview__Close_Date__c' || pledgePaymentForm.items.items[0].items.items[1].items.items[i].name == 'causeview__Total_Gift_Amount__c' || pledgePaymentForm.items.items[0].items.items[1].items.items[i].name == 'causeview__Template_Name__c')){
                                                        if(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name.indexOf('_dField') >= 0){
                                                            Ext.getCmp(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name).show();
                                                        }else
                                                        if(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name.indexOf('displayfield-') == -1){
                                                            Ext.getCmp(pledgePaymentForm.items.items[0].items.items[1].items.items[i].name).hide();
                                                        }
                                                    }
                                                }
                                                    pledgePaymentForm.getForm().loadRecord(giftBatchStore.getAt(0));
                                            },
                                    }]; 
                   
                    this.callParent();
                },
            
            });
            
              
            //******************************************    Gift Batch Reconciliation Panel    *********************************************************************************************************************************
            
            Ext.define('Ext.cv.GiftBatch.ReconForm', {
                extend: 'Ext.form.Panel',
                id: 'reconForm',
                frame: true,
                title: 'Batch Reconciliation',
                bodyPadding: '10 0 10 100',
                autoScroll:true,
                collapsible: true,
                width: width,
                border: 1,
                style: {
                          borderStyle: 'solid',
                          borderWidth: 'medium'
                      },
            
                fieldDefaults: {
                    labelAlign: 'right',
                    labelWidth: 200,
                    msgTarget: 'side'
                },
            
                initComponent: function() {
            
                    this.items = [{
                        xtype: 'container',
                        defaults: {
                            anchor: '100%'
                        },
                        layout:'column',
                        items:[{
                            xtype: 'container',
                            columnWidth:.5,
                            layout: 'anchor',
                            defaults: {
                                xtype:'displayfield',
                                readOnly: true,
                                minValue: 0,
                               
                                anchor: '70%',
                                inputAttrTpl: ' data-qtip="Read Only" '
                            },
                            items: [GiftBatchReconFields[0], GiftBatchReconFields[1], GiftBatchReconFields[2], GiftBatchReconFields[3], GiftBatchReconFields[4], GiftBatchReconFields[5], GiftBatchReconFields[6], GiftBatchReconFields[7], {xtype:'displayfield'},GiftBatchReconFields[20],GiftBatchReconFields[21], GiftBatchReconFields[8], GiftBatchReconFields[9], GiftBatchReconFields[10]]
                        },{
                            xtype: 'container',
                            columnWidth:.5,
                            layout: 'anchor',
                            defaults: {
                                xtype:'displayfield',
                                readOnly: true,
                                allowDecimals: true,
                                decimalPrecision: 2,
                                minValue: 0.00,
                                value:'$0.00',
                                anchor: '70%',
                                inputAttrTpl: ' data-qtip="Read Only" '
                            },
                            items: [GiftBatchReconFields[11], GiftBatchReconFields[12], GiftBatchReconFields[13], GiftBatchReconFields[14], GiftBatchReconFields[15], GiftBatchReconFields[16], GiftBatchReconFields[17], GiftBatchReconFields[18]]
                        }]
                    }];
            
                    this.callParent();
                },
            });
            
            
            
            Ext.define('Ext.cv.SoftCreditPanel', {
                extend      : 'Ext.grid.Panel',
                alias       : 'widget.SoftCreditPanel',
                name        : 'SoftCreditPanel',
                columnLines : true,
                autoScroll  : true,
                singleSelect: true,
                selType     : 'cellmodel',
                border      : true,
                maxHeight   : 400,
                columns     : { items: SoftCreditFormFields, defaults: {menuDisabled: true} }, //Define the required columns        
            
                initComponent: function() {
            
                    Ext.apply(this, {
                        tbar: [{
                            text: 'Add Soft Credits',
                            id: this.id + '-add-softcredit',
                            scope: this,
                            handler: this.onAddClick
                        }]
                    });
            
                    this.callParent(arguments);
            
                },
            
                onAddClick: function() {
                    var thisElem = this;
                    var rec = new SoftCreditFieldsModel(AllBatchItems.Records[0].SoftCredits[0]);
                    var softCreditStore = thisElem.getStore();
                    softCreditStore.insert(this.getStore().getCount(), rec);
            
                    
                    var row = Ext.get(thisElem.id).findParent('tr.x-grid-row', 50, false);
                    var storeData = store.getAt(row.rowIndex);
            
                    //storeData.data.SoftCredits.unshift(softCreditStore.data.items[softCreditStore.data.items.length - 1].raw);
                    storeData.data.SoftCredits.push(softCreditStore.data.items[softCreditStore.data.items.length - 1].raw);
    
                    //softCreditCellEditing.startEdit(0, 1);
                    thisElem.editingPlugin.startEdit(this.getStore().getCount() - 1, 1);
                },
            
            });
            
            
            Ext.define('Ext.cv.GiftDetailPanel', {
                extend      : 'Ext.grid.Panel',
                alias       : 'widget.GiftDetailPanel',
                name        : 'GiftDetailPanel',
                columnLines : true,
                autoScroll  : true,
                singleSelect: true,
                selType     : 'cellmodel',
                border      : true,
                maxHeight   : 400,
                columns     : { items: GiftDetailFormFields, defaults: {menuDisabled: true} }, //Define the required columns        
    
                initComponent: function() {
            
                    Ext.apply(this, {
                        tbar: [{
                            text: 'Add Allocation',
                            id: this.id + '-add-allocation',
                            scope: this,
                            handler: this.onAddClick
                        }]
                    });
            
                    this.callParent(arguments);
            
                },
            
                onAddClick: function() {
                    var thisElem = this;
                    var row = Ext.get(thisElem.id).findParent('tr.x-grid-row', 50, false);
                    var storeData = store.getAt(row.rowIndex);
    
                    //var noOfAllocations = allocationStore.data.items[0];
                    var rec = new AllocationFieldsModel(AllBatchItems.Records[0].GiftDetails[0]);
                    var allocationStore = thisElem.getStore();
                    allocationStore.insert(this.getStore().getCount(), rec);
            
                    storeData.data.GiftDetails.push(allocationStore.data.items[allocationStore.data.items.length-1].raw);
                    
            
                    //allocationCellEditing.startEdit(0, 1);
                    thisElem.editingPlugin.startEdit(this.getStore().getCount()-1, 1);
            
                    markNonSummaryFieldsRequired(j$("#" + row.id), row.rowIndex);
                    changeAllocationIconStatus();
    
                },
            
            });
            
            
            Ext.define('myapp.MyFormPanel', {
                extend: 'Ext.form.Panel',
                alias: 'widget.myapp.MyFormPanel',
                width: width - 50,
            
                fieldDefaults: {
                    labelAlign: 'right',
                    labelWidth: 200,
                    msgTarget: 'side',
                },
            
                initComponent: function() {
                    var me = this;
                    me.bodyPadding = '10 10 20 10';
            
                    me.layout = {
                        type: 'form',
                        align: 'stretch',
                    };
                    me.autoScroll = false; // false
            
                    me.items = [];
                    
    
                    var fieldset1 = Ext.create('Ext.form.FieldSet', {
                        title: 'Organizational Contacts',
                        margin: '0 6 7 0',
    
                        style: {
                            borderColor: '#157fcc',
                            borderWidth: '1px',
                            borderStyle: 'solid'
                        },
                        collapsible: false,
                        autoScroll: true,
                        maxHeight: 250,
                        padding: '5 10 5 15',
                        layout: {
                            type: 'column',
    
                            reserveScrollbar: true,
                            itemCls : 'non-summary-fields',
                        },
                        defaults: {
                            listeners: {
                                change: function(field, newVal, oldVal) {
                                    var record1 = me.getRecord();
                                    var v = me.getValues();
                                    var m = Ext.select('.x-grid').elements[0].id;     //madhu 78948876
    
                                    var e = Ext.get(field.id);
                                    var row = e.findParent('tr.x-grid-row', 50, false);
    
                                    if(field.name == 'Gift_causeview__Gift_Type__c' && newVal == 'Recurring'  && oldVal !== undefined && store.getAt(row.rowIndex).data['Gift_causeview__Receipt_Type__c'] != 'Consolidated'){
                                        store.getAt(row.rowIndex).data['Gift_causeview__Receipt_Type__c'] = 'Consolidated';
                                        store.getAt(row.rowIndex).data[field.name] = newVal;
                                    }
    
                                    if(field.name == 'Gift_causeview__Gift_Type__c' && (newVal == 'Recurring' || oldVal == 'Recurring') && oldVal !== undefined) {
                                        store.getAt(row.rowIndex).data[field.name] = newVal;
                                        //displayNonSummaryFields(Ext.get(row));
                                        Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
                                    }
    
                                    if(store.getAt(row.rowIndex).data['approved'] != true && store.getAt(row.rowIndex).data['saved'] == true && store.getAt(row.rowIndex).data[field.name] != newVal && newVal != oldVal) {
                                        store.getAt(row.rowIndex).data['saved'] = false;
                                        store.getAt(row.rowIndex).data[field.name] = newVal;
                                        showHideStatusIcons();
                                        return;
                                    }
                                    if(field.name == 'Pay_causeview__Amount__c'  && oldVal !== undefined  && oldVal !== newVal){   //madhu 78948876
                                        var b = store.getAt(row.rowIndex).data.GiftDetails.length - 1;
                                        store.getAt(row.rowIndex).data[field.name] = newVal;
                                        store.getAt(row.rowIndex).data.GiftDetails[b]['GiftDetail_causeview__Amount__c'] = newVal;
                                        
        
                                         var el = Ext.query("*[id ^=GiftDetailPanel]",m);
                                         var a= el[0];
                                         var allocId = a.id;
                                        
                                         var allocStore = Ext.getCmp(allocId ).getStore();
                                         var index = allocStore.data.items.length - 1;
                                         if(index == 0){                
                                             allocStore.data.items[index].data['GiftDetail_causeview__Amount__c'] = newVal;
                                             allocStore.commitChanges();
                                             Ext.getCmp(allocId).getView().refresh();
                                         }
                                    }
                                    store.getAt(row.rowIndex).data[field.name] = newVal;
    
                                    if(-1 != 'Gift_causeview__Gift_Type__c,Pay_causeview__Amount__c,Pay_causeview__Payment_Type__c'.indexOf(field.name)) {
                                        if(field.name == 'Pay_causeview__Amount__c') {
                                            store.getAt(row.rowIndex).data['Gift_causeview__Expected_Amount__c'] = newVal;
                                        }
                                        populateReconFields();
                                    }
            
                                },
                                afterrender: function(elem, events) {
                                    var row = Ext.get(this.id).findParent('tr.x-grid-row', 50, false);
                                    if(store.getAt(row.rowIndex).data['approved'] == true || ((elem.name == 'Pay_Submit_to_Gateway__x' &&
                                        (store.getAt(row.rowIndex).data['Pay_causeview__Status__c'] != 'Declined' && !isEmptyOrNullOrUndefined(store.getAt(row.rowIndex).data['Pay_causeview__Status__c']) && store.getAt(row.rowIndex).data['Gift_causeview__Batch_Status__c'] != 'Failed'))||
                                        (elem.name == 'Gift_causeview__Gift_Type__c' && store.getAt(row.rowIndex).data['Pay_causeview__Status__c'] == 'Declined')))
                                    {
                                        this.getEl().dom.setAttribute('readOnly', true);
                                        elem.inputEl.dom.readOnly = true;
                                        elem.readOnly = true;
                                        elem.el.dom.readOnly = true;
                                    }
                                }
                            },
                        }
                    });
            
                    fieldset1.add(RecGiftOrgContactFormFields);
                    
                    me.items.push(fieldset1);
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Individual',
                        items: contactFormFields
                    }));
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Organization Information',
                        items: accountFormFields
                    }));
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Recurring Gift',
                        items: RecurringGiftFormFields
                    }));
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Gift',
                        items: TransactionFormFields
                    }));
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Payment',
                        items: PaymentFormFields
                    }));
                    me.items.push(fieldset1.cloneConfig({
                        title: 'Receipt',
                        items: ReceiptFormFields
                    }));
            
                    me.callParent();
            
                }
            });
            
                     
            Ext.define('Ext.Cv.BatchItemPanel', { //Defining a panel in order to display our data
                extend      : 'Ext.grid.Panel',
                alias       : 'widget.BatchItemPanel',
                name        : 'BatchItemPanel',
                columnLines : true,
                autoScroll  : true,
                singleSelect: true,
                selType     : 'cellmodel',
                border      : 1,
                style       : {
                                  borderColor: '#157fcc',
                                  borderStyle: 'solid',
                                  borderWidth: 'medium'
                              },
                maxHeight   : 500,
                height      : 500,
                width       : width,
                store       : store, //Associate with our store
                columns     : { items: columns, defaults: {menuDisabled: true} }, //Define the required columns    
    
                initComponent: function() {
    
                    Ext.apply(this, {
                        tbar: [{
                            text: 'Add Batch Item',
                            scope: this,
                            cls: 'add-batch-item',
                            id: 'addBatchItemId',
                            handler: this.onAddClick
                        }, {
                            text: 'Save Batch Items',
                            scope: this,
                            id: 'savebatchItemId',
                            handler: function() {
                                    myMask.show();
                                    window.setTimeout(function() {arrangeRecords();}, 1);
                                }
                        }]
                    });
    
                    var me = this;
    
                    me.callParent(arguments);
    
                    me.getView().on('expandbody', function(node, record, eNode) {
                        me.element = Ext.get(eNode).down('.ux-row-expander-box');
                        if(Ext.get(eNode).down('.ux-row-expander-box').down('div')) {
                             Ext.get(eNode).down('.ux-row-expander-box').down('div').destroy();
                        }
                        // alter the fields (swap the model data index with the child data index)
                        
                        var storeData = store.getAt(node.rowIndex);
                        dispPaymentFieldsOnType(storeData.data.Pay_causeview__Payment_Type__c);
                        
                        var grid2 = Ext.create('myapp.MyFormPanel');
                        var formWidth = j$('.x-grid-table').width() - 40;
                        if(grid2.width > formWidth) {
                            grid2.width = formWidth;
                        }
                        
                        
                        //Swap Individual And Organization fieldsets in the Expanded view based on the Donor Type.
                        if(storeData.data.IsOrgRelated == 'O') {
                            grid2.items.items.splice(1, 1);
                        } else {
                            grid2.items.items.splice(2, 1);
                        }
                        //Show "Recurring Gift" fieldset in the Expanded view if the GiftType is Recurring
                        if(storeData.data.Gift_causeview__Gift_Type__c != 'Recurring') {
                            grid2.items.items.splice(2, 1);
                        }
                        //Display "Organizational Contacts" fieldset in the Expanded view if the Donor Type is "O" and Gift Type is Recurring.
                        if( !(storeData.data.IsOrgRelated == 'O') ) {    // && storeData.data.Gift_causeview__Gift_Type__c == 'Recurring'
                            grid2.items.items.splice(0, 1);
                        }
                        
    
                            grid2.items.items.push(getNewAllocationGrid(storeData));
                            grid2.items.items.push(getNewSoftCreditGrid(storeData));
                        
                        me.element.swallowEvent(['click', 'mousedown', 'mouseup', 'dblclick'], false);
                        
                        grid2.render(me.element);
                        
                        grid2.getForm().loadRecord(store.getAt(node.rowIndex));
                        
                        setBorderColor();
                        markNonSummaryFieldsRequired(node, node.rowIndex);
                        
                        //Form Checkbox, TextArea field alinement issue. 
                        //Set the width of checkbox, TextArea field same as other fields.
                        var checkBoxIntervalCount = 0;
                        var checkBoxInterval = setInterval(function() {
                            var maxWidth = Math.max.apply(null, j$('table.non-summary-fields').map(function ()
                                            {
                                                return j$(this).width();
                                            }).get());
                            j$('table.x-form-type-checkbox.non-summary-fields').attr('style', j$('table.x-form-type-checkbox.non-summary-fields').attr('style') + '; width: ' + maxWidth + 'px !important');
                            j$('table.x-form-type-text.non-summary-fields:has(textarea.x-form-textarea)').attr('style', j$('table.x-form-type-text.non-summary-fields:has(textarea.x-form-textarea)').attr('style') + '; width: ' + maxWidth + 'px !important');
                            checkBoxIntervalCount++;
                            if(checkBoxIntervalCount == 5) {
                                clearInterval(checkBoxInterval);
                            }
                        }, 100);
    
    
                        //Change Default Allocation Record Delete Icon color to Grey
                        changeAllocationIconStatus();
                        
                        
                        //Ext.getCmp(Ext.get(eNode).down('.x-grid').id).getView().refresh();
                        
                
    
    
                    });
                    me.getView().on('collapsebody', function(node, record, eNode) {
                        if(Ext.get(eNode).down('.ux-row-expander-box').down('div')) {
                            Ext.get(eNode).down('.ux-row-expander-box').down('div').destroy();
                        }
                    });
                    
                },
                            
                onAddClick: function() {
                    // Create a model instance
                    var rec = new SummaryFieldsModel(getNewAllBatchItem(emptyAllBatchItemRecord));    //AllBatchItems.Records[0]
    
                    rec.data = SubtractTimezoneOffsetFromDate(rec.data);
                    if(this.getStore().getCount() < totalGifts) {
                        this.getStore().insert(this.getStore().getCount(), rec);
                    }
                    else {         
                        j$("#gridSpace").find('.gift-limit-error-msg1').remove();
                        j$("#gridSpace").prepend('<div class="gift-limit-error-msg1" style="color: red;"><b>Reached Total Gift Size of ' + totalGifts + '. To continue edit in Gift Batch Summary. </b></div>');
                        return;
                    }
                    Ext.getCmp(Ext.select('.x-grid').elements[0].id).getView().refresh();
    
                    this.editingPlugin.startEdit(this.getStore().getCount()-1, 3);
                    populateReconFields();
    
                },
    
            });
    
    
    
    
              var myMask = new Ext.LoadMask(Ext.getBody(), {msg:"Saving...",
                                    onBeforeLoad: function(){
                                        if (!this.disabled) {
                                            this.el.mask(Ext.LoadingSpinner + '<div class="x-loading-msg">' + this.msg + '</div>', this.msgCls, false);
                                            this.fireEvent('show', this, this.el, this.store);
                                        }
                                }});           
    
    
    
    
    //------------------------------------------------------------------------------------------------------------------------------------------------------------------------
             function arrangeRecords() {
                  
    
                   var AllBatchItems = [];
    
                    var passedRecCount = 0;
                    var submittedRecCount = 0;
                    var failedRecCount = 0;
    
                    var allDonors = [];
                    var accountsToCreate = [];
                    var contactsToCreate = [];
                    var contactIds = [];               
                    var organizationIds = [];
                    var contactRelationMap = {};
                    var contactOrganizationRelationMap = {};
                    var organizationContactRelationMap = {}
                    var organizationRelationMap= {};  
                    var re=/^\\$?([0-9]{1,3},([0-9]{3},)*[0-9]{3}|[0-9]+)(.[0-9][0-9])?$/ ;
                    var validateflag = 0;
                   
                   j$("#gridSpace").find('.error-msg').remove();
                   
                   
                    var getFieldLableFromColumn = function(al)
                    {
                        var fields1 = [];
                       var objPrefix=al.slice(0,index+1);
                       
                       var fieldName=al.slice(index+1);
                      
                       
                       
                         try{
                            objPrefix=al.slice(0,index+1);                        
                            fieldName=al.slice(index+1);
                           
                            switch(objPrefix)
                            {
                              case 'Contact_': fields1= contactFields;break;
                              case 'Account_': fields1= accountFields;break;
                              case 'GiftDetail_':fields1=GiftDetailFields;break;
                              case 'Pay_': fields1=PaymentFields;break;
                              case 'Gift_':  fields1= TransactionFields;break;
                              case 'RecGiftOrgContact_':fields1= RecGiftOrgContactFields;break;
                              case 'RecGift_':fields1= RecurringGiftFields;break;
                              case 'Receipt_':fields1= ReceiptFields;break;
                              case 'SoftCred_':fields1= SoftCreditFields;break;
                           }
                               
                            var field = _.find(fields1, function(each){ return each.fieldName == fieldName; });
                            return field !== undefined ? field.fieldLable : '';
                        
                        }catch(err) {
                        return ;
                         } 
                         
                 
                    }
                   var endsWithId = function(str) {
                       return str.trim().indexOf("_Id", str.trim().length - 3) != -1
                   }
    
                   var endsWithName = function(str) {
                       return str.trim().indexOf("_Name", str.trim().length - 5) != -1
                   }
    
    //            sforce.connection.sessionId = '{!GETSESSIONID()}';
                  sforce.connection.sessionId = "{!$Api.Session_ID}";
            
                  for(var i = 0; i < store.data.items.length; i++) {
                      var storeData = store.data.items[i].data;
                       
                    var account = new sforce.SObject("Account");
                    var contact = new sforce.SObject("Contact");
                    var recGiftOrgContact = new sforce.SObject("Contact");
                    var recGift = new sforce.SObject("causeview__Recurring_Donation__c");
                    var payment = new sforce.SObject("causeview__Payment__c");
                    var giftDetails = [];
                    var recGiftDetails = [];
                    var softCredits = [];
                    var receipt = new sforce.SObject("causeview__Receipt__c");
                    var transaction = new sforce.SObject("causeview__Gift__c");
                    
                    var batchItem = {};
                    
                      for(al in storeData) {
                           var text = ""; 
                           
                            //multipicklist issue
                           if( Object.prototype.toString.call( storeData[al]) === '[object Array]' && al.trim() != 'GiftDetails' && al.trim() != 'SoftCredits' ) {
                               storeData[al] = storeData[al].join(";");
                           }
    
                           text = storeData[al];
                           
                           
                          if(al == "Contact_FirstName"|| al == "Contact_LastName" || al == "Account_Name") {
                            text=Ext.util.Format.htmlDecode(text);
                            console.log(text);
                           }
                           
                           var index = al.indexOf("_");
    
                           var str = "";
                           var str1 = "";
                           str = al.slice(0,index+1); 
                           str1 = al.slice(index+1);
                           
                           // j$(".error-msg").has("b:contains('Value is not in valid format Please enter valid amount at row no. " + (i + 1 ) +" ') ").remove();
                            
                              if(currencyfieldlist.indexOf(al) !== -1) 
                                { 
                                  if(!isEmptyOrNullOrUndefined(text))
                                  {                               
                                    if(!re.test(text))
                                      {
                                          if(text.indexOf("-") == 1 )
                                            {   
                                             break;
                                                      
                                            }
                                       j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) +' for field '+ getFieldLableFromColumn(al)  +' </b></div>');                         
                                       validateflag=1;
                                      }
                                    else{
                                     text=text.replace(/[$,]/g, '');
                                     text = parseFloat(text); }
                                   } 
                               else {storeData[al]=0.00;}
                                 
                                }
                              
                                 
                                   
                           if(storeData['IsOrgRelated'] == 'O' && (str.localeCompare("Account_"))==0  && !endsWithName(str1) && account[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   account[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               }
                              
                               else {
                                   account[str1] = text;
                               }
                           } 
                           else if(storeData['IsOrgRelated'] == 'I' && (str.localeCompare("Contact_"))==0 && !endsWithName(str1) && contact[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   contact[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               } 
                                else {
                                   contact[str1] = text;
                               }
                           }
                           else if((str.localeCompare("RecGiftOrgContact_"))==0 && !endsWithName(str1) && recGiftOrgContact[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   recGiftOrgContact[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               }
                               
                                else {
                                   recGiftOrgContact[str1] = text;
                               }
                           }
                           else if((str.localeCompare("RecGift_"))==0 && !endsWithName(str1) && recGift[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   recGift[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               } 
                               else {
                                   recGift[str1] = text;
                               }
                           }
                           else if((str.localeCompare("Pay_"))==0 && !endsWithName(str1) && payment[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   payment[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               } else if(str1.trim().indexOf("__x", str1.trim().length - 3) == -1) {
                                   payment[str1] = text;
                               }
                              
                           }
                           else if((str.localeCompare("Receipt_"))==0 && !endsWithName(str1) && receipt[str1] === undefined && str1.trim() != '')
                           {
                               if(endsWithId(str1)) {
                                   receipt[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               } 
                               else {
                                   receipt[str1] = text;
                               }
                           }
                           else if((str.localeCompare("Gift_"))==0 && !endsWithName(str1) && transaction[str1] === undefined && str1.trim() != '' && str1.trim() != 'Name')
                           {
                               if(endsWithId(str1)) {
                                   transaction[str1.trim().substr(0, str1.trim().length - 3)] = text;
                               } 
                               else {
                                   transaction[str1] = text;
                               }
                           }
                           if(al.trim() == 'GiftDetails')
                           {
                               for(var j = 0; j < storeData.GiftDetails.length; j++) {
                                  var giftDetail = new sforce.SObject("causeview__Gift_Detail__c");
                                  for(al in storeData.GiftDetails[j]) {
                                       var text = ""; 
                                       text = storeData.GiftDetails[j][al];
                                       var index = al.indexOf("_");
                                      
                                       var str = "";
                                       var str1 = "";
                                       str = al.slice(0,index+1); 
                                       str1 = al.slice(index+1);
                                       
                                       if(currencyfieldlist.indexOf(al) !== -1) 
                                       {
                                        
                                              if(!isEmptyOrNullOrUndefined(text))
                                              {
                                                  if(!re.test(text))
                                                   {
                                                       if(text.indexOf("-") == 1 )
                                                      { 
                                                        break;
                                                      
                                                      }
                                                       j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) + ' for field ' + getFieldLableFromColumn(al)  + ' </b></div>');                         
                                                       validateflag=1;
                                                    }
                                                   else
                                                     {
                                                     text=text.replace(/[$,]/g, '');
                                                     text = parseFloat(text);
                                                     }
                                               } 
                                         }
    
                                       if((str.localeCompare("GiftDetail_"))==0 && !endsWithName(str1) && giftDetail[str1] === undefined && str1.trim() != '') {
                                           if(endsWithId(str1)) {
                                               giftDetail[str1.trim().substr(0, str1.trim().length - 3)] = text;
                                           } 
                                           else {
                                               giftDetail[str1] = text;
                                           }
                                       }
                                   }
                                   giftDetails.push(giftDetail);
                               }
                           }
                           
                           if(al.trim() == 'SoftCredits')
                           {
                               for(var j = 0; j < storeData.SoftCredits.length; j++) {
                                  var softCredit = new sforce.SObject("causeview__Solicitor__c");
                                  for(al in storeData.SoftCredits[j]) {
                                       var text = ""; 
                                       text = storeData.SoftCredits[j][al];
                                       var index = al.indexOf("_");
                                      
                                       var str = "";
                                       var str1 = "";
                                       str = al.slice(0,index+1); 
                                       str1 = al.slice(index+1);
                                       
                                       if(currencyfieldlist.indexOf(al) !== -1) 
                                        { 
                                              if(!isEmptyOrNullOrUndefined(text))
                                                  {
                                                      if(!re.test(text))
                                                         {
                                                           j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b>  Value is not in valid format Please enter valid amount at row no. ' + (i + 1) +'for  field' + getFieldLableFromColumn(al) +' </b></div>');                         
                                                           validateflag=1;
                                                          }
                                                        else
                                                        {
                                                         text=text.replace(/[$,]/g, '');
                                                         text = parseFloat(text);
                                                         }
                                                   } 
                                         }
    
                                       if((str.localeCompare("SoftCred_"))==0 && !endsWithName(str1) && softCredit[str1] === undefined && str1.trim() != '') {
                                           if(endsWithId(str1)) {
                                               softCredit[str1.trim().substr(0, str1.trim().length - 3)] = text;
                                           } 
                                           else {
                                               softCredit[str1] = text;
                                           }
                                       }
                                   }
                                   softCredits.push(softCredit);
                               }
                           }
                      }
    
                    if(storeData['IsOrgRelated'] == 'I') {
                        contact.causeview__Constituent_ID__c = storeData['ConstOrgId'];
                        if(isEmptyOrNullOrUndefined(contact.causeview__Constituent_ID__c) && isEmptyOrNullOrUndefined(contact.id)) {
                            contactsToCreate.push(contact);
                        }
                        else{
                            contactIds.push(storeData.Contact_id);  
                        }
                        allDonors.push(contact);
    
                    } else {
                        account.causeview__Organization_ID__c = storeData['ConstOrgId'];
                        if(isEmptyOrNullOrUndefined(account.causeview__Organization_ID__c) && isEmptyOrNullOrUndefined(account.id)) {
                            accountsToCreate.push(account);
                        }
                        else{
                            organizationIds.push(storeData.Account_id);  
                        }
                        allDonors.push(account);
                    }
    
                    batchItem['account'] = account;
                    batchItem['contact'] = contact;
                    batchItem['recGiftOrgContact'] = recGiftOrgContact;
                    batchItem['recGift'] = recGift;
                    batchItem['payment'] = payment;
                    batchItem['giftDetails'] = giftDetails;
                    batchItem['receipt'] = receipt;
                    batchItem['transaction'] = transaction;
                    batchItem['softCredits'] = softCredits;
                    AllBatchItems.push(batchItem);
    
                  }
                   if(!isEmptyOrNullOrUndefined(contactIds)){
                      var relationContactRes =sforce.connection.query('SELECT Id, npe4__Contact__c, npe4__RelatedContact__c FROM npe4__Relationship__c WHERE npe4__Contact__c  IN (\'' + contactIds.join('\',\'') + '\') AND causeview__Apply_Soft_Credit__c=true AND npe4__RelatedContact__c !=null');
                      if( !isEmptyOrNullOrUndefined(relationContactRes) && relationContactRes.size > 0 ){
                          //var totalRecords = relationContactRes.size;
                          if(relationContactRes.size == 1){
                              contactRelationMap[relationContactRes.records['npe4__Contact__c']] = relationContactRes.records['npe4__RelatedContact__c'].substring(0, relationContactRes.records['npe4__RelatedContact__c'].length - 3);
    
                          }
                          else{
                              for ( var i = 0; i < relationContactRes.size; i++){
                                  contactRelationMap[relationContactRes.records[i]['npe4__Contact__c']] = relationContactRes.records[i]['npe4__RelatedContact__c'].substring(0, relationContactRes.records[i]['npe4__RelatedContact__c'].length - 3);
                              }
                          }
                      }
                      var relationContactOrganizationres =sforce.connection.query('SELECT Id, npe5__Organization__c, npe5__Contact__c FROM npe5__Affiliation__c WHERE npe5__Contact__c  IN (\'' + contactIds.join('\',\'') + '\') AND causeview__Apply_Soft_Credit__c=true');                 
                      if( !isEmptyOrNullOrUndefined(relationContactOrganizationres) && relationContactOrganizationres.size > 0 ){
                          //var totalRecords = relationContactRes.size;
                          if(relationContactOrganizationres.size == 1){
                              contactOrganizationRelationMap[relationContactOrganizationres.records['npe5__Contact__c']] = relationContactOrganizationres.records['npe5__Organization__c'].substring(0, relationContactOrganizationres.records['npe5__Organization__c'].length - 3);
    
                          }
                          else{
                              for (var i = 0; i < relationContactOrganizationres.size; i++){
                                  contactOrganizationRelationMap[relationContactOrganizationres.records[i]['npe5__Organization__c']] = relationContactOrganizationres.records[i]['npe5__Contact__c '].substring(0, relationContactOrganizationres.records[i]['npe5__Contact__c'].length - 3);
                              }
                          }
                      }
                      
                  }
                  if(!isEmptyOrNullOrUndefined(organizationIds)){
                      var relationOrganizationres =sforce.connection.query('SELECT Id, npe5__Organization__c, npe5__Contact__c FROM npe5__Affiliation__c WHERE npe5__Contact__c  IN (\'' + organizationIds.join('\',\'') + '\') AND causeview__Apply_Soft_Credit__c=true');                 
                      if( !isEmptyOrNullOrUndefined(relationOrganizationres) && relationOrganizationres.size > 0 ){
                          //var totalRecords = relationContactRes.size;
                          if(relationOrganizationres.size == 1){
                              organizationRelationMap[relationOrganizationres.records['npe5__Organization__c']] = relationOrganizationres.records['npe5__Contact__c'].substring(0, relationOrganizationres.records['npe5__Contact__c'].length - 3);
    
                          }
                          else{
                              for ( var i = 0; i < relationOrganizationres.size; i++){
                                  organizationRelationMap[relationOrganizationres.records[i]['npe5__Organization__c']] = relationOrganizationres.records[i]['npe5__Contact__c'].substring(0, relationOrganizationres.records[i]['npe5__Contact__c'].length - 3);
                              }
                          }
                      }
                       //var relationOrganizationContactRes =sforce.connection.query('SELECT Id, npe4__Contact__c, npe4__RelatedContact__c FROM npe4__Relationship__c WHERE npe4__Contact__c  IN (\'' + organizationIds.join('\',\'') + '\') AND causeview__Apply_Soft_Credit__c=true AND npe4__RelatedContact__c !=null');
                      var relationOrganizationContactRes =sforce.connection.query('SELECT Id, npe5__Organization__c, npe5__Contact__c FROM npe5__Affiliation__c WHERE npe5__Organization__c   IN (\'' + organizationIds.join('\',\'') + '\') AND causeview__Apply_Soft_Credit__c=true');        
    
                      if( !isEmptyOrNullOrUndefined(relationOrganizationContactRes) && relationOrganizationContactRes.size > 0 ){
                          //var totalRecords = relationContactRes.size;
                          if(relationOrganizationContactRes.size == 1){
                              organizationContactRelationMap[relationOrganizationContactRes.records['npe5__Organization__c']] = relationOrganizationContactRes.records['npe5__Contact__c'].substring(0, relationOrganizationContactRes.records['npe5__Contact__c'].length - 3);
    
                          }
                          else{
                              for ( var i = 0; i < relationOrganizationContactRes.size; i++){
                                  organizationContactRelationMap[relationOrganizationContactRes.records[i]['npe5__Organization__c']] = relationOrganizationContactRes.records[i]['npe5__Contact__c'].substring(0, relationOrganizationContactRes.records[i]['npe5__Contact__c'].length - 3);
                              }
                          }
                      }
                      
                  }
    
    
                var saveRecords = function() {
                
                   if(validateflag==1) { return; }
                    
                    var accountsToUpdateKeys = new Array();
                    var accountsToUpdateValues = new Array();
                    var contactsToUpdateKeys = new Array();
                    var contactsToUpdateValues = new Array();
                    var accUpdateResult;
                    var conUpdateResult;
                    var accCreateResult;
                    var conCreateResult;
                    var recGiftsToCreate = [];
                    var recGiftCreateResult;    
                    var transactionsToCreate = [];
                    var transCreateResult;
                    var softCreditsToCreate = [];   
                    var recGiftsToDelete = [];
                    var paymentsToCreate = [];
                    var giftDetailsToCreate = [];
                    var recGiftDetailsToCreate = [];
                    var receiptsToCreate = [];
                    var giftPaymentUIFieldsMap = {};
                    var paymentRecordTypes;
                    var paymentRecordTypeIdMap = {};
    
    
                    //Fetch Allocation Record Type
                    var allocRecordTypes;
                    var allocRecordTypeIdMap = {};
                    var campaignIds = [];
                    
                    try
                    {
                        allocRecordTypes = sforce.connection.query('Select id, Name From RecordType Where SobjectType = \'Campaign\' AND NamespacePrefix = \'causeview\'');
                    } catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Fetching Allocation Record Type  </b></div>');
                        return false;
                    }   
                    if(allocRecordTypes !== undefined && allocRecordTypes.done == 'true') {
                        for(var i=0; i<allocRecordTypes.records.length; i++) {
                            allocRecordTypeIdMap[allocRecordTypes.records[i]['Name']] = allocRecordTypes.records[i].Id;
                        }
                    }
                    
                    //TODO: Move all client side validations here
                    for(var i=0; i<AllBatchItems.length; i++) {
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            
                            //---------------------------- Recurring Gift Validations. ------------------------------
                            if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring') {
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].recGift.causeview__Start_Date__c)) {
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Recurring Gift Start Date is missing At row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                }
                                if(isPastDate(AllBatchItems[i].recGift.causeview__Start_Date__c)) {       
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> The recurring gift start date you entered is invalid as it occurs in the past. Please provide a start date >= today\'s date at row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                }
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].recGift.causeview__Frequency__c)) {     
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Frequency is missing At row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                }
                                //Enhanced Gift Batch: Allow Single Receipts for Recurring Gifts----user story 
                                /* if(AllBatchItems[i].transaction.causeview__Receipt_Type__c == 'Single Receipt') {     
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b>  Single Receipt is selected for Recurring Gift at row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                } */
    
                                if(AllBatchItems[i].payment.causeview__Payment_Type__c == 'ACH/PAD') {
                                    if(store.data.items[i].data['IsOrgRelated'] == 'I') {
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.Phone)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Business Phone is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                    }
                                    if(store.data.items[i].data['IsOrgRelated'] == 'O') {
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.Phone)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Organization Phone is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                    }
                                }
                                
                                
                                
                                    //Billing Address Validation
                                if('ACH/PAD,Credit Card'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) != -1) {
                                    if(store.data.items[i].data['IsOrgRelated'] == 'I') {
                                    
                                            var country = AllBatchItems[i].contact.MailingCountry;
                                            country = country.toLowerCase();
                                            
                                    
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingStreet)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing Street is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingCity)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing City is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        //https://www.pivotaltracker.com/story/show/104432476--Enhanced Gift Batch: ACH/EFT from Other Countries
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingState) && (country == 'us' ||country == 'can'|| country == 'canada' ||country == 'mexico' || country == 'united states' ) ) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing State/Province is missing At row no. ' + (i + 1) + ' </b></div>');
                                             
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingCountry)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing Country is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingPostalCode)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing Zip/Postal Code is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                    }
                                    if(store.data.items[i].data['IsOrgRelated'] == 'O') {
                                            
                                            var accountCountry = AllBatchItems[i].account.BillingCountry;
                                            accountCountry = accountCountry.toLowerCase();
                                    
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingStreet)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing Street is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingCity)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing City is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        //https://www.pivotaltracker.com/story/show/104432476--Enhanced Gift Batch: ACH/EFT from Other Countries
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingState) && (accountCountry == 'us' || accountCountry == 'can' ||accountCountry == 'canada' ||accountCountry == 'mexico' || accountCountry == 'united states' )) { 
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing State/Province is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingCountry)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing Country is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingPostalCode)) {
                                            j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing Zip/Postal Code is missing At row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                    }
                                }
                            }
    
                            if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Payment_Type__c)) {
                                j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Payment Type Field is missing at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
                            if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Date__c)) {
                                j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Payment Date Field is missing at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
                            if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Amount__c)) {
                                j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Payment Amount Field is missing at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
                            if (AllBatchItems[i].payment.causeview__Amount__c < 0 ){
                                j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Payment Amount cannot be negative at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
                            if (AllBatchItems[i].receipt.causeview__Amount_Not_Eligible__c < 0 ){
                                j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Amount not Eligible cannot be negative at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
    
                            if(AllBatchItems[i].payment.causeview__Payment_Type__c == 'Credit Card') {
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Credit_Card_Number__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Number Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Credit_Card_Type__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Type Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                                if(isEmptyOrNullOrUndefined(store.data.items[i].data['Pay_Expiry_Date__x'])) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }else    //added by nitin
                                if(store.data.items[i].data['Pay_Expiry_Date__x'].length != 4){
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date Field should be of 4 digit at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }else
                                if(isNaN(parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(0, 1))) || isNaN(parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(1, 2))) || isNaN(parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(2, 3))) || isNaN(parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(3, 4)))){
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date should be numeric value at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }else
                                if(parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(0, 2)) < 1 || parseInt(store.data.items[i].data['Pay_Expiry_Date__x'].substring(0, 2)) > 12){
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Credit Card Expiry Date month should be between 01 and 12 at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                            }
                            if('Check,Cheque'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) != -1){
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Cheque_Num__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Cheque Number Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Cheque_Date__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Cheque Date Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                            }
                            if('ACH/PAD'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) != -1){
                                if(store.data.items[i].data['IsOrgRelated'] == 'I' && isEmptyOrNullOrUndefined(AllBatchItems[i].contact.MailingCountry)) {
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Contact Mailing Country is missing At row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                }
                                if(store.data.items[i].data['IsOrgRelated'] == 'O' && isEmptyOrNullOrUndefined(AllBatchItems[i].account.BillingCountry)) {
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Account Mailing Country is missing At row no. ' + (i + 1) + ' </b></div>');
                                    return false;
                                }
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Account_Number__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Account Number Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                                /* if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Account_Type__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Account Type Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                } */
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Routing_Branch_Number__c)) {
                                    j$("#gridSpace").prepend('<div class="pay-record-error-msg error-msg" style="color: red;"><b> Routing/Branch Number Field is missing at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                            }
    
                            //-------------- Organizational Contact Validation --------------
                            if(store.data.items[i].data['IsOrgRelated'] == 'O' && (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' ||
                                AllBatchItems[i].payment.causeview__Payment_Type__c == 'ACH/PAD'))
                            {
                                if (isEmptyOrNullOrUndefined(AllBatchItems[i].recGiftOrgContact.id)){
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Organizational Contact Id is missing At row no. ' + (i + 1) + ' </b></div>');
                                return false;
                                }
                                if (isEmptyOrNullOrUndefined(AllBatchItems[i].recGiftOrgContact.firstName)){
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Organizational Contact First Name is missing At row no. ' + (i + 1) + ' </b></div>');
                                return false;
                                }
                                if (isEmptyOrNullOrUndefined(AllBatchItems[i].recGiftOrgContact.lastName)){
                                    j$("#gridSpace").prepend('<div class="rec-gift-record-error-msg error-msg" style="color: red;"><b> Organizational Contact Last Name is missing At row no. ' + (i + 1) + ' </b></div>');
                                return false;
                                }
                            }        
                                    
                            //Allocations Validation
                            var totalAllocAmount = 0;        
                            for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) {
                                if(Object.keys(AllBatchItems[i].giftDetails[j]).length > 1) {
                                    if(isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c)) {
                                        j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> Appeal field is blank in Allocation Record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    }
                                    if(isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__Fund__c)) {
                                        j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> Fund field is blank in Allocation Record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    }
                                }
                                else {
                                    //TODO: Handle error here
                                     j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> No Gift Detail fields. ' + (i + 1) + '</b></div>');
                                     return false;
                                }
                                totalAllocAmount = parseFloat(totalAllocAmount) + AllBatchItems[i].giftDetails[j].causeview__Amount__c;
                                console.log(totalAllocAmount);
                                if(!isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c) && j$.inArray(AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c, campaignIds) == -1) {
                                    campaignIds.push(AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c);
                                }
                                if(!isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__Campaign__c) && j$.inArray(AllBatchItems[i].giftDetails[j].causeview__Campaign__c, campaignIds) == -1) {
                                    campaignIds.push(AllBatchItems[i].giftDetails[j].causeview__Campaign__c);
                                }
                            }
    
                            totalAllocAmount=totalAllocAmount.toFixed(2);
                            if(parseFloat(totalAllocAmount) != AllBatchItems[i].payment.causeview__Amount__c) {    // user story : Allocation Amount error on failed items
                                j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> Total Allocation amount is not equal to payment amount of ' + AllBatchItems[i].payment.causeview__Amount__c + ' at row no. ' + (i + 1) + ' </b></div>');
                                return false;
                            }
    
                            //Soft Credit Validation.            
                            for(var j = 0; j < AllBatchItems[i].softCredits.length; j++) 
                            {
                                if(Object.keys(AllBatchItems[i].softCredits[j]).length > 1) 
                                {
                                    if(store.data.items[i].data['IsOrgRelated'] == 'I' &&
                                        ((!isEmptyOrNullOrUndefined(contactRelationMap[AllBatchItems[i].contact.id]) &&
                                            contactRelationMap[AllBatchItems[i].contact.id] == AllBatchItems[i].softCredits[j].causeview__Solicitor__c) ||
                                        (!isEmptyOrNullOrUndefined(contactOrganizationRelationMap[AllBatchItems[i].contact.id]) &&
                                            contactOrganizationRelationMap[AllBatchItems[i].contact.id] == AllBatchItems[i].softCredits[j].causeview__Organization_Solicitor__c)))
                                    {
                                            j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b> Relationship exists and Auto soft credit is enabled for the Individual Solicitor or Organization Solicitor for Soft Credit row at ' +(j + 1) +' of row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                    }
                                    if(store.data.items[i].data['IsOrgRelated'] == 'O' &&
                                        ((!isEmptyOrNullOrUndefined(organizationRelationMap[AllBatchItems[i].account.id]) &&
                                            organizationRelationMap[AllBatchItems[i].account.id] == AllBatchItems[i].softCredits[j].causeview__Solicitor__c) ||
                                        (!isEmptyOrNullOrUndefined(organizationContactRelationMap[AllBatchItems[i].account.id]) &&
                                            organizationContactRelationMap[AllBatchItems[i].account.id] == AllBatchItems[i].softCredits[j].causeview__Solicitor__c))) {
                                         j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b> Relationship exists and Auto soft credit is enabled for the Individula Solicitor or Organization Solicitor for Soft Credit row at ' +(j + 1) +' of row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                    }
                                    if(isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Solicitor__c) && isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Organization_Solicitor__c)) {
                                        //do nothing
                                    } 
                                    else 
                                    {
                                        if(AllBatchItems[i].softCredits[j].causeview__Custom_Amount__c < 0) 
                                        {
                                            j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b> Please Enter a Valid Soft Credit\'s Custom Amount at row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                        if(!isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Solicitor__c) && !isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Organization_Solicitor__c))
                                        {
                                            j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b> Cannot Enter Both Individual Solicitor and Organization Solicitor for Soft Credit at row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        }
                                    }
                                }
                            }
                        }     
                    }
                    
                     //myMask.show();
                    //Message: "Saving Donor Information..."
                    
                        
                    sforce.connection.allOrNone = true;
    
                    /********************************************************************************************************************/
                    /*
                    1. Query Appeal and Campaign records.
                    */
                    var campaignResult;
                    try
                    {
                        campaignResult = sforce.connection.query('Select id, RecordType.Name From Campaign Where id IN (\'' + campaignIds.join('\',\'') + '\')');
                    } catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Fetching Appeal Records  </b></div>');
                        return false;
                    }
                    var campaignRecordTypeMap = {};
                    if(campaignResult !== undefined && campaignResult.done == 'true' && campaignResult.records !== undefined) {
                        if(parseInt(campaignResult.size) == 1) {
                            campaignRecordTypeMap = _.indexBy([campaignResult.records], function(each){ return each.Id.substr(0, 15); });
                        } else if(parseInt(campaignResult.size) > 1) {
                            campaignRecordTypeMap = _.indexBy(campaignResult.records, function(each){ return each.Id.substr(0, 15); });
                        }
                    } else if(campaignResult !== undefined && campaignResult.done != 'true') {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Fetching Appeal Records  </b></div>');
                        return false;
                    } 
    
                    /********************************************************************************************************************/
                    /*
                    1. Update Accounts and Contacts
                        1.1 Ensure there are no duplicates
                    */
                    
                    for(var i=0; i<allDonors.length; i++) {
                        if(!isEmptyOrNullOrUndefined(allDonors[i].causeview__Organization_ID__c) && !isEmptyOrNullOrUndefined(AllBatchItems[i].account.id)) {
                            var originalIndex = accountsToUpdateKeys.indexOf(allDonors[i].causeview__Organization_ID__c);
                            if(originalIndex >= 0) {
                                /*//compare and change modified fields only
                                for (var modifiedField in store.data.items[i].modified) {
                                    var tempArr = new Array();
                                    tempArr = modifiedField.split("Account_");
                                    if(tempArr.length > 1) {
                                        var fieldName = tempArr[1];
                                        accountsToUpdateValues[originalIndex][fieldName] = allDonors[i][fieldName];
                                    }
                                }*/
                                //csv requirement. overwrite with new values
                                accountsToUpdateValues = new Array();
                                accountsToUpdateValues.push(allDonors[i]);
                            }
                            else {
                                accountsToUpdateKeys.push(allDonors[i].causeview__Organization_ID__c);
                                accountsToUpdateValues.push(allDonors[i]);
                            }
                        }
                        else if(!isEmptyOrNullOrUndefined(allDonors[i].causeview__Constituent_ID__c) && !isEmptyOrNullOrUndefined(AllBatchItems[i].contact.id)) {
                            var originalIndex = contactsToUpdateKeys.indexOf(allDonors[i].causeview__Constituent_ID__c);
                            if(originalIndex >= 0) {
                                /*//compare and change modified fields only
                                for (var modifiedField in store.data.items[i].modified) {
                                    var tempArr = new Array();
                                    tempArr = modifiedField.split("Contact_");
                                    if(tempArr.length > 1) {
                                        var fieldName = tempArr[1];
                                        contactsToUpdateValues[originalIndex][fieldName] = allDonors[i][fieldName];
                                    }
                                }*/
                                //csv requirement. overwrite with new values
                                contactsToUpdateValues = new Array();
                                contactsToUpdateValues.push(allDonors[i]);
                            }
                            else {
                                contactsToUpdateKeys.push(allDonors[i].causeview__Constituent_ID__c);
                                contactsToUpdateValues.push(allDonors[i]);
                            }
                        }
                    }
    
                    
                    try {
                        accUpdateResult = sforce.connection.update(accountsToUpdateValues);
                        conUpdateResult = sforce.connection.update(contactsToUpdateValues);
                    } catch(err) {
                        //TODO: Remove progress indicator
                        //TODO: Display actual error
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Account and Contact: " '+ err.message + ': </b></div>');    //user story : Gift Batch (New) Not Saving
                        return false;   //user story : Gift Batch (New) Not Saving
                    }   
                    
                    /********************************************************************************************************************/
    
                    // Handle success / failure
                    for(var i=0; i<accountsToUpdateValues.length; i++) {
                        if(accUpdateResult[i] === undefined) {
                            j$("#gridSpace").prepend('<div class="acc-record-update-error-msg error-msg" style="color: red;"><b> Error in Updating Organization Record "' + accountsToUpdateValues[i].causeview__Organization_ID__c + '" </b></div>');
                            return false;
                        } else if(accUpdateResult[i].success != 'true' && accUpdateResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                            j$("#gridSpace").prepend('<div class="acc-record-update-error-msg error-msg" style="color: red;"><b> Error in Updating Organization Record "' + accountsToUpdateValues[i].causeview__Organization_ID__c + '" : ' + accUpdateResult[i].errors.message + '</b></div>');
                            return false;
                        }
                    }
    
                    for(var i=0; i<contactsToUpdateValues.length; i++) {
                        if(conUpdateResult[i] === undefined) {
                            j$("#gridSpace").prepend('<div class="acc-record-update-error-msg error-msg" style="color: red;"><b> Error in Updating Individual Record "' + contactsToUpdateValues[i].causeview__Constituent_ID__c + '" </b></div>');
                            return false;
                        } else if(conUpdateResult[i].success != 'true'&& conUpdateResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                            j$("#gridSpace").prepend('<div class="acc-record-update-error-msg error-msg" style="color: red;"><b> Error in Updating Individual Record "' + contactsToUpdateValues[i].causeview__Constituent_ID__c + '" : ' + conUpdateResult[i].errors.message + '</b></div>');
                            return false;
                        }
                    }
    
                    /********************************************************************************************************************/                
    
                    /*
                    2. Create new contacts and accounts
                    */
                    try {
                        accCreateResult = sforce.connection.create(accountsToCreate);
                        conCreateResult = sforce.connection.create(contactsToCreate);
                    } catch(err) {
                        //TODO: Remove progress indicator
                        //TODO: Display actual error
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Account and Contact. </b></div>');
                        return false;
                    }   
                    
                    /********************************************************************************************************************/
                    /*
                    3. For all batch items
                        3.1. Update batch items with SF ids of newly created accounts & display error if any
                        3.2. Update transactions with account ids
                        3.3. Update batch items with SF ids of newly created contacts & display error if any
                        3.4. Update transactions contact ids
                    */
                    
                    var accCreateIndex = 0;
                    var accFetchIndex = 0;
                    var conCreateIndex = 0;
                    var conFetchIndex = 0;
                    
                    var newDonorRecordIds = '';
                    
                    for(var i=0; i<AllBatchItems.length; i++) {
    
                        //------------------    Validate Campaign and Appeal Record Type.    --------------------
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) {
                            //User story :https://www.pivotaltracker.com/story/show/118928251
                               /* if(!isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c)) {
                                    var appealID = AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c.substr(0, 15);
                                    if(isEmptyOrNullOrUndefined(campaignRecordTypeMap[appealID]) ||
                                        isEmptyOrNullOrUndefined(campaignRecordTypeMap[appealID].RecordType) ||
                                        (campaignRecordTypeMap[appealID].RecordType.Name != 'Appeal' && campaignRecordTypeMap[appealID].RecordType.Name != 'Event')) //madhu 78408832
                                    {
                                        j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> Select a valid Appeal record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    }
                                } */
                                if(!isEmptyOrNullOrUndefined(AllBatchItems[i].giftDetails[j].causeview__Campaign__c)) {
                                    var campaignID = AllBatchItems[i].giftDetails[j].causeview__Campaign__c.substr(0, 15);
                                    if(isEmptyOrNullOrUndefined(campaignRecordTypeMap[campaignID]) || 
                                        isEmptyOrNullOrUndefined(campaignRecordTypeMap[campaignID].RecordType) ||
                                        campaignRecordTypeMap[campaignID].RecordType.Name != 'Campaign')
                                    {
                                        j$("#gridSpace").prepend('<div class="gd-record-error-msg error-msg" style="color: red;"><b> Select a valid Campaign record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    }
                                }
                            }
                        }
                        
                        
                        if(Object.keys(AllBatchItems[i].account).length > 1) {
                            //3.1. Update batch items with SF ids of newly created accounts & display error if any
                            if(isEmptyOrNullOrUndefined(allDonors[i].causeview__Organization_ID__c) && isEmptyOrNullOrUndefined(AllBatchItems[i].account.id)) {
                                if(accCreateResult[accCreateIndex] !== undefined && accCreateResult[accCreateIndex].success == 'true') {
                                    store.data.items[i].data['Account_id'] = accCreateResult[accCreateIndex].id;
                                    AllBatchItems[i].account.id = accCreateResult[accCreateIndex].id;
                                    newDonorRecordIds += accCreateResult[accCreateIndex].id + ',';
                                    if(deleteAllIds.length > 0) {
                                         deleteAllIds.splice(0,0,accCreateResult[accCreateIndex].id);
                                    } else {
                                        deleteAllIds.push(accCreateResult[accCreateIndex].id);
                                    }
                                    accCreateIndex++;
                                }
                                else
                                {
                                    if(accCreateResult[accCreateIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                        j$("#gridSpace").prepend('<div class="acc-record-save-error-msg error-msg" style="color: red;"><b> ' + accCreateResult[accCreateIndex].errors.message + ' At row no. ' + (i + 1) + ' </b></div>');
                                        return false;
                                    }
                                    else
                                    {
                                        //TODO: Display actual error
                                       // retrun false;
                                    }
                                    //TODO: Remove progress indicator
                                   // return false;
                                }
                            }
                            //3.2. Update transactions & recurring gifts with account ids
                            if(Object.keys(AllBatchItems[i].transaction).length > 1) {
                                AllBatchItems[i].transaction.causeview__Organization__c = AllBatchItems[i].account.id;
                            } else {
                                //TODO: Correct the error message below
                                //TODO: Remove progress indicator
                                j$("#gridSpace").prepend('<div class="tran-record-error-msg error-msg" style="color: red;"><b> No fields in Transaction record.</b></div>');
                                return false;
                            }
                            
                            if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring') {
                                if(Object.keys(AllBatchItems[i].transaction).length > 1) {
                                    AllBatchItems[i].transaction.causeview__Organization__c = AllBatchItems[i].account.id;
                                } else {
                                    //TODO: Correct the error message below
                                    //TODO: Remove progress indicator
                                    j$("#gridSpace").prepend('<div class="tran-record-error-msg error-msg" style="color: red;"><b> No fields in Transaction record.</b></div>');
                                    return false;
                                }
                            }
    
                            
                            if(Object.keys(AllBatchItems[i].transaction).length > 1) {
                                AllBatchItems[i].transaction.causeview__Constituent__c = null;
                            } else {
                                //TODO: Correct the error message below
                                //TODO: Remove progress indicator
                                j$("#gridSpace").prepend('<div class="tran-record-error-msg error-msg" style="color: red;"><b> No fields in Transaction record. </b></div>');
                                return false;
                            }
                        } else if(Object.keys(AllBatchItems[i].contact).length > 1) {
                            //3.3. Update batch items with SF ids of newly created contacts & display error if any
                            if(isEmptyOrNullOrUndefined(allDonors[i].causeview__Constituent_ID__c) && isEmptyOrNullOrUndefined(AllBatchItems[i].contact.id)) {
                                if(conCreateResult[conCreateIndex] !== undefined && conCreateResult[conCreateIndex].success == 'true') {
                                    store.data.items[i].data['Contact_id'] = conCreateResult[conCreateIndex].id;
                                    AllBatchItems[i].contact.id = conCreateResult[conCreateIndex].id;
                                    newDonorRecordIds += conCreateResult[conCreateIndex].id + ',';
                                    if(deleteAllIds.length > 0) {
                                         deleteAllIds.splice(0,0,conCreateResult[conCreateIndex].id);
                                    } else {
                                        deleteAllIds.push(conCreateResult[conCreateIndex].id);
                                    }
                                    conCreateIndex++;
                                }
                                else
                                {
                                    if(conCreateResult[conCreateIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                        j$("#gridSpace").prepend('<div class="acc-record-save-error-msg error-msg" style="color: red;"><b> ' + conCreateResult[conCreateIndex].errors.message + ' At row no. ' + (i + 1) + ' </b></div>');
                                    }
                                    else
                                    {
                                        j$("#gridSpace").prepend('<div class="acc-record-save-error-msg error-msg" style="color: red;"><b> ' + conCreateResult[conCreateIndex].errors.message + ' At row no. ' + (i + 1) + ' </b></div>');
                                        //TODO: Display actual error
                                    }
                                    //TODO: Remove progress indicator
                                    return false;
                                }
                            }
                            
                            //3.4. Update transactions with contact ids
                            if(Object.keys(AllBatchItems[i].transaction).length > 1) {
                                AllBatchItems[i].transaction.causeview__Constituent__c = AllBatchItems[i].contact.id;
                            } else {
                                //TODO: Correct the error message below
                                //TODO: Remove progress indicator
                                j$("#gridSpace").prepend('<div class="tran-record-error-msg error-msg" style="color: red;"><b> No fields in Transaction record. </b></div>');
                                return false;
                            }
                            
                            if(Object.keys(AllBatchItems[i].transaction).length > 1) {
                                AllBatchItems[i].transaction.causeview__Organization__c = null;
                            } else {
                                //TODO: Correct the error message below
                                //TODO: Remove progress indicator
                                j$("#gridSpace").prepend('<div class="tran-record-error-msg error-msg" style="color: red;"><b> No fields in Transaction record. </b></div>');
                                return false;
                            }
                        }
                        else 
                        {
                        //TODO: Handle error here
                        //TODO: Remove progress indicator
                        j$("#gridSpace").prepend('<div class="batch-item- not found" style="color: red;"><b> Unexpected Error while Updating Donor records. </b></div>');
    
                        return false;
                        }
    
                    }
                    
                    /********************************************************************************************************************/                
    
                    /*
                    5. For all batch items
                        5.1. Populate transactions to upsert
                    */
                    var recGiftIndex = 0;
                    for(var i=0; i<AllBatchItems.length; i++) {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            //5.1. Populate transactions to upsert
                            //TODO: Check if Transaction fields are present
                            AllBatchItems[i].transaction.causeview__GiftBatch__c = giftBatchId;
                            if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1) {
                                AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Pending';
        
                            }
                            if(isEmptyOrNullOrUndefined(AllBatchItems[i].transaction.causeview__Status__c))
                            {
                                 AllBatchItems[i].transaction.causeview__Status__c = 'Entered';
                            }
                            
                            AllBatchItems[i].transaction.causeview__Expected_Amount__c = AllBatchItems[i].payment.causeview__Amount__c;
                            //Bug fix - not saving batch â Neetha 09 June 14
                            if(AllBatchItems[i].transaction.causeview__Expected_Amount__c == "")
                                AllBatchItems[i].transaction.causeview__Expected_Amount__c = null;
                            //Bug fix - not saving batch â Neetha 09 June 14
                            // AllBatchItems[i].transaction.causeview__Gift_Date__c = AllBatchItems[i].payment.causeview__Date__c;
                            if(AllBatchItems[i].transaction.causeview__Gift_Date__c == "")
                                AllBatchItems[i].transaction.causeview__Gift_Date__c = null;
                        
                            transactionsToCreate.push(AllBatchItems[i].transaction);
                        }    
                    }
                    
                    /********************************************************************************************************************/                
    
    
                    /*
                    7. Upsert Transactions
                    */
                    
                    try {
                        transCreateResult = sforce.connection.upsert('Id', transactionsToCreate);
                    } catch(err) {
                        //TODO: Remove progress indicator
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Gift. </b></div>');
                        return false;
                    }   
                    
                    //Success / Failure for transaction    //Madhu
    
                    var tranIndex = 0;
                    for ( var i = 0 ; i < AllBatchItems.length; i++)
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            //TODO: Check if Transaction fields are present
                            if(transCreateResult[tranIndex] === undefined) {
                                    j$("#gridSpace").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Transaction Record at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                            }
                            else if(transCreateResult[tranIndex].success != 'true' && transCreateResult[tranIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                    j$("#gridSpace").prepend('<div class="tran-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Transaction Record at row no. ' + (i + 1) + '  ' + transCreateResult[tranIndex].errors.message + '</b></div>');
                                    return false;
                            } else
                            {
                                store.data.items[i].data['Gift_id'] = transCreateResult[tranIndex].id;
                                AllBatchItems[i].transaction.id = transCreateResult[tranIndex].id;
                                if(transCreateResult[tranIndex].created == 'true') {
                                    if(deleteAllIds.length > 0) {
                                        deleteAllIds.splice(0,0,transCreateResult[tranIndex].id);
                                    } else {
                                        deleteAllIds.push(transCreateResult[tranIndex].id);
                                    }
                                }
                                tranIndex ++;
                            }
                        }
                    
                    }
                    /********************************************************************************************************************/                
    
                   /*Populate payment records*/
                    
                    try
                    {
                        paymentRecordTypes = sforce.connection.query('Select id, Name From RecordType Where SobjectType = \'causeview__Payment__c\' AND NamespacePrefix = \'causeview\'');
                    } catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Fetching Record Type  </b></div>');
                        return false;
                    }   
                    
                    if(paymentRecordTypes !== undefined && paymentRecordTypes.done == 'true') {
                        for(var i=0; i<paymentRecordTypes.records.length; i++) {
                            paymentRecordTypeIdMap[paymentRecordTypes.records[i]['Name']] = paymentRecordTypes.records[i].Id;
                        }
                    }
                    
                    for(var i=0; i<AllBatchItems.length; i++) 
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            var PaymentUIFields = {};
                            if(Object.keys(AllBatchItems[i].payment).length > 1) 
                            {
                                AllBatchItems[i].payment.causeview__Donation__c = AllBatchItems[i].transaction.id;
                                if(isEmptyOrNullOrUndefined(AllBatchItems[i].payment.causeview__Status__c)) {
                                    AllBatchItems[i].payment.causeview__Status__c = 'Pending';
                                }
                                if(AllBatchItems[i].payment.causeview__Payment_Type__c == 'Credit Card')
                                {
                                    AllBatchItems[i].payment.RecordTypeId = paymentRecordTypeIdMap['Credit Card'];
                                }
                                else if(AllBatchItems[i].payment.causeview__Payment_Type__c == 'ACH/PAD')
                                {
                                    AllBatchItems[i].payment.RecordTypeId = paymentRecordTypeIdMap['ACH/PAD'];
                                }
                                else {
                                    AllBatchItems[i].payment.RecordTypeId = paymentRecordTypeIdMap['Standard'];
                                }
                                //Populate Payment UI fields info if Payment Type is "Credit Card" or "ACH/PAD" and is new Batch Item.    //, ACH/PAD    !isEmptyOrNullOrUndefined(store.data.items[i].data['id'])
                                if('ACH/PAD,Credit Card'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) != -1 &&  'Receipted,Committed'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved') 
                                {
                                   //if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && !(isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))
                                    //{
                                        PaymentUIFields['CCNumber'] = store.data.items[i].data['Pay_causeview__Credit_Card_Number__c'];
                                        PaymentUIFields['ACHAccountNo'] = store.data.items[i].data['Pay_causeview__Account_Number__c'];
                                        PaymentUIFields['Pay_Expiry_Date__x'] = store.data.items[i].data['Pay_Expiry_Date__x'];
                                        PaymentUIFields['Pay_Security_Code__x'] = store.data.items[i].data['Pay_Security_Code__x'];
        
                                        //Populate Recurring Gift Fields.
                                        PaymentUIFields['billingStartDate'] = '';
                                        var startDate = store.data.items[i].data['RecGift_causeview__Start_Date__c'];
                                        if(!isEmptyOrNullOrUndefined(startDate)) {
                                            PaymentUIFields['billingStartDate'] = startDate.getFullYear() + '-' + (startDate.getMonth() + 1) + '-' + startDate.getDate() + ' ' + (startDate.getHours() + 1) + ':' + startDate.getMinutes() + ':' + startDate.getSeconds();
                                        }
                                        PaymentUIFields['Frequency__c'] = store.data.items[i].data['RecGift_causeview__Frequency__c'];
                                        PaymentUIFields['of_Payments__c'] = (isEmptyOrNullOrUndefined(store.data.items[i].data['RecGift_causeview__of_Payments__c']) ||
                                                                                    store.data.items[i].data['RecGift_causeview__of_Payments__c'] <= 0 ||
                                                                                store.data.items[i].data['RecGift_causeview__of_Payments__c'] == '0') ? '' :
                                                                                store.data.items[i].data['RecGift_causeview__of_Payments__c'];
        
                                        //Populate FirstName and LastName From Organizational Contact.    
                                        PaymentUIFields['RecGift_First_Name'] = AllBatchItems[i].recGiftOrgContact.firstName;
                                        PaymentUIFields['RecGift_Last_Name'] = AllBatchItems[i].recGiftOrgContact.lastName;
        
                                        //Populate isNewRecord.    
                                        PaymentUIFields['isNewRecord'] = (newDonorRecordIds.indexOf(AllBatchItems[i].transaction.id) != -1) ? 'New' : 'Existing';
        
                                        giftPaymentUIFieldsMap[AllBatchItems[i].transaction.id] = PaymentUIFields;
                                        //}
                                        
                                }
                                if('Credit Card'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) !== -1) {
                                //Mask CC Number
                                    var masked_cc_number = maskCCNumber(store.data.items[i].data['Pay_causeview__Credit_Card_Number__c'], 4);
                                    //store.data.items[i].data['Pay_causeview__Credit_Card_Number__c'] = masked_cc_number;
                                    AllBatchItems[i].payment.causeview__Credit_Card_Number__c = masked_cc_number;
                                }
                                if('ACH/PAD'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) !== -1) {
                                //Mask ACH Account Number Number
                                    var masked_acc_number = maskCCNumber(store.data.items[i].data['Pay_causeview__Account_Number__c'], 2);
                                    //store.data.items[i].data['Pay_causeview__Account_Number__c'] = masked_acc_number;
                                    AllBatchItems[i].payment.causeview__Account_Number__c = masked_acc_number;
                                }
    
                                //If Gift is of type 'Recurring' and Start date is in future, Set Payment amount to 0;
                                if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c)) {
                                    AllBatchItems[i].payment.causeview__Amount__c = 0;
                                }
    
                                if((AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring')||(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && istodaydate(AllBatchItems[i].recGift.causeview__Start_Date__c)))
                                    paymentsToCreate.push(AllBatchItems[i].payment);
                                
                            }
                        }
                    }
    
                    //upsert payments
                    var payCreateResult;
                    try 
                    {  
                       if(paymentsToCreate.length >  0)
                            payCreateResult = sforce.connection.upsert('Id', paymentsToCreate);
                    } catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Payments. </b></div>');
                        return false;
                    }   
    
                    // Success/failure for payment
                    var payIndex = 0;
                    for(var i=0; i<AllBatchItems.length; i++) 
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false  && (AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && !isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))
                        {
                            if(payCreateResult[payIndex] !== undefined && payCreateResult[payIndex].success == 'true') {
                            
                                store.data.items[i].data['Pay_id'] = payCreateResult[payIndex].id;
                                AllBatchItems[i].payment.id = payCreateResult[payIndex].id;
                                
                                //Populate gift allocations
                                if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring') 
                                {
                                    for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) 
                                    {
                                        if(Object.keys(AllBatchItems[i].giftDetails[j]).length > 1) 
                                        {
                                            AllBatchItems[i].giftDetails[j].causeview__Gift__c = AllBatchItems[i].transaction.id;
                                            AllBatchItems[i].giftDetails[j].causeview__Payment__c = payCreateResult[payIndex].id;
                                            AllBatchItems[i].giftDetails[j].causeview__Allocation_Date__c = AllBatchItems[i].payment.causeview__Date__c;
                                            if(AllBatchItems[i].giftDetails[j].id == null){
                                                AllBatchItems[i].giftDetails[j].id = "";
                                            }
                                            giftDetailsToCreate.push(AllBatchItems[i].giftDetails[j]);
                                        }
                                    }
                                }
                                payIndex++;
                                passedRecCount ++;
                            } else if ( payCreateResult[payIndex] === undefined ) { 
                                j$("#gridSpace").prepend('<div class="rec-gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Payment Record at row no. ' + (i + 1) + '</b></div>');
                                return false;
                            }
                            else {
                                    j$("#gridSpace").prepend('<div class="pay-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Payment Record at row no. ' + (i + 1) + '  ' + payCreateResult[payIndex].errors.message + '</b></div>');
                                    return false;
                            }
                       }
                       else if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false && AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))
                       {
                            passedRecCount ++;
                       }
                     }
                    /********************************************************************************************************************/
                    //8. Allocations (update with payment id)
                    var gdCreateResult;
                    try
                    {
                        gdCreateResult = sforce.connection.upsert('Id', giftDetailsToCreate);
                    } 
                    catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Allocation. </b></div>');
                        return false;
                    }
                    var gdIndex = 0;
                    //Success / failure for allocations
                    for(var i=0; i<AllBatchItems.length; i++) 
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring')
                            {
                                for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) 
                                {
                                    if(gdCreateResult[gdIndex] === undefined) {
                                        j$("#gridSpace").prepend('<div class="gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Allocation Record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    }
                                    else if(gdCreateResult[gdIndex].success != 'true' && gdCreateResult[gdIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') 
                                    {
                                        j$("#gridSpace").prepend('<div class="gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Allocation Record at row no. ' + (i + 1) + '  ' + gdCreateResult[gdIndex].errors.message + '</b></div>');
                                        return false;
                                    } 
                                    else 
                                    {
                                        store.data.items[i].data.GiftDetails[j]['GiftDetail_id'] = gdCreateResult[gdIndex].id;
                                        AllBatchItems[i].giftDetails[j].id = gdCreateResult[gdIndex].id;
                                        if (gdCreateResult[gdIndex].created == 'true'){
                                            deleteAllIds.splice(0,0,gdCreateResult[gdIndex].id);
                                        }
                                        gdIndex++;
                                    }
                                } 
                            }
                        }
                    }
                    /********************************************************************************************************************/
                    //9. soft credits
                    
                    //Populate softCredits
                    
                    for(var i=0; i<AllBatchItems.length; i++) 
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false )
                        {
                            for(var j = 0; j < AllBatchItems[i].softCredits.length; j++) 
                            {
                                if(Object.keys(AllBatchItems[i].softCredits[j]).length > 1) 
                                {
                                    if(isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Solicitor__c) && isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Organization_Solicitor__c)) {
                                        //do nothing
                                    } 
                                    else 
                                    {
                                        AllBatchItems[i].softCredits[j].causeview__Gift__c = AllBatchItems[i].transaction.id;
                                        if(isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Custom_Amount__c)) {
                                            AllBatchItems[i].softCredits[j].causeview__Custom_Amount__c = AllBatchItems[i].payment.causeview__Amount__c;
                                        }
                                        softCreditsToCreate.push(AllBatchItems[i].softCredits[j]);
                                    }
                                }
                            }
                        }
                    }
                    
                    //upsert soft credits
                    
                    var softCreditsCreateResult;
                    try 
                    {
                        softCreditsCreateResult = sforce.connection.upsert('Id', softCreditsToCreate);
                    } catch(err) 
                    {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Soft Credit. </b></div>');
                        return false;
                    }   
                    var softCredIndex = 0;
                    
                    for ( var i = 0; i < AllBatchItems.length; i++)
                    {
                        // Do not include Approved/Committed/Receipted items.
                        if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                            store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                        {
                            for(var j = 0; j < AllBatchItems[i].softCredits.length; j++) 
                            {
                                if(Object.keys(AllBatchItems[i].softCredits[j]).length > 1) 
                                {
                                    if( !(isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Solicitor__c) && isEmptyOrNullOrUndefined(AllBatchItems[i].softCredits[j].causeview__Organization_Solicitor__c)) ) 
                                    {
                                        if(softCreditsCreateResult[softCredIndex] !== undefined && softCreditsCreateResult[softCredIndex].success != 'true' && softCreditsCreateResult[softCredIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') 
                                        {
                                            j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b>  Error in Creating Soft Credit Record at row no. ' + (i + 1) + '  ' + softCreditsCreateResult[softCredIndex].errors.message + ' </b></div>');
                                            return false;
                                        } 
                                        else if(softCreditsCreateResult[softCredIndex] === undefined) 
                                        {
                                            j$("#gridSpace").prepend('<div class="soft-cred-record-error-msg error-msg" style="color: red;"><b>  Error in Creating Soft Credit Record at row no. ' + (i + 1) + ' </b></div>');
                                            return false;
                                        } 
                                        else 
                                        {
                                            store.data.items[i].data.SoftCredits[j]['SoftCred_id'] = softCreditsCreateResult[softCredIndex].id;
                                            AllBatchItems[i].softCredits[j].id = softCreditsCreateResult[softCredIndex].id;
                                            if(softCreditsCreateResult[softCredIndex].created == 'true') {
                                                deleteSoftCredits.push(softCreditsCreateResult[softCredIndex].id);
                                            }
                                            softCredIndex++;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    /********************************************************************************************************************/                
                    //10. Create document log file containing rejected records. These records are inserting from csv file 
                    //and rejected due to duplicate constituent or organization. 
                    var logFolder= sforce.connection.query('SELECT Id, Name FROM Folder WHERE Name = \'Gift Batch Log\'');
                    if(logFolder.size > 0 && (rejectedRecordString.length > rejectedRecordStringLenght)){
                        var doc = new sforce.SObject("Document");
                        doc.Name = giftBatchResult.records.causeview__Name__c+' ( '+new Date()+' )';
                        doc.Description = ''; // Insert description                    
                        doc.FolderId = logFolder.getArray("records")[0].Id;                    
                        doc.Body = window.btoa(rejectedRecordString);
                        doc.Type = 'txt';
                        var docResult = sforce.connection.create([doc]);                        
                    }
    
    //------------------------------------------    Submit Payment    ------------------------------------------------------------------------------------------------------------------------------
    
                        var submitPaymentResult = null;
                        var paymentsToUpdate = [];
                        var paymentsToDelete = [];
                        var transToUpdate = [];
    
                        if(Object.keys(giftPaymentUIFieldsMap).length > 0  ) {
                            try{
                                submitPaymentResult = sforce.apex.execute('causeview.BatchProcessingController' ,'submitPayment1',{giftBatchId: giftBatchId, giftPaymentUIFieldsMap: JSON.stringify(giftPaymentUIFieldsMap) });
                            } catch(err) {
                                j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Submitting Payment. : '+ err.message + err.faultstring + ' </b></div>');
                            }   
                            
                            if(submitPaymentResult != null) {
    
                                var transactionResults = JSON.parse(submitPaymentResult);
                            }
                        }
    
                        var tranResIndx = 0;
                        for(var i=0; i<AllBatchItems.length; i++) {
                            // Do not include Approved/Committed/Receipted items.
                            if('Committed,Receipted'.indexOf(AllBatchItems[i].transaction.causeview__Batch_Status__c) == -1 && AllBatchItems[i].payment.causeview__Status__c != 'Approved' && 
                                store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false)
                            {
    
                                //Populate receipts to be upserted
                                //Bug Fix : Populate Receipt record even if no fields are present.   //Object.keys(AllBatchItems[i].receipt).length > 1 && 
                                if(AllBatchItems[i].transaction.causeview__Receipt_Type__c == 'Single Receipt' && AllBatchItems[i].transaction.causeview__Receipt_Later__c != true && AllBatchItems[i].transaction.causeview__Batch_Status__c != 'Receipted') 
                                {
                                    AllBatchItems[i].receipt.causeview__Gift__c = AllBatchItems[i].transaction.id;
                                    AllBatchItems[i].receipt.causeview__Receipt_Date__c = AllBatchItems[i].payment.causeview__Date__c;
                                    AllBatchItems[i].receipt.causeview__Status__c = 'To be Issued';
                                    AllBatchItems[i].receipt.causeview__Constituent__c = AllBatchItems[i].transaction.causeview__Constituent__c;
                                    AllBatchItems[i].receipt.causeview__Organization__c = AllBatchItems[i].transaction.causeview__Organization__c;
                                    if(AllBatchItems[i].receipt.causeview__Amount_Not_Eligible__c == '') {
                                        AllBatchItems[i].receipt.causeview__Amount_Not_Eligible__c = 0;
                                    }
                                    if(AllBatchItems[i].receipt.causeview__Amount_Receipted__c == '') {
                                        AllBatchItems[i].receipt.causeview__Amount_Receipted__c = null;
                                    }
                                }
        
                                //Updating rec gift, trans, payment for cc types
                                if(!isEmptyOrNullOrUndefined(giftPaymentUIFieldsMap[AllBatchItems[i].transaction.id]) ) {
                                    if(submitPaymentResult != null && transactionResults != null && transactionResults[tranResIndx] != null) {
                                        AllBatchItems[i].payment.causeview__Authorization__c = transactionResults[tranResIndx].ApprovalCode;
                                        if(transactionResults[tranResIndx].TransactionId != -1) {
                                            AllBatchItems[i].payment.causeview__CC_Reference__c = transactionResults[tranResIndx].TransactionId;
                                        }
                                        AllBatchItems[i].payment.causeview__Status__c = transactionResults[tranResIndx].TransactionStatus == null || transactionResults[tranResIndx].TransactionStatus != 'success' ? 'Declined' : 'Approved';
                                        if( (AllBatchItems[i].TransactionId == null || AllBatchItems[i].TransactionId == '') && AllBatchItems[i].TransactionStatus == 'success' ) {
                                            AllBatchItems[i].payment.causeview__Amount__c = 0;
                                        }
                                        AllBatchItems[i].payment.causeview__CC_Transaction_Date__c = new Date();
                                        if (transactionResults[tranResIndx].Errors != null)
                                        {
                                            if(transactionResults[tranResIndx].Errors.ErrorMessages != null &&  transactionResults[tranResIndx].Errors.ErrorMessages.length > 0)
                                            {
                                                    AllBatchItems[i].payment.causeview__StatusComment__c = transactionResults[tranResIndx].Errors.ErrorMessages[0].Error;
                                            }
                                        }
                                        else
                                        {
                                            if(AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD"){    //user story : Need to remove status comment "Approved" when payment is Pending for ACH 
                                                AllBatchItems[i].payment.causeview__StatusComment__c = 'Transaction Number: ' + transactionResults[tranResIndx].TransactionId;
                                            }else{
                                                AllBatchItems[i].payment.causeview__StatusComment__c = 'Approved.  Transaction Number: ' + transactionResults[tranResIndx].TransactionId;
                                            }
                                        }
        
                                        if (transactionResults[tranResIndx].TransactionStatus == null || transactionResults[tranResIndx].TransactionStatus != 'success')
                                        {
                                            AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Failed';
                                            AllBatchItems[i].transaction.causeview__Status__c = 'Cancelled';
                                            failedRecCount ++;
                                            if(transactionResults[tranResIndx].Errors != null && transactionResults[tranResIndx].Errors.ErrorMessages != null &&  transactionResults[tranResIndx].Errors.ErrorMessages.length > 0) {
                                                j$("#gridSpace").prepend('<div class="payment-processing-error-msg error-msg" style="color: red;"><b> Error in Processing the Payment at row no. ' + (i + 1) + ' : ' + transactionResults[tranResIndx].Errors.ErrorMessages[0].Error + '</b></div>');
                                            } else {
                                                j$("#gridSpace").prepend('<div class="payment-processing-error-msg error-msg" style="color: red;"><b> Error in Processing the Payment at row no. ' + (i + 1) + '</b></div>');
                                            }
                                            //paymentsToDelete.push(AllBatchItems[i].payment.id);
                                        } 
                                        else
                                        {
                                            if(AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD"){    //user story : ACH payment made through gift batch has approved status. Added if else condition here
                                                AllBatchItems[i].payment.causeview__Status__c = 'Pending';
                                            }else{
                                                AllBatchItems[i].payment.causeview__Status__c = 'Approved';
                                            }
                                            AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Committed';
                                            AllBatchItems[i].transaction.causeview__Reference__c = transactionResults[tranResIndx].RecurringProfileId;
                                            if (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring') {
                                                AllBatchItems[i].transaction.causeview__Status__c = 'Active';
                                                AllBatchItems[i].recGift.causeview__Reference__c = transactionResults[tranResIndx].RecurringProfileId;
                                                AllBatchItems[i].recGift.causeview__Encrypted_Key__c = transactionResults[tranResIndx].EncryptedRecurringProfileId;
                                            }
                                            //Bug Fix : Populate Receipt record even if no fields are present.   //Object.keys(AllBatchItems[i].receipt).length > 1 && 
                                            //Do not create for Recurring Gift. --- AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' &&
                                            if(AllBatchItems[i].transaction.causeview__Receipt_Type__c == 'Single Receipt' && AllBatchItems[i].transaction.causeview__Receipt_Later__c != true && AllBatchItems[i].transaction.causeview__Batch_Status__c != 'Receipted') {
                                                receiptsToCreate.push(AllBatchItems[i].receipt);
                                            }
                                            //paymentsToUpdate.push(AllBatchItems[i].payment);
                                            submittedRecCount ++;
                                        }
                                    }
                                    else {
                                        //Handle no response to payment
                                        AllBatchItems[i].payment.causeview__Status__c = 'Declined';
                                        AllBatchItems[i].transaction.causeview__Status__c = 'Cancelled';
                                        AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Failed';
                                        AllBatchItems[i].payment.causeview__StatusComment__c = 'Could not connect to Payment Gateway';
                                        failedRecCount ++;
                                        j$("#gridSpace").prepend('<div class="payment-processing-error-msg error-msg" style="color: red;"><b> Error in Processing the Payment at row no. ' + (i + 1) + '</b></div>');
                                        //paymentsToDelete.push(AllBatchItems[i].payment.id);
                                    }
                                    tranResIndx++;
                                    if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && !(isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))
                                    {
                                     paymentsToUpdate.push(AllBatchItems[i].payment);
                                    }
                                    transToUpdate.push(AllBatchItems[i].transaction);
                                }
                                else {
                                    //Bug Fix : Populate Receipt record even if no fields are present.   //Object.keys(AllBatchItems[i].receipt).length > 1 && 
                                    //Do not create for Recurring Gift.---AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' &&
                                    if( AllBatchItems[i].transaction.causeview__Receipt_Type__c == 'Single Receipt' && AllBatchItems[i].transaction.causeview__Receipt_Later__c != true && AllBatchItems[i].transaction.causeview__Batch_Status__c != 'Receipted') {
                                        //All non-CC and non-ACH type transactions will get receipt
                                        receiptsToCreate.push(AllBatchItems[i].receipt);
                                    }
                                }
    
                                // Submit Payments for non CC/ACH payment types.
                                if(AllBatchItems[i].transaction.causeview__Batch_Status__c == 'Pending' && ('ACH/PAD,Credit Card'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) == -1 || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && (isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))) {
                                    AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Committed';
                                    AllBatchItems[i].payment.causeview__Status__c = 'Approved';
                                    
                                    if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && !(isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))
                                        {
                                         paymentsToUpdate.push(AllBatchItems[i].payment); 
                                         }
                                    transToUpdate.push(AllBatchItems[i].transaction);
                                }
        
                                //3.5. Populate recurring gifts to upsert.
                                //3.6  Populate only if the payment is approved.
                                if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && (AllBatchItems[i].payment.causeview__Status__c == 'Approved' ||(AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD" && AllBatchItems[i].payment.causeview__Status__c == 'Pending') || isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))) {
                                    if(!isEmptyOrNullOrUndefined(AllBatchItems[i].transaction.causeview__Organization__c)) {
                                        AllBatchItems[i].recGift.causeview__Constituent__c = AllBatchItems[i].recGiftOrgContact.id;
                                    } else {
                                        AllBatchItems[i].recGift.causeview__Constituent__c = AllBatchItems[i].transaction.causeview__Constituent__c;
                                    }
                                    AllBatchItems[i].recGift.causeview__Organization__c = AllBatchItems[i].transaction.causeview__Organization__c;
                                    AllBatchItems[i].recGift.causeview__Type__c = AllBatchItems[i].payment.causeview__Payment_Type__c;
                                    if(AllBatchItems[i].payment.causeview__Payment_Type__c == "Credit Card"){   
                                        AllBatchItems[i].recGift.causeview__Credit_Card_Type__c = AllBatchItems[i].payment.causeview__Credit_Card_Type__c;
                                        AllBatchItems[i].recGift.causeview__Credit_Card__c = maskCCNumber(AllBatchItems[i].payment.causeview__Credit_Card_Number__c, 4);
                                        var expiryDate = store.data.items[i].data['Pay_Expiry_Date__x'];
                                        if(!isEmptyOrNullOrUndefined(expiryDate)) {
                                            var d = new Date();
                                            d.setFullYear(2000 + parseInt(expiryDate.substring(2, 4)));
                                            d.setMonth(parseInt(expiryDate.substring(0, 2)) - 1);
                                            d.setDate(1);
                                            AllBatchItems[i].recGift.causeview__Credit_Card_Expiry_Date__c = d;
                                        }
                                    }
                                    if(AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD"){
                                        AllBatchItems[i].recGift.causeview__Account__c = AllBatchItems[i].payment.causeview__Account_Number__c;
                                        AllBatchItems[i].recGift.causeview__Branch_Num__c = AllBatchItems[i].payment.causeview__Routing_Branch_Number__c;
                                        AllBatchItems[i].recGift.causeview__Bank_Name__c = AllBatchItems[i].payment.causeview__Bank_Name__c;
                                        AllBatchItems[i].recGift.causeview__Institution_Num__c = AllBatchItems[i].payment.causeview__Transit_Number__c;
                                        
                                    }    
                                    recGiftsToCreate.push(AllBatchItems[i].recGift);
                                }
    
                            }
                        }
    
                    /********************************************************************************************************************/                
                    
                    /*
                    4. Upsert Recurring Gift Records
                    */
                    
                    try {
                        recGiftCreateResult = sforce.connection.upsert('Id', recGiftsToCreate);
                    } catch(err) {
                        //TODO: Remove progress indicator
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Recurring Gift. </b></div>');
                        return false;
                    }
                    
                    //Upsert receipts. [Populated much before]
                    var receiptCreateResult;
                    try {
                        receiptCreateResult = sforce.connection.upsert('Id', receiptsToCreate);
                    } catch(err) {
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Creating Receipt. ' + err.faultstring + '</b></div>');
                        return false;
                    }   
                    
                    var receiptIndex = 0;
                    for(var i=0; i<AllBatchItems.length; i++) {
                        // Do not include Approved/Committed/Receipted items.
                        if(store.data.items[i].data['approved'] != true && store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false) {
    
                            //3.6  Populate only if the payment is approved.
                            if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && (AllBatchItems[i].payment.causeview__Status__c == 'Approved'||isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c)  ||(AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD" && AllBatchItems[i].payment.causeview__Status__c == 'Pending'))) {
                                if(recGiftCreateResult[recGiftIndex] !== undefined && recGiftCreateResult[recGiftIndex].success == 'true') {
                                
                                    //5.2. Update transactions with recurring gift ids (where applicable)
                                    AllBatchItems[i].transaction.causeview__Recurring_Donation__c = recGiftCreateResult[recGiftIndex].id;
                                   
                                    store.data.items[i].data['RecGift_id'] = recGiftCreateResult[recGiftIndex].id;
                                    AllBatchItems[i].recGift.id = recGiftCreateResult[recGiftIndex].id;
    
                                    if(recGiftCreateResult[recGiftIndex].created == 'true') {
                                        deleteAllIds.splice(0,0,recGiftCreateResult[recGiftIndex].id);
                                    }
                                    
                                    //5.3. Populate recurring gift allocations for recurring gifts to upsert
        
                                    for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) {
                                        if(Object.keys(AllBatchItems[i].giftDetails[j]).length > 1) {
                                            
                                            var recGiftDetail = new sforce.SObject("causeview__RD_Allocation__c");
                                            
                                            recGiftDetail['Id'] = AllBatchItems[i].giftDetails[j].id == null ? '' : AllBatchItems[i].giftDetails[j].id;
                                            recGiftDetail['causeview__Active__c'] = true;
                                            recGiftDetail['causeview__Amount__c'] = AllBatchItems[i].giftDetails[j].causeview__Amount__c;
                                            recGiftDetail['causeview__New_Campaign__c'] = AllBatchItems[i].giftDetails[j].causeview__New_Campaign__c;
                                            recGiftDetail['causeview__Campaign__c'] = AllBatchItems[i].giftDetails[j].causeview__Campaign__c;
                                            recGiftDetail['causeview__Custom_Allocation_Text__c'] = AllBatchItems[i].giftDetails[j].causeview__Custom_Allocation_Text__c;
                                            recGiftDetail['causeview__Fund__c'] = AllBatchItems[i].giftDetails[j].causeview__Fund__c;
                                            //recGiftDetail['causeview__ExternalOwnerId__c'] = null;
                                            recGiftDetail['causeview__Package__c'] = AllBatchItems[i].giftDetails[j].causeview__Package__c;
                                            recGiftDetail['causeview__Parent_Appeal__c'] = AllBatchItems[i].giftDetails[j].causeview__Parent_Appeal__c;
                                            recGiftDetail['causeview__Recurring_Gift__c'] = recGiftCreateResult[recGiftIndex].id;
        
                                            recGiftDetailsToCreate.push(recGiftDetail);
                                        }
                                    }
                                   
                                    recGiftIndex++;
                                    
                                } 
                                else if (recGiftCreateResult[recGiftIndex] === undefined) {
                                    j$("#gridSpace").prepend('<div class="rec-gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Recurring Gift Record at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                                else if (recGiftCreateResult[recGiftIndex].success != true) {
                                    j$("#gridSpace").prepend('<div class="rec-gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Recurring Gift Record at row no. ' + (i + 1) + ' : ' + recGiftCreateResult[recGiftIndex].errors.message + '</b></div>');
                                    return false;
                                }
                            } else {
                                //TODO: Review
                                //5.4. Determine recurring gifts to delete
                                if(!isEmptyOrNullOrUndefined(AllBatchItems[i].recGift.id) && recGiftCreateResult[recGiftIndex] !== undefined && recGiftCreateResult[recGiftIndex].id !== undefined) {
                                    recGiftsToDelete.push(recGiftCreateResult[recGiftIndex].id);
                                    recGiftIndex++;
                                }
                                
                            }
    
    
                            //Do not check Receipt for Recurring Gift.---AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' && 
                            if(AllBatchItems[i].transaction.causeview__Receipt_Type__c == 'Single Receipt'
                                && AllBatchItems[i].transaction.causeview__Receipt_Later__c != true && AllBatchItems[i].transaction.causeview__Batch_Status__c != 'Receipted'
                                && ('Credit Card,ACH/PAD'.indexOf(AllBatchItems[i].payment.causeview__Payment_Type__c) == -1
                                    || (AllBatchItems[i].payment.causeview__Status__c == 'Approved' || (AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD"
                                        && AllBatchItems[i].payment.causeview__Status__c == 'Pending')
                                        )
                                    )
                                ) {
                                if(receiptCreateResult[receiptIndex] !== undefined) {
                                    if(receiptCreateResult[receiptIndex].success != 'true' && receiptCreateResult[receiptIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                        j$("#gridSpace").prepend('<div class="receipt-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Receipt Record at row no. ' + (i + 1) + '  ' + receiptCreateResult[receiptIndex].errors.message + '</b></div>');
                                        return false;
                                    } else {
                                        store.data.items[i].data['Receipt_id'] = receiptCreateResult[receiptIndex].id;
                                        AllBatchItems[i].receipt.id = receiptCreateResult[receiptIndex].id;
    
                                        AllBatchItems[i].transaction.causeview__Batch_Status__c = 'Receipted';
                                        //AllBatchItems[i].transaction.causeview__Status__c = 'Entered';    //Acknowledged
                                        //Bug fix - linking receipt to payment â Neetha
                                        AllBatchItems[i].payment.causeview__Receipt__c = receiptCreateResult[receiptIndex].id;
                                        receiptIndex++;
                                    }
                                } else {
                                    j$("#gridSpace").prepend('<div class="receipt-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Receipt Record at row no. ' + (i + 1) + '</b></div>');
                                    return false;
                                }
                            }
    
    
                        }
                    }
    
                    /********************************************************************************************************************/                
    
                    /*
                    6. Upsert Recurring Gift Alloc
                    */
                    var recGiftDetailCreateResult;
                    try {
                        recGiftDetailCreateResult = sforce.connection.upsert('Id', recGiftDetailsToCreate);
                    } catch(err) {
                        //TODO: Remove progress indicator
                        j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Recurring Gift Allocations. </b></div>');
                        return false;
                    }
                    
                    
                    /********************************************************************************************************************/                
    
    
    
                        var txnUpdateResult;
                        try {
                            if(transToUpdate.length > 0)
                                txnUpdateResult = sforce.connection.update(transToUpdate);
                        } catch(err) {
                            j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while updating Transactions records</b></div>');
                            return false;
                        }
                        //Bug fix - linking receipt to payment 
                        var paymentUpdateResult;
                        try {
                            if(paymentsToUpdate.length>0)
                                paymentUpdateResult = sforce.connection.update(paymentsToUpdate);
                        } catch(err) {
                            j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Updating Payment records</b></div>');
                            return false;
                        }
    
                        var recGiftDetailIndex = 0;
                        var payUpdIndex = 0;
                        var txnUpdIndex = 0;
                        for(var i=0; i<AllBatchItems.length; i++) {
                            // Do not include Approved/Committed/Receipted items.
                            if(store.data.items[i].data['approved'] != true && store.data.items[i].data['Pay_Submit_to_Gateway__x'] != false) {
    
                                //3.6  Populate only if the payment is approved.
                                if(AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && (AllBatchItems[i].payment.causeview__Status__c == 'Approved' || (AllBatchItems[i].payment.causeview__Payment_Type__c == "ACH/PAD" && AllBatchItems[i].payment.causeview__Status__c == 'Pending'))) {
                                    for(var j = 0; j < AllBatchItems[i].giftDetails.length; j++) {
                                        if(Object.keys(AllBatchItems[i].giftDetails[j]).length > 1) {
                                            if(recGiftDetailCreateResult[recGiftDetailIndex] === undefined) {
                                                j$("#gridSpace").prepend('<div class="rec-gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Recurring Gift Allocation Record at row no. ' + (i + 1) + '</b></div>');
                                                return false;
                                            } else if(recGiftDetailCreateResult[recGiftDetailIndex].success != 'true' && recGiftDetailCreateResult[recGiftDetailIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                                j$("#gridSpace").prepend('<div class="rec-gd-record-create-error-msg error-msg" style="color: red;"><b> Error in Creating Recurring Gift Allocation Record at row no. ' + (i + 1) + ' : ' + recGiftDetailCreateResult[recGiftDetailIndex].errors.message + '</b></div>');
                                                return false;
                                            } else {
                                                store.data.items[i].data.GiftDetails[j]['GiftDetail_id'] = recGiftDetailCreateResult[recGiftDetailIndex].id;
                                                AllBatchItems[i].giftDetails[j].id = recGiftDetailCreateResult[recGiftDetailIndex].id;
                                                recGiftDetailIndex++;
                                            }
                                        }
                                    }
                                }
    
                               
                               if(AllBatchItems[i].transaction.causeview__Gift_Type__c != 'Recurring' || (AllBatchItems[i].transaction.causeview__Gift_Type__c == 'Recurring' && !(isFutureDate(AllBatchItems[i].recGift.causeview__Start_Date__c))))
                               {
                                    if(paymentsToUpdate.length > 0 ){
                                      
                                        if(paymentUpdateResult[payUpdIndex] === undefined) {
                                            j$("#gridSpace").prepend('<div class="pay-record-create-error-msg error-msg" style="color: red;"><b> Error in Updating Payment Record at row no. ' + (i + 1) + '</b></div>');
                                            return false;
                                        } else if(paymentUpdateResult[payUpdIndex].success != 'true' && paymentUpdateResult[payUpdIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                            j$("#gridSpace").prepend('<div class="pay-record-create-error-msg error-msg" style="color: red;"><b> Error in Updating Payment Record at row no. ' + (i + 1) + '  ' + paymentUpdateResult[payUpdIndex].errors.message + '</b></div>');
                                            return false;
                                        }
                                      
                                     } 
                                } 
                                if(transToUpdate.length > 0) {
                                    if(txnUpdateResult[txnUpdIndex] === undefined) {
                                        j$("#gridSpace").prepend('<div class="pay-record-create-error-msg error-msg" style="color: red;"><b> Error in Updating Gift Record at row no. ' + (i + 1) + '</b></div>');
                                        return false;
                                    } else if(txnUpdateResult[txnUpdIndex].success != 'true' && txnUpdateResult[txnUpdIndex].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                        j$("#gridSpace").prepend('<div class="pay-record-create-error-msg error-msg" style="color: red;"><b> Error in Updating Gift Record at row no. ' + (i + 1) + '  ' + txnUpdateResult[txnUpdIndex].errors.message + '</b></div>');
                                        return false;
                                }
                               }     
                                payUpdIndex++;
                                txnUpdIndex++;
                                j$(j$(".saved-icon")[i]).css("opacity", 1);
                            }
                        }
                        var paymentDeleteResult;
                        var allocationsDeleteResult;
                        try {
                            if(paymentsToDelete.length > 0){
                                var allocationsRecordsToDelete = sforce.connection.query('SELECT id FROM causeview__Gift_Detail__c WHERE causeview__Payment__c IN (\'' + paymentsToDelete.join('\',\'') + '\')');
                                var allocationsToDelete = [];
                                if(parseInt(allocationsRecordsToDelete.size) == 1) {
                                    allocationsToDelete.push(allocationsRecordsToDelete.records.Id);
                                } else if(parseInt(allocationsRecordsToDelete.size) > 1) {
                                    for(var i = 0; i < parseInt(allocationsRecordsToDelete.size); i++){
                                        allocationsToDelete.push(allocationsRecordsToDelete.records[i].Id);
                                    }
                                }
                            
                                allocationsDeleteResult = sforce.connection.deleteIds(allocationsToDelete);
                            }
                        } catch(err) {
                            j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Deleting Allocation records</b></div>');
                            return false;
                        }
                        try {
                            paymentDeleteResult = sforce.connection.deleteIds(paymentsToDelete);
                        } catch(err) {
                            j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error while Deleting Payment records</b></div>');
                            return false;
                        }
                        return true;
                    }
    
                if(saveRecords()) {
                    isLoadingEdit = true;
                    myMask.hide();
                    j$(".saved-icon").css("opacity", 1);
    
                    j$(".outerNoSidebar").parent("div").prepend('<div class="save-success-msg popupBackground" >' + //style="position: absolute; height: 100%; width: 100%; background-color: gainsboro; z-index: 9; opacity: 0.5;"
                                                                    '<div class="custPopup" >' + // style="width: 25%; height: 25%; background-color: red; position: absolute; top:0; bottom: 0; left: 0; right: 0; margin: auto; z-index: 9;"
                                                                        '<table><tbody>' +
                                                                        '<tr><td nowrap><b> Batch Items saved successfully : </b></td><td nowrap><b>  ' + passedRecCount + '</b></td></tr>' +
                                                                        '<tr><td nowrap></td><td nowrap></td></tr>' +
                                                                        '<tr><td nowrap><b> Batch Items approved by Payment Gateway : </b></td><td nowrap><b>  ' + submittedRecCount + '</b></td></tr>' +
                                                                        '<tr><td nowrap><b> Batch Items declined by Payment Gateway : </b></td><td nowrap><b>  ' + failedRecCount + '</b></td></tr>' +
                                                                        '</tbody></table>' +
                                                                        '<center><button id="saved-ok" type="button"> Ok </button></center>' +
                                                                        '<center><button id="saved-return" type="button"> Return to Batch Summary </button></center>' +
                                                                    '</div>' +
                                                                '</div>');
    
    
                    j$("#saved-return").click(function() {
                        j$(".userFieldId").remove();
                        postSave();
                    });
                    j$("#saved-ok").ready(function() {
                      j$("#saved-ok").focus();
                    });
                    j$("#saved-ok").click(function() {
                        j$(".save-success-msg").remove();
                        
                        
                        var testbacthsave=window.location.href;
                        if(testbacthsave.indexOf("&save=true") !== -1)
                        {
                          testbacthsave=testbacthsave.replace("&save=true","");
                          window.location.assign(testbacthsave); 
                        }
                        else
                        {
                          if(failedRecCount == 0)
                          document.location.reload(true);
                        }
                       
                    });
                    deleteAllIds = [];    
                    deleteSoftCredits = [];
                } else {
                    myMask.hide();    //added by nitin
                    j$("#gridSpace").prepend('<div class="batch-item-create-error-msg error-msg" style="color: red;"><b> Error in Saving Batch Items.  </b></div>');
                }
    
              }
    
              //While Opening a committed Gift batch record.
              function  committedBatch() {
                   j$(".x-grid-wrap-row").each(function(i, el) {
                       j$(el).find(".delete-batch-item-icon").attr("src", '{!URLFOR($Resource.Icons, "DeleteDisabled.png")}');
                       j$(el).find(".saved-icon").attr("src", '{!URLFOR($Resource.Icons, "Saved.png")}');
                       j$(el).find(".Payment-Gateway").attr("src", '{!URLFOR($Resource.Icons, "PaymentGateway.png")}'); 
                       j$(el).find(".delete-batch-item-icon").css("cursor", "default");   //madhu 78228288
    
                      
                 });
                 try {
                        j$(".ux-row-expander-box").each(function(i, el) {
                            j$(el).find(".delete-alloc-item-icon").attr("src", '{!URLFOR($Resource.Icons, "DeleteDisabled.png")}');
                            j$(el).find(".delete-soft-credit-icon").attr("src", '{!URLFOR($Resource.Icons, "DeleteDisabled.png")}');
                            j$(el).find(".delete-soft-credit-icon").css("cursor", "default");   //madhu 78228288
                            j$(el).find(".delete-alloc-item-icon").css("cursor", "default");     //madhu 78228288
    
    
                        });
                 } catch(err) {
                    //Do nothing.
                 }
                Ext.getCmp('saveId').disable();
                Ext.getCmp('editId').disable();
                Ext.getCmp('cancelId').disable();
                Ext.getCmp('addBatchItemId').disable();
                Ext.getCmp('savebatchItemId').disable();
             }   
    
              //Confirmation Popup if the user wants to navigate way.
              window.onbeforeunload = confirmBrowseAway;
              window.onunload = exitWithoutSaving;
              function confirmBrowseAway(x,y,z) {
                  if (document.all) return;
                  else if (isLoadingEdit!= true) {
                    return "Are you sure you want to navigate away from this page? \n" +
                    "You will lose any unsaved item if you leave this page.";
                    
                  }
                  isLoadingEdit = false;
             }
             function exitWithoutSaving() {
    /*             try {
                     if ( deleteSoftCredits.length > 0 ) {
                        var deleteSoftCreditResult = sforce.connection.deleteIds(deleteSoftCredits);
                        for(var i=0; i<deleteSoftCreditResult.length; i++) {
                            if(deleteSoftCreditResult[i].success != 'true'&& deleteSoftCreditResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                j$("#gridSpace").prepend('<div class="batch-item-delete-error-msg error-msg" style="color: red;"><b> Error in Deleting Soft Credit Records. </b></div>');
                                return;
                            }
                        }
                     }
                     if ( deleteAllIds.length > 0 ){
                         var deleteResult = sforce.connection.deleteIds(deleteAllIds);
                         for(var i=0; i<deleteResult.length; i++) {
                            if(deleteResult[i].success != 'true' && deleteResult[i].errors.statusCode != 'ALL_OR_NONE_OPERATION_ROLLED_BACK') {
                                j$("#gridSpace").prepend('<div class="batch-item-delete-error-msg error-msg" style="color: red;"><b> Error in Deleting Existing Batch Item Records. </b></div>');
                                return;
                            }
                        }
                     }
                 } catch(err) {
                    j$("#gridSpace").prepend('<div class="batch-item-delete-error-msg error-msg" style="color: red;"><b> Error in Deleting Existing Batch Item Records. </b></div>');
                    return;
                 }
    */
                 return;
             }
    
                    //--------------------- Populate Reconciliation Fields. ---------------------
             
             var populateReconFields = function() {
                var fieldIds = [];
                
                var reconRecord = {};
                reconRecord.totalCount = 0;
                reconRecord.sharePlanCount = 0;
                reconRecord.ShareplanTotal = 0;
                reconRecord.cashTotal = 0;
                reconRecord.creditCardTotal = 0;
                reconRecord.ccApprovedCount = 0;
                reconRecord.ccDeclinedCount = 0;
                
                reconRecord.OnlinePaymentCount = 0;
                reconRecord.OfflinePaymentCount = 0;
                
                reconRecord.chequeTotal = 0;
                reconRecord.OtherTotal = 0;
                reconRecord.grandTotal = 0;
                reconRecord.ccPendingCount = 0;
                reconRecord.creditCardTotalPending = 0;
                reconRecord.cashCount = 0;
                reconRecord.checkCount = 0;
                reconRecord.ccCount = 0;
                reconRecord.otherCount = 0;
                reconRecord.inKindCount = 0;
                reconRecord.inKindTotal = 0;
                reconRecord.ACHPADCount = 0;
                reconRecord.stockCount = 0;
                reconRecord.stockTotal = 0;
                reconRecord.ACHPADTotal = 0;
                    
                for(var i=0; i<store.data.items.length; i++) {
                    var storeData = store.getAt(i).data;
                    var paymentType = '';
                    try {
                        paymentType = storeData.Pay_causeview__Payment_Type__c;
                    } catch(err) {
    //                    j$("#gridSpace").prepend('<div class="batch-item-fetch-error-msg error-msg" style="color: red;"><b> Unexpected Error : '+ err.message +' </b></div>');
                    }
                    var paymentAmount = isNaN(parseFloat(storeData.Gift_causeview__Expected_Amount__c)) ? 0 : parseFloat(storeData.Gift_causeview__Expected_Amount__c);
    
                    if(storeData.Gift_causeview__Gift_Type__c == 'Recurring') {
                        reconRecord.sharePlanCount++;
                        reconRecord.ShareplanTotal += paymentAmount;
                        if(isEmptyOrNullOrUndefined(storeData.id)) {
                            fieldIds.push('noOfRecSignUpsGifts');
                        }
                    }
                    //12345
                    reconRecord.totalCount++;
                    if(isEmptyOrNullOrUndefined(storeData.id)) {
                        fieldIds.push('noOfTotalGifts');
                        fieldIds.push('totalGiftAmount');
                    }
    
                    if(paymentType == 'Cash') {
                          reconRecord.cashTotal += paymentAmount;
                          reconRecord.cashCount++;
                          reconRecord.OfflinePaymentCount++;
                        if(isEmptyOrNullOrUndefined(storeData.id)) {
                            fieldIds.push('noOfCashGifts');
                            fieldIds.push('totalCash');
                        }
                    } else {
                        if (paymentType == 'Credit Card') {
                            reconRecord.creditCardTotal += paymentAmount;
                            reconRecord.ccCount++;
                            reconRecord.OnlinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfCreditCardGifts');
                                fieldIds.push('totalCreditCard');
                            }
    
                            if(storeData.Gift_causeview__Batch_Status__c == 'Committed' || storeData.Gift_causeview__Batch_Status__c == 'Receipted') {
                                reconRecord.ccApprovedCount ++;
                            } else if(storeData.Gift_causeview__Batch_Status__c == 'Failed') {
                                reconRecord.ccDeclinedCount ++;
                            }
                        }
                        else if(paymentType == 'Check' || paymentType == 'Cheque') {
                            reconRecord.chequeTotal += paymentAmount;
                            reconRecord.checkCount++;
                            reconRecord.OfflinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfCheckGifts');
                                fieldIds.push('totalCheck');
                            }
                        }else                                                //added by nitin this line to
                        if(paymentType == 'In Kind') {  
                            reconRecord.inKindTotal += paymentAmount;
                            reconRecord.inKindCount++;
                            reconRecord.OfflinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfInKindGifts');
                                fieldIds.push('totalInKind');
                            }
                        }else
                        if(paymentType == 'Stock') {  
                            reconRecord.stockTotal += paymentAmount;
                            reconRecord.stockCount++;
                            reconRecord.OfflinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfStockGifts');
                                fieldIds.push('totalStock');
                            }
                        }else
                        if(paymentType == 'ACH/PAD') {  
                            reconRecord.ACHPADTotal += paymentAmount;
                            reconRecord.ACHPADCount++;
                            reconRecord.OnlinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfACHPADGifts');
                                fieldIds.push('totalACHPAD');
                            }
                        } else {    /* paymentType == 'Other' */
                            reconRecord.OtherTotal += paymentAmount;
                            reconRecord.otherCount++;
                            reconRecord.OfflinePaymentCount++;
                            if(isEmptyOrNullOrUndefined(storeData.id)) {
                                fieldIds.push('noOfOtherGifts');
                                fieldIds.push('totalOther');
                            }
                        }
                        
                    }
                    if(paymentType != 'PAD') {
                        //reconRecord.grandTotal += paymentAmount;
                    }
    
                    if(paymentType == 'Credit Card' 
                        && storeData.Gift_causeview__Batch_Status__c == 'Pending'
                        && (storeData.Gift_causeview__Gift_Type__c != 'Recurring' || (storeData.Gift_causeview__Gift_Type__c == 'Recurring' &&  storeData.RecGift_causeview__Start_Date__c == new Date())) ) {    // && tResult.records.causeview__Recurring_Donation__r.causeview__Start_Date__c == new Date()
                    
                        reconRecord.ccPendingCount ++;
                        reconRecord.creditCardTotalPending += paymentAmount;
                    }
    
                    reconRecord.grandTotal += paymentAmount;
                }
                
                reconRecord.cashTotal = Ext.util.Format.number(reconRecord.cashTotal, '0,000.00/i');
                reconRecord.chequeTotal = Ext.util.Format.number(reconRecord.chequeTotal, '0,000.00/i');
                reconRecord.creditCardTotal = Ext.util.Format.number(reconRecord.creditCardTotal, '0,000.00/i');
                reconRecord.inKindTotal = Ext.util.Format.number(reconRecord.inKindTotal, '0,000.00/i');
                reconRecord.stockTotal = Ext.util.Format.number(reconRecord.stockTotal, '0,000.00/i');
                reconRecord.ACHPADTotal = Ext.util.Format.number(reconRecord.ACHPADTotal, '0,000.00/i');
                reconRecord.OtherTotal = Ext.util.Format.number(reconRecord.OtherTotal, '0,000.00/i');
                reconRecord.grandTotal = Ext.util.Format.number(reconRecord.grandTotal, '0,000.00/i');
            
                 var reconStore = Ext.create('Ext.data.Store', { //Create a store, which is like collection of records with sorting and grouping capability
                                    model       : 'ReconFieldsModel', //Associate your store with Model
                                    proxy       : {
                                                    type    : 'memory',
                                                    reader  : {
                                                        type : 'json',
                                                    }
                                                  },
                                     data : [
                                             {noOfCashGifts: reconRecord.cashCount, noOfCheckGifts: reconRecord.checkCount, noOfCreditCardGifts: reconRecord.ccCount, noOfInKindGifts: reconRecord.inKindCount, noOfStockGifts: reconRecord.stockCount,
                                              noOfACHPADGifts: reconRecord.ACHPADCount, noOfOtherGifts: reconRecord.otherCount, noOfTotalGifts: reconRecord.totalCount, noOfCreditCardApprovedGifts: reconRecord.ccApprovedCount, noOfCreditCardDeclinedGifts: reconRecord.ccDeclinedCount,
                                              noOfOnlinePaymentGifts:reconRecord.OnlinePaymentCount ,noOfOfflinePaymentGifts:reconRecord.OfflinePaymentCount ,noOfRecSignUpsGifts: reconRecord.sharePlanCount, totalCash: reconRecord.cashTotal, totalCheck: reconRecord.chequeTotal, totalCreditCard: reconRecord.creditCardTotal, totalInKind: reconRecord.inKindTotal,
                                              totalStock: reconRecord.stockTotal, totalACHPAD: reconRecord.ACHPADTotal, totalOther: reconRecord.OtherTotal, totalGiftAmount: reconRecord.grandTotal, totalRecurring: reconRecord.ShareplanTotal,
                                             },
                                     ],
                                });
             
                   Ext.getCmp('reconForm').getForm().loadRecord(reconStore.getAt(0));
                   
                   j$('.unsaved-recon-fields').removeClass('unsaved-recon-fields');
                   
                   for(var i=0; i<fieldIds.length; i++) {
                       j$('#' + fieldIds[i] + '-labelEl').addClass('unsaved-recon-fields');
                       j$('#' + fieldIds[i] + '-inputEl').addClass('unsaved-recon-fields');
                   }
             }
    
        </script>
    
        <style>
            //Non Summary Fields Check Box margin.
            .x-form-type-checkbox 
               width: 27.7% !important;
            }
    
            table.non-summary-fields {
                height: 3% !important;
                width: 10% !important;
                float: left !important;
                margin: 0 2% 1% 0 !important;
            }
    
            //Form Checkbox align
            .x-form-checkbox {
                //margin-right: 150px !important;
            }
    
        </style>
    
    </apex:page>
