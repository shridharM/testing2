public with sharing class HouseHold{
    public class MyMember{
        public Integer Id {get;set;}
        public Boolean Checked {get;set;}
        //public Boolean Deleted {get;set;}
        public Contact Member {get;set;}
        public MyMember(Integer id, Boolean c, Contact m){
            this.Id = id;
            this.Checked = c;
            this.Member = m;
        }
        public MyMember(){
        }
    }
    public String HouseHoldId {get; set;}
    public String Url {get;set;}
    public Contact c {get;set;}
    //public String MemberRequired {get;set;}
    public String Msg {get; set;}
    public Account HouseHold {get;set;}
    public Contact Member {get;set;}    
    public List<Schema.FieldSetMember> HouseHoldFieldList {get; set;}
    public List<Schema.FieldSetMember> MemberFieldList {get; set;} 
    public Boolean MemberRequired {get; set;}
    public String ActionMemberId {get; set;}
    public String UpdatedMemberIds {get; set;}
    public String TestActionMemberId {get; set;}
    public List<MyMember> MyMemberList{get; set;}
    public List<MyMember> SelectedMyMemberList {get; set;}
    public List<Contact> DelMemberList {get; set;} 
    public String Keywords {get; set;}   
    public List<MyMember> ExistingMemberList {get; set;} 
    public Contact ExistingMember {get; set;} 
    public String ExistingMemberId {get; set;} 
    public String NewMemberType {get; set;}
    public String MemberOperation {get; set;}
    
    public String DisplayNewMemberButton {get; set;}
    public String DisplaySuggestedMemberButton {get; set;}
    public String DisplayEditMemberButton {get; set;}
    public String DisplayExistingMemberButton {get; set;}
    public String DisplayMemberDetails {get; set;}
    public String DisplaySearchKeywords {get; set;}
    public String DisplayExistingMemberList {get; set;}
    public String DisplayBackBlock {get; set;}
    public String DisplayPopUp {get; set;}
    public String DisplayHiddenPopUp {
        get{
            if(DisplayPopUp.equals('none')){
                return '';
            }else{
                return 'none';
            }
        }
    }
    public String DisplayAddSelectedMemberButton {get; set;}   
    public String DisplayPageIndex{
        get{
            if(ExistingMemberList.size() > 0){
                return '';
            }else{
                return 'none';
            }
        }
    } 
    
    
    public Integer TotalCount {get; set;}
    public Integer TotalPageNumber{
        get{
            Integer n = TotalCount / PageSize;
            Integer mod = TotalCount - (n * PageSize);
            if(mod > 0){
                n++;
            }
            return n;
        }
    }
    public Integer PageSize = 10;
    public Integer PageIndex {get; set;}
    public Boolean PreviousButtonDisabled{
        get{
            return !(PageIndex > 1);
        }
    }
    public Boolean NextButtonDisabled{
        get{
            return !(PageIndex < TotalPageNumber);
        }
    }
        
    public HouseHold() {
        UpdatedMemberIds = '';
        TotalCount = 0;
        PageIndex = 1;
        setHouseHoldFieldList();
        setMemberFieldList();
        setHouseHold();
        setMemberList();
        resetMember();
        hideAll();
    }
    
    public void setHouseHoldFieldList() {
        HouseHoldFieldList = SObjectType.Account.FieldSets.cv_pkg_dev_I__Household.getFields();
    }
    public void setMemberFieldList() {
        MemberFieldList = SObjectType.Contact.FieldSets.cv_pkg_dev_I__Member.getFields();
    }
    
    private void setHouseHold() {
        Url = ApexPages.currentPage().getParameters().get('Url');
        HouseHoldId = ApexPages.currentPage().getParameters().get('Id');
        if(HouseHoldId != null && !HouseHoldId.equals('')){
            String query = 'SELECT ';
            for(Schema.FieldSetMember f : HouseHoldFieldList) {
                query += f.getFieldPath() + ', ';
            }
            query += 'Id, OwnerId FROM Account where id=\'' + HouseHoldId + '\' LIMIT 1';
            HouseHold = Database.query(query);
        }else{    
            HouseHold = new Account();
            String rtName = 'Household';
            RecordType rt = [select Id from RecordType where Name =:rtName AND NamespacePrefix = 'causeview' limit 1];
            HouseHold.RecordTypeId = rt.Id;
        }
    }
    public void resetMember(){
        ActionMemberId = null;
        Member = new Contact();
        Member.LastName = Keywords ;
        ExistingMemberList = new List<MyMember>();
    }
    public void saveMember(){
        for(Schema.FieldSetMember f : MemberFieldList) {
            Member.cv_pkg_dev_I__Household__c = HouseHold.Id;
            Member.put(f.getFieldPath(), Member.get(f.getFieldPath()));
        }
        if(MyMemberList == null){
            MyMemberList = new List<MyMember>();
        }
        //ActionMemberId = ApexPages.currentPage().getParameters().get('ActionMemberId');
        if(ActionMemberId == null){
            MyMember mm = new MyMember();
            mm.Id = MyMemberList.size();
            mm.Member = Member;
            MyMemberList.add(mm);
        }else{
            Integer i = Integer.ValueOf(ActionMemberId);
            for(MyMember mm: MyMemberList){
                if(mm.Id == i){
                    mm.Member = Member;
                    UpdatedMemberIds += Member.Id;
                }
            }
        }    
    }
    public void queryExistingMember(){
        ExistingMemberList = new List<MyMember>();
        String query = 'SELECT ';
        query += ' FirstName, LastName, Email, Phone, cv_pkg_dev_I__Household__c, MailingCity, MailingCountry, MailingPostalCode, MailingState, MailingStreet, cv_pkg_dev_I__Household__r.Name,';
        query += ' Id FROM Contact';
        if(DisplayMemberDetails.equals('')){
            query += ' WHERE ';
            
          string test=Member.LastName;
          
          if(test.contains('\\')){
              test=test.replaceAll('\\\\', '\\\\\\\\');              
          }          
          if(test.contains('\'')){
              test=test.replaceAll('\'', '\\\\\'');              
          }  
            query += ' LastName like \'%' + test + '%\'';
        }else{
            if(Keywords != null && !Keywords.equals('')){
            
                if(Keywords.contains('\\')){
              Keywords=Keywords.replaceAll('\\\\', '\\\\\\\\');              
          }          
          if(Keywords.contains('\'')){
              Keywords=Keywords.replaceAll('\'', '\\\\\'');              
          }  

                query += ' WHERE ';
                query += ' LastName like \'%' + Keywords + '%\'';
            }
        }
        System.debug('xxxxxxxxxxxxxxxxxxxxxx suggested member query string' + query);
        setExistingMember(query);
    }
    public void setExistingMember(String query){
        ExistingMemberList = new List<MyMember>();
        
        Integer min = (PageIndex-1) * PageSize;
        Integer max = PageIndex * PageSize - 1;
        
        Integer i = 0;
        for(Contact m : Database.query(query)){
            if(i >= min && i <= max){
                boolean AddedAlready = false;
                for (MyMember mm : MyMemberList) {
                    if (mm.Member.Id == m.Id) { AddedAlready = true; }                    
                }
                if (!AddedAlready) {
                    ExistingMemberList.add(new MyMember(i + 1, false, m));
                }
            }
            i++;
        }
        TotalCount = i;
        if(TotalCount == 0){
            PageIndex = 0;
        }
    }
    
    public void hideAll(){    
        DisplayBackBlock = 'none';
        DisplayPopUp = 'none';
        hideAllController();
        PageIndex = 1;
    }
    public void hideAllController(){
        DisplayNewMemberButton = 'none';
        DisplaySuggestedMemberButton = 'none';
        DisplayEditMemberButton = 'none';
        DisplayExistingMemberButton = 'none';
        DisplayMemberDetails = 'none';
        DisplaySearchKeywords = 'none';
        DisplayExistingMemberList = 'none';
        DisplayAddSelectedMemberButton = 'none';
        if(ExistingMemberList.size() > 0){
            DisplayAddSelectedMemberButton = '';
        }
        MemberRequired = false;
    }
    public void displayPopUp(){
        DisplayBackBlock = 'block';
        DisplayPopUp = 'block';
    }
    //public void displayAllControl(){
    //    DisplayNewMemberButton = '';
    //    DisplaySuggestedMemberButton = '';
    //    DisplayEditMemberButton = '';
    //    DisplayMemberDetails = '';
    //    DisplaySearchKeywords = '';
    //    DisplayExistingMemberList = '';
    //    MemberRequired = true;
    //}
    public void displayNewMember(){        
        hideAllController();
        DisplayNewMemberButton = '';
        DisplayMemberDetails = '';
        MemberRequired = true;
        MemberOperation = 'Add New Member';
    }
    public void displaySuggestedMember(){       
        hideAllController();
        DisplaySuggestedMemberButton = '';
        DisplayMemberDetails = '';
        DisplayExistingMemberList = '';
        MemberRequired = true;
    }
    public void displayEditMember(){       
        hideAllController();
        DisplayEditMemberButton = '';
        DisplayMemberDetails = '';
        MemberRequired = true;
        MemberOperation = 'Edit Existing Individual ';
    }
    public void displayExistingMember(){       
        hideAllController();
        DisplayExistingMemberButton = '';
        DisplaySearchKeywords = '';
        DisplayExistingMemberList = '';
        MemberOperation = 'Add Existing Individual ';
    }
    
    public void setMemberList(){        
        MyMemberList = new List<MyMember>();
        if(HouseHold.Id != null){                
            String query = 'SELECT ';
            for(Schema.FieldSetMember f : MemberFieldList) {
                query += f.getFieldPath() + ', ';
            }
            query += ' Id FROM Contact ';
            query += ' where cv_pkg_dev_I__Household__c = \'' + HouseHold.Id + '\'';
            List<Contact> MemberList = Database.query(query);
            Integer i = 0;
            for(Contact m:MemberList){
                MyMember mm = new MyMember();
                mm.Id = i;
                mm.Member = m;
                MyMemberList.add(mm);
                i++;
            }
        }
        DelMemberList = new List<Contact>();
    }
    public void setSelectedMember(){
        String ids = '';
        for(MyMember mm: ExistingMemberList){
            if(mm.Checked){
                if(!ids.equals('')){
                    ids += ',';
                }
                ids += '\'' + mm.Member.Id + '\'';
            }
        }      
        if(ids.equals('')){
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'You have not selected any individuals to add');  
            ApexPages.addMessage(myMsg);  
        }else{
            String query = 'SELECT ';
            for(Schema.FieldSetMember f : MemberFieldList) {
                query += f.getFieldPath() + ', ';
            }
            query += ' Id FROM Contact ';
            query += ' where id in (' + ids + ')';
            List<Contact> cList = Database.query(query);
            for(Contact c:cList){
                MyMemberList.add(new MyMember(MyMemberList.size(), false, c));
                c.cv_pkg_dev_I__Household__c = HouseHold.Id;
                UpdatedMemberIds += c.Id;
            }
        }
    }
    public void setActionMemberId(){
        ActionMemberId = ApexPages.currentPage().getParameters().get('ActionMemberId');
        if(ActionMemberId == null){
            ActionMemberId = TestActionMemberId;
        }
    }       
    
    public PageReference saveAll(){
        try{
            Boolean bHasPrimaryContact = false;
            for(Schema.FieldSetMember f : HouseHoldFieldList) {
                HouseHold.put(f.getFieldPath(), HouseHold.get(f.getFieldPath()));                
            }
            upsert houseHold;   
            
            HouseHoldId = houseHold.Id;
            
            List<Contact> UpsertContactList = new List<Contact>();
            for(MyMember mm: MyMemberList){
                mm.Member.cv_pkg_dev_I__Household__c = HouseHold.Id;
                UpsertContactList.add(mm.Member);
                if(mm.Member.cv_pkg_dev_I__Household_Primary_Contact__c){
                    bHasPrimaryContact = true;
                }
            }
            if(bHasPrimaryContact || MyMemberList.size() <= 1){     
            
                if(DelMemberList != null && DelMemberList.size() > 0){
                    //delete DelMemberList;
                }
                if(UpsertContactList != null && UpsertContactList.size() > 0){
                    List<Contact> InsertContactList =new List<Contact>();
                    List<Contact> UpdateContactList =new List<Contact>();
                    for(Contact c: UpsertContactList){
                        if(c.Id != null){
                            if(UpdatedMemberIds.Contains(c.Id)){
                                UpdateContactList.add(c);
                            }
                        }else{                
                            InsertContactList.add(c);
                        }
                    }
                    if(UpdateContactList.size() > 0){
                        Update UpdateContactList;
                    }
                    if(InsertContactList.size() > 0){
                        Insert InsertContactList;
                    }
                    //upsert UpsertContactList;
                }        
                return cancelAll();
            }else{
                ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, 'You must select a Head of Household.  Edit an individual, set them as the Head of Household and try saving again.');  
                ApexPages.addMessage(myMsg);
                return null;
            }
            //setHouseHold();
            //resetMember();
            //PageReference p = new PageReference('/apex/HouseholdView');
        }catch(Exception e){
            ApexPages.Message myMsg = new ApexPages.Message(ApexPages.Severity.ERROR, e.getMessage());  
            ApexPages.addMessage(myMsg); 
            return null;
        }
    }
    public PageReference cancelAll(){
        PageReference p;
        if(HouseHoldId == null || HouseHoldId.equals('')){  
            //p = new PageReference('/001?fcf=00Bi0000000TiEI');
            p = new PageReference(Url);      
        }else{
            p = new PageReference('/' + HouseHoldId);
        }
        return p;
    }
    public PageReference save(){
        saveMember();
        hideAll();
        return null;
    }
    public PageReference saveAndNewMember(){
        saveMember();
        Keywords = '';
        resetMember();
        hideAll();
        displayPopUp();
        displayNewMember();
        return null;
    }
    public PageReference showSuggestedMember(){
        PageIndex = 1;
        queryExistingMember();
        displaySuggestedMember();
        return null;
    }
    public PageReference addSelectedMember(){
        setSelectedMember();
        ApexPages.Message[] mssgs = ApexPages.getMessages(); 
        if(mssgs.size() == 0){
            hideAll();
        }
        return null;
    }
    public PageReference selectExistingMember(){
        ExistingMemberId = ApexPages.currentPage().getParameters().get('ExistingMemberId');
        if(ExistingMemberId == null){
        }else{
            for(MyMember m: ExistingMemberList){
                Contact em = m.Member;
                String strId = em.Id;
                if(strId.equals(ExistingMemberId)){  
                    em.cv_pkg_dev_I__Household__c = HouseHold.Id;                  
                    MyMember mm = new MyMember();
                    mm.Id = MyMemberList.size();
                    mm.Member = em;
                    MyMemberList.add(mm);
                }
            }
        }
        hideAll();
        return null;
    }
    public PageReference cancel(){
        Keywords = '';
        hideAll();
        return null;
    }
    public PageReference newMember(){
        resetMember();
        displayPopUp();
        displayNewMember();
        return null;
    }
    public PageReference addExistingMember(){
        resetMember();
        displayPopUp();
        displayExistingMember();
        return null;
    }    
    public PageReference editMember(){
        setActionMemberId();
        MyMember mm = MyMemberList[Integer.valueOf(ActionMemberId)];
        Member = mm.Member;
        displayPopUp();
        displayEditMember();
        return null;
    }
    public PageReference cloneMember(){
        setActionMemberId();        
        Member = new Contact();
        Integer i = Integer.ValueOf(ActionMemberId);
        for(MyMember mm: MyMemberList){
            if(mm.Id == i){
                for(Schema.FieldSetMember f : MemberFieldList) {
                    Member.cv_pkg_dev_I__Household__c = HouseHold.Id;
                    Member.put(f.getFieldPath(), mm.Member.get(f.getFieldPath()));
                }                
            }
        }
        ActionMemberId = null;
        displayPopUp();
        displayNewMember();
        return null;
    }
    public PageReference delMember(){
        if(DelMemberList == null){
            DelMemberList = new List<Contact>();
        }
        setActionMemberId();
        Integer i = Integer.ValueOf(ActionMemberId);
        Integer n = 0;
        for(MyMember mm: MyMemberList){
            if(mm.Id == i){
                if(mm.Member.Id != null){
                    DelMemberList.add(mm.Member);
                    //mm.Deleted = true;
                }
                break;
            }
            n++;
        }
        MyMemberList.remove(i);
        
        n = 0;
        for(MyMember mm: MyMemberList){
            mm.Id = n;
            n++;
        }
            
        return null;
    }
    public PageReference searchExistingMember(){
        PageIndex = 1;
        queryExistingMember();
        displayExistingMember();
        return null;
    }
    
    public PageReference nextBtnClick() {     
        PageIndex = PageIndex + 1;
        queryExistingMember();
        return null;    
    }
    public PageReference previousBtnClick() {
        PageIndex = PageIndex - 1;
        queryExistingMember();   
        return null;    
    }
}